// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  accessRequest: (where?: AccessRequestWhereInput) => Promise<boolean>;
  admin: (where?: AdminWhereInput) => Promise<boolean>;
  careProvider: (where?: CareProviderWhereInput) => Promise<boolean>;
  hospital: (where?: HospitalWhereInput) => Promise<boolean>;
  icdCodes: (where?: IcdCodesWhereInput) => Promise<boolean>;
  icdSubCodes: (where?: IcdSubCodesWhereInput) => Promise<boolean>;
  insurance: (where?: InsuranceWhereInput) => Promise<boolean>;
  medicalPractitioner: (
    where?: MedicalPractitionerWhereInput
  ) => Promise<boolean>;
  patient: (where?: PatientWhereInput) => Promise<boolean>;
  patientCase: (where?: PatientCaseWhereInput) => Promise<boolean>;
  patientRecord: (where?: PatientRecordWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  accessRequest: (
    where: AccessRequestWhereUniqueInput
  ) => AccessRequestNullablePromise;
  accessRequests: (args?: {
    where?: AccessRequestWhereInput;
    orderBy?: AccessRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AccessRequest>;
  accessRequestsConnection: (args?: {
    where?: AccessRequestWhereInput;
    orderBy?: AccessRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AccessRequestConnectionPromise;
  admin: (where: AdminWhereUniqueInput) => AdminNullablePromise;
  admins: (args?: {
    where?: AdminWhereInput;
    orderBy?: AdminOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Admin>;
  adminsConnection: (args?: {
    where?: AdminWhereInput;
    orderBy?: AdminOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AdminConnectionPromise;
  careProvider: (
    where: CareProviderWhereUniqueInput
  ) => CareProviderNullablePromise;
  careProviders: (args?: {
    where?: CareProviderWhereInput;
    orderBy?: CareProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CareProvider>;
  careProvidersConnection: (args?: {
    where?: CareProviderWhereInput;
    orderBy?: CareProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CareProviderConnectionPromise;
  hospital: (where: HospitalWhereUniqueInput) => HospitalNullablePromise;
  hospitals: (args?: {
    where?: HospitalWhereInput;
    orderBy?: HospitalOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Hospital>;
  hospitalsConnection: (args?: {
    where?: HospitalWhereInput;
    orderBy?: HospitalOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => HospitalConnectionPromise;
  icdCodes: (where: IcdCodesWhereUniqueInput) => IcdCodesNullablePromise;
  icdCodeses: (args?: {
    where?: IcdCodesWhereInput;
    orderBy?: IcdCodesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<IcdCodes>;
  icdCodesesConnection: (args?: {
    where?: IcdCodesWhereInput;
    orderBy?: IcdCodesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IcdCodesConnectionPromise;
  icdSubCodes: (
    where: IcdSubCodesWhereUniqueInput
  ) => IcdSubCodesNullablePromise;
  icdSubCodeses: (args?: {
    where?: IcdSubCodesWhereInput;
    orderBy?: IcdSubCodesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<IcdSubCodes>;
  icdSubCodesesConnection: (args?: {
    where?: IcdSubCodesWhereInput;
    orderBy?: IcdSubCodesOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IcdSubCodesConnectionPromise;
  insurance: (where: InsuranceWhereUniqueInput) => InsuranceNullablePromise;
  insurances: (args?: {
    where?: InsuranceWhereInput;
    orderBy?: InsuranceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Insurance>;
  insurancesConnection: (args?: {
    where?: InsuranceWhereInput;
    orderBy?: InsuranceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InsuranceConnectionPromise;
  medicalPractitioner: (
    where: MedicalPractitionerWhereUniqueInput
  ) => MedicalPractitionerNullablePromise;
  medicalPractitioners: (args?: {
    where?: MedicalPractitionerWhereInput;
    orderBy?: MedicalPractitionerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<MedicalPractitioner>;
  medicalPractitionersConnection: (args?: {
    where?: MedicalPractitionerWhereInput;
    orderBy?: MedicalPractitionerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MedicalPractitionerConnectionPromise;
  patient: (where: PatientWhereUniqueInput) => PatientNullablePromise;
  patients: (args?: {
    where?: PatientWhereInput;
    orderBy?: PatientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Patient>;
  patientsConnection: (args?: {
    where?: PatientWhereInput;
    orderBy?: PatientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PatientConnectionPromise;
  patientCase: (
    where: PatientCaseWhereUniqueInput
  ) => PatientCaseNullablePromise;
  patientCases: (args?: {
    where?: PatientCaseWhereInput;
    orderBy?: PatientCaseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PatientCase>;
  patientCasesConnection: (args?: {
    where?: PatientCaseWhereInput;
    orderBy?: PatientCaseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PatientCaseConnectionPromise;
  patientRecord: (
    where: PatientRecordWhereUniqueInput
  ) => PatientRecordNullablePromise;
  patientRecords: (args?: {
    where?: PatientRecordWhereInput;
    orderBy?: PatientRecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PatientRecord>;
  patientRecordsConnection: (args?: {
    where?: PatientRecordWhereInput;
    orderBy?: PatientRecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PatientRecordConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccessRequest: (data: AccessRequestCreateInput) => AccessRequestPromise;
  updateAccessRequest: (args: {
    data: AccessRequestUpdateInput;
    where: AccessRequestWhereUniqueInput;
  }) => AccessRequestPromise;
  updateManyAccessRequests: (args: {
    data: AccessRequestUpdateManyMutationInput;
    where?: AccessRequestWhereInput;
  }) => BatchPayloadPromise;
  upsertAccessRequest: (args: {
    where: AccessRequestWhereUniqueInput;
    create: AccessRequestCreateInput;
    update: AccessRequestUpdateInput;
  }) => AccessRequestPromise;
  deleteAccessRequest: (
    where: AccessRequestWhereUniqueInput
  ) => AccessRequestPromise;
  deleteManyAccessRequests: (
    where?: AccessRequestWhereInput
  ) => BatchPayloadPromise;
  createAdmin: (data: AdminCreateInput) => AdminPromise;
  updateAdmin: (args: {
    data: AdminUpdateInput;
    where: AdminWhereUniqueInput;
  }) => AdminPromise;
  updateManyAdmins: (args: {
    data: AdminUpdateManyMutationInput;
    where?: AdminWhereInput;
  }) => BatchPayloadPromise;
  upsertAdmin: (args: {
    where: AdminWhereUniqueInput;
    create: AdminCreateInput;
    update: AdminUpdateInput;
  }) => AdminPromise;
  deleteAdmin: (where: AdminWhereUniqueInput) => AdminPromise;
  deleteManyAdmins: (where?: AdminWhereInput) => BatchPayloadPromise;
  createCareProvider: (data: CareProviderCreateInput) => CareProviderPromise;
  updateCareProvider: (args: {
    data: CareProviderUpdateInput;
    where: CareProviderWhereUniqueInput;
  }) => CareProviderPromise;
  updateManyCareProviders: (args: {
    data: CareProviderUpdateManyMutationInput;
    where?: CareProviderWhereInput;
  }) => BatchPayloadPromise;
  upsertCareProvider: (args: {
    where: CareProviderWhereUniqueInput;
    create: CareProviderCreateInput;
    update: CareProviderUpdateInput;
  }) => CareProviderPromise;
  deleteCareProvider: (
    where: CareProviderWhereUniqueInput
  ) => CareProviderPromise;
  deleteManyCareProviders: (
    where?: CareProviderWhereInput
  ) => BatchPayloadPromise;
  createHospital: (data: HospitalCreateInput) => HospitalPromise;
  updateHospital: (args: {
    data: HospitalUpdateInput;
    where: HospitalWhereUniqueInput;
  }) => HospitalPromise;
  updateManyHospitals: (args: {
    data: HospitalUpdateManyMutationInput;
    where?: HospitalWhereInput;
  }) => BatchPayloadPromise;
  upsertHospital: (args: {
    where: HospitalWhereUniqueInput;
    create: HospitalCreateInput;
    update: HospitalUpdateInput;
  }) => HospitalPromise;
  deleteHospital: (where: HospitalWhereUniqueInput) => HospitalPromise;
  deleteManyHospitals: (where?: HospitalWhereInput) => BatchPayloadPromise;
  createIcdCodes: (data: IcdCodesCreateInput) => IcdCodesPromise;
  updateIcdCodes: (args: {
    data: IcdCodesUpdateInput;
    where: IcdCodesWhereUniqueInput;
  }) => IcdCodesPromise;
  updateManyIcdCodeses: (args: {
    data: IcdCodesUpdateManyMutationInput;
    where?: IcdCodesWhereInput;
  }) => BatchPayloadPromise;
  upsertIcdCodes: (args: {
    where: IcdCodesWhereUniqueInput;
    create: IcdCodesCreateInput;
    update: IcdCodesUpdateInput;
  }) => IcdCodesPromise;
  deleteIcdCodes: (where: IcdCodesWhereUniqueInput) => IcdCodesPromise;
  deleteManyIcdCodeses: (where?: IcdCodesWhereInput) => BatchPayloadPromise;
  createIcdSubCodes: (data: IcdSubCodesCreateInput) => IcdSubCodesPromise;
  updateIcdSubCodes: (args: {
    data: IcdSubCodesUpdateInput;
    where: IcdSubCodesWhereUniqueInput;
  }) => IcdSubCodesPromise;
  updateManyIcdSubCodeses: (args: {
    data: IcdSubCodesUpdateManyMutationInput;
    where?: IcdSubCodesWhereInput;
  }) => BatchPayloadPromise;
  upsertIcdSubCodes: (args: {
    where: IcdSubCodesWhereUniqueInput;
    create: IcdSubCodesCreateInput;
    update: IcdSubCodesUpdateInput;
  }) => IcdSubCodesPromise;
  deleteIcdSubCodes: (where: IcdSubCodesWhereUniqueInput) => IcdSubCodesPromise;
  deleteManyIcdSubCodeses: (
    where?: IcdSubCodesWhereInput
  ) => BatchPayloadPromise;
  createInsurance: (data: InsuranceCreateInput) => InsurancePromise;
  updateInsurance: (args: {
    data: InsuranceUpdateInput;
    where: InsuranceWhereUniqueInput;
  }) => InsurancePromise;
  updateManyInsurances: (args: {
    data: InsuranceUpdateManyMutationInput;
    where?: InsuranceWhereInput;
  }) => BatchPayloadPromise;
  upsertInsurance: (args: {
    where: InsuranceWhereUniqueInput;
    create: InsuranceCreateInput;
    update: InsuranceUpdateInput;
  }) => InsurancePromise;
  deleteInsurance: (where: InsuranceWhereUniqueInput) => InsurancePromise;
  deleteManyInsurances: (where?: InsuranceWhereInput) => BatchPayloadPromise;
  createMedicalPractitioner: (
    data: MedicalPractitionerCreateInput
  ) => MedicalPractitionerPromise;
  updateMedicalPractitioner: (args: {
    data: MedicalPractitionerUpdateInput;
    where: MedicalPractitionerWhereUniqueInput;
  }) => MedicalPractitionerPromise;
  updateManyMedicalPractitioners: (args: {
    data: MedicalPractitionerUpdateManyMutationInput;
    where?: MedicalPractitionerWhereInput;
  }) => BatchPayloadPromise;
  upsertMedicalPractitioner: (args: {
    where: MedicalPractitionerWhereUniqueInput;
    create: MedicalPractitionerCreateInput;
    update: MedicalPractitionerUpdateInput;
  }) => MedicalPractitionerPromise;
  deleteMedicalPractitioner: (
    where: MedicalPractitionerWhereUniqueInput
  ) => MedicalPractitionerPromise;
  deleteManyMedicalPractitioners: (
    where?: MedicalPractitionerWhereInput
  ) => BatchPayloadPromise;
  createPatient: (data: PatientCreateInput) => PatientPromise;
  updatePatient: (args: {
    data: PatientUpdateInput;
    where: PatientWhereUniqueInput;
  }) => PatientPromise;
  updateManyPatients: (args: {
    data: PatientUpdateManyMutationInput;
    where?: PatientWhereInput;
  }) => BatchPayloadPromise;
  upsertPatient: (args: {
    where: PatientWhereUniqueInput;
    create: PatientCreateInput;
    update: PatientUpdateInput;
  }) => PatientPromise;
  deletePatient: (where: PatientWhereUniqueInput) => PatientPromise;
  deleteManyPatients: (where?: PatientWhereInput) => BatchPayloadPromise;
  createPatientCase: (data: PatientCaseCreateInput) => PatientCasePromise;
  updatePatientCase: (args: {
    data: PatientCaseUpdateInput;
    where: PatientCaseWhereUniqueInput;
  }) => PatientCasePromise;
  updateManyPatientCases: (args: {
    data: PatientCaseUpdateManyMutationInput;
    where?: PatientCaseWhereInput;
  }) => BatchPayloadPromise;
  upsertPatientCase: (args: {
    where: PatientCaseWhereUniqueInput;
    create: PatientCaseCreateInput;
    update: PatientCaseUpdateInput;
  }) => PatientCasePromise;
  deletePatientCase: (where: PatientCaseWhereUniqueInput) => PatientCasePromise;
  deleteManyPatientCases: (
    where?: PatientCaseWhereInput
  ) => BatchPayloadPromise;
  createPatientRecord: (data: PatientRecordCreateInput) => PatientRecordPromise;
  updatePatientRecord: (args: {
    data: PatientRecordUpdateInput;
    where: PatientRecordWhereUniqueInput;
  }) => PatientRecordPromise;
  updateManyPatientRecords: (args: {
    data: PatientRecordUpdateManyMutationInput;
    where?: PatientRecordWhereInput;
  }) => BatchPayloadPromise;
  upsertPatientRecord: (args: {
    where: PatientRecordWhereUniqueInput;
    create: PatientRecordCreateInput;
    update: PatientRecordUpdateInput;
  }) => PatientRecordPromise;
  deletePatientRecord: (
    where: PatientRecordWhereUniqueInput
  ) => PatientRecordPromise;
  deleteManyPatientRecords: (
    where?: PatientRecordWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  accessRequest: (
    where?: AccessRequestSubscriptionWhereInput
  ) => AccessRequestSubscriptionPayloadSubscription;
  admin: (
    where?: AdminSubscriptionWhereInput
  ) => AdminSubscriptionPayloadSubscription;
  careProvider: (
    where?: CareProviderSubscriptionWhereInput
  ) => CareProviderSubscriptionPayloadSubscription;
  hospital: (
    where?: HospitalSubscriptionWhereInput
  ) => HospitalSubscriptionPayloadSubscription;
  icdCodes: (
    where?: IcdCodesSubscriptionWhereInput
  ) => IcdCodesSubscriptionPayloadSubscription;
  icdSubCodes: (
    where?: IcdSubCodesSubscriptionWhereInput
  ) => IcdSubCodesSubscriptionPayloadSubscription;
  insurance: (
    where?: InsuranceSubscriptionWhereInput
  ) => InsuranceSubscriptionPayloadSubscription;
  medicalPractitioner: (
    where?: MedicalPractitionerSubscriptionWhereInput
  ) => MedicalPractitionerSubscriptionPayloadSubscription;
  patient: (
    where?: PatientSubscriptionWhereInput
  ) => PatientSubscriptionPayloadSubscription;
  patientCase: (
    where?: PatientCaseSubscriptionWhereInput
  ) => PatientCaseSubscriptionPayloadSubscription;
  patientRecord: (
    where?: PatientRecordSubscriptionWhereInput
  ) => PatientRecordSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AccessRequestOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "medicalPractitionerFirstName_ASC"
  | "medicalPractitionerFirstName_DESC"
  | "medicalPractitionerLastName_ASC"
  | "medicalPractitionerLastName_DESC"
  | "medicalPractitionerId_ASC"
  | "medicalPractitionerId_DESC";

export type AdminOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type CareProviderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "middleName_ASC"
  | "middleName_DESC"
  | "address_ASC"
  | "address_DESC"
  | "cityId_ASC"
  | "cityId_DESC"
  | "stateId_ASC"
  | "stateId_DESC"
  | "pinCode_ASC"
  | "pinCode_DESC"
  | "countryCode_ASC"
  | "countryCode_DESC"
  | "contact1_ASC"
  | "contact1_DESC"
  | "email_ASC"
  | "email_DESC";

export type HospitalOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "address_ASC"
  | "address_DESC"
  | "city_ASC"
  | "city_DESC"
  | "district_ASC"
  | "district_DESC"
  | "pincode_ASC"
  | "pincode_DESC"
  | "countryCode_ASC"
  | "countryCode_DESC";

export type IcdCodesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "icdCode_ASC"
  | "icdCode_DESC"
  | "commonName_ASC"
  | "commonName_DESC";

export type IcdSubCodesOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "icdSubCode_ASC"
  | "icdSubCode_DESC"
  | "scientificName_ASC"
  | "scientificName_DESC";

export type InsuranceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "status_ASC"
  | "status_DESC"
  | "companyName_ASC"
  | "companyName_DESC";

export type PatientOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "middleName_ASC"
  | "middleName_DESC"
  | "motherName_ASC"
  | "motherName_DESC"
  | "dob_ASC"
  | "dob_DESC"
  | "bloodGroup_ASC"
  | "bloodGroup_DESC"
  | "sex_ASC"
  | "sex_DESC"
  | "religion_ASC"
  | "religion_DESC"
  | "maritalStatus_ASC"
  | "maritalStatus_DESC"
  | "primaryLanguage_ASC"
  | "primaryLanguage_DESC"
  | "birthPlace_ASC"
  | "birthPlace_DESC"
  | "address_ASC"
  | "address_DESC"
  | "countryCode_ASC"
  | "countryCode_DESC"
  | "occupation_ASC"
  | "occupation_DESC"
  | "contact1_ASC"
  | "contact1_DESC"
  | "contact2_ASC"
  | "contact2_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "socioEconomicStatus_ASC"
  | "socioEconomicStatus_DESC"
  | "immunizationStatus_ASC"
  | "immunizationStatus_DESC"
  | "allergyStatus_ASC"
  | "allergyStatus_DESC"
  | "organDonorStatus_ASC"
  | "organDonorStatus_DESC"
  | "PMH_ASC"
  | "PMH_DESC"
  | "DHx_ASC"
  | "DHx_DESC"
  | "Ca_ASC"
  | "Ca_DESC"
  | "IDDM_ASC"
  | "IDDM_DESC"
  | "NIDDM_ASC"
  | "NIDDM_DESC"
  | "MI_ASC"
  | "MI_DESC"
  | "AF_ASC"
  | "AF_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC";

export type PatientRecordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "visitNo_ASC"
  | "visitNo_DESC"
  | "encounterDate_ASC"
  | "encounterDate_DESC"
  | "observation_ASC"
  | "observation_DESC"
  | "Tx_ASC"
  | "Tx_DESC"
  | "suggesstions_ASC"
  | "suggesstions_DESC"
  | "cevsSp_ASC"
  | "cevsSp_DESC"
  | "cevsDp_ASC"
  | "cevsDp_DESC"
  | "cePr_ASC"
  | "cePr_DESC"
  | "ceRr_ASC"
  | "ceRr_DESC"
  | "ceHeight_ASC"
  | "ceHeight_DESC"
  | "ceWeight_ASC"
  | "ceWeight_DESC"
  | "medication_ASC"
  | "medication_DESC"
  | "advice_ASC"
  | "advice_DESC"
  | "query_ASC"
  | "query_DESC"
  | "followUpObservation_ASC"
  | "followUpObservation_DESC";

export type MedicalPractitionerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "mpId_ASC"
  | "mpId_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "middleName_ASC"
  | "middleName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "dob_ASC"
  | "dob_DESC"
  | "sex_ASC"
  | "sex_DESC"
  | "address_ASC"
  | "address_DESC"
  | "degree_ASC"
  | "degree_DESC"
  | "field_ASC"
  | "field_DESC"
  | "registeredAt_ASC"
  | "registeredAt_DESC";

export type PatientCaseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "HPC_ASC"
  | "HPC_DESC"
  | "MoI_ASC"
  | "MoI_DESC"
  | "DnV_ASC"
  | "DnV_DESC"
  | "clinicNote_ASC"
  | "clinicNote_DESC"
  | "diagnosisType_ASC"
  | "diagnosisType_DESC"
  | "currentClinicalStatus_ASC"
  | "currentClinicalStatus_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AccessRequestWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AccessRequestWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  medicalPractitionerFirstName?: Maybe<String>;
  medicalPractitionerFirstName_not?: Maybe<String>;
  medicalPractitionerFirstName_in?: Maybe<String[] | String>;
  medicalPractitionerFirstName_not_in?: Maybe<String[] | String>;
  medicalPractitionerFirstName_lt?: Maybe<String>;
  medicalPractitionerFirstName_lte?: Maybe<String>;
  medicalPractitionerFirstName_gt?: Maybe<String>;
  medicalPractitionerFirstName_gte?: Maybe<String>;
  medicalPractitionerFirstName_contains?: Maybe<String>;
  medicalPractitionerFirstName_not_contains?: Maybe<String>;
  medicalPractitionerFirstName_starts_with?: Maybe<String>;
  medicalPractitionerFirstName_not_starts_with?: Maybe<String>;
  medicalPractitionerFirstName_ends_with?: Maybe<String>;
  medicalPractitionerFirstName_not_ends_with?: Maybe<String>;
  medicalPractitionerLastName?: Maybe<String>;
  medicalPractitionerLastName_not?: Maybe<String>;
  medicalPractitionerLastName_in?: Maybe<String[] | String>;
  medicalPractitionerLastName_not_in?: Maybe<String[] | String>;
  medicalPractitionerLastName_lt?: Maybe<String>;
  medicalPractitionerLastName_lte?: Maybe<String>;
  medicalPractitionerLastName_gt?: Maybe<String>;
  medicalPractitionerLastName_gte?: Maybe<String>;
  medicalPractitionerLastName_contains?: Maybe<String>;
  medicalPractitionerLastName_not_contains?: Maybe<String>;
  medicalPractitionerLastName_starts_with?: Maybe<String>;
  medicalPractitionerLastName_not_starts_with?: Maybe<String>;
  medicalPractitionerLastName_ends_with?: Maybe<String>;
  medicalPractitionerLastName_not_ends_with?: Maybe<String>;
  medicalPractitionerId?: Maybe<String>;
  medicalPractitionerId_not?: Maybe<String>;
  medicalPractitionerId_in?: Maybe<String[] | String>;
  medicalPractitionerId_not_in?: Maybe<String[] | String>;
  medicalPractitionerId_lt?: Maybe<String>;
  medicalPractitionerId_lte?: Maybe<String>;
  medicalPractitionerId_gt?: Maybe<String>;
  medicalPractitionerId_gte?: Maybe<String>;
  medicalPractitionerId_contains?: Maybe<String>;
  medicalPractitionerId_not_contains?: Maybe<String>;
  medicalPractitionerId_starts_with?: Maybe<String>;
  medicalPractitionerId_not_starts_with?: Maybe<String>;
  medicalPractitionerId_ends_with?: Maybe<String>;
  medicalPractitionerId_not_ends_with?: Maybe<String>;
  AND?: Maybe<AccessRequestWhereInput[] | AccessRequestWhereInput>;
  OR?: Maybe<AccessRequestWhereInput[] | AccessRequestWhereInput>;
  NOT?: Maybe<AccessRequestWhereInput[] | AccessRequestWhereInput>;
}

export type AdminWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AdminWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  AND?: Maybe<AdminWhereInput[] | AdminWhereInput>;
  OR?: Maybe<AdminWhereInput[] | AdminWhereInput>;
  NOT?: Maybe<AdminWhereInput[] | AdminWhereInput>;
}

export type CareProviderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CareProviderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  middleName?: Maybe<String>;
  middleName_not?: Maybe<String>;
  middleName_in?: Maybe<String[] | String>;
  middleName_not_in?: Maybe<String[] | String>;
  middleName_lt?: Maybe<String>;
  middleName_lte?: Maybe<String>;
  middleName_gt?: Maybe<String>;
  middleName_gte?: Maybe<String>;
  middleName_contains?: Maybe<String>;
  middleName_not_contains?: Maybe<String>;
  middleName_starts_with?: Maybe<String>;
  middleName_not_starts_with?: Maybe<String>;
  middleName_ends_with?: Maybe<String>;
  middleName_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  cityId?: Maybe<Int>;
  cityId_not?: Maybe<Int>;
  cityId_in?: Maybe<Int[] | Int>;
  cityId_not_in?: Maybe<Int[] | Int>;
  cityId_lt?: Maybe<Int>;
  cityId_lte?: Maybe<Int>;
  cityId_gt?: Maybe<Int>;
  cityId_gte?: Maybe<Int>;
  stateId?: Maybe<Int>;
  stateId_not?: Maybe<Int>;
  stateId_in?: Maybe<Int[] | Int>;
  stateId_not_in?: Maybe<Int[] | Int>;
  stateId_lt?: Maybe<Int>;
  stateId_lte?: Maybe<Int>;
  stateId_gt?: Maybe<Int>;
  stateId_gte?: Maybe<Int>;
  pinCode?: Maybe<Int>;
  pinCode_not?: Maybe<Int>;
  pinCode_in?: Maybe<Int[] | Int>;
  pinCode_not_in?: Maybe<Int[] | Int>;
  pinCode_lt?: Maybe<Int>;
  pinCode_lte?: Maybe<Int>;
  pinCode_gt?: Maybe<Int>;
  pinCode_gte?: Maybe<Int>;
  countryCode?: Maybe<Int>;
  countryCode_not?: Maybe<Int>;
  countryCode_in?: Maybe<Int[] | Int>;
  countryCode_not_in?: Maybe<Int[] | Int>;
  countryCode_lt?: Maybe<Int>;
  countryCode_lte?: Maybe<Int>;
  countryCode_gt?: Maybe<Int>;
  countryCode_gte?: Maybe<Int>;
  contact1?: Maybe<String>;
  contact1_not?: Maybe<String>;
  contact1_in?: Maybe<String[] | String>;
  contact1_not_in?: Maybe<String[] | String>;
  contact1_lt?: Maybe<String>;
  contact1_lte?: Maybe<String>;
  contact1_gt?: Maybe<String>;
  contact1_gte?: Maybe<String>;
  contact1_contains?: Maybe<String>;
  contact1_not_contains?: Maybe<String>;
  contact1_starts_with?: Maybe<String>;
  contact1_not_starts_with?: Maybe<String>;
  contact1_ends_with?: Maybe<String>;
  contact1_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  AND?: Maybe<CareProviderWhereInput[] | CareProviderWhereInput>;
  OR?: Maybe<CareProviderWhereInput[] | CareProviderWhereInput>;
  NOT?: Maybe<CareProviderWhereInput[] | CareProviderWhereInput>;
}

export type HospitalWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface HospitalWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  district?: Maybe<String>;
  district_not?: Maybe<String>;
  district_in?: Maybe<String[] | String>;
  district_not_in?: Maybe<String[] | String>;
  district_lt?: Maybe<String>;
  district_lte?: Maybe<String>;
  district_gt?: Maybe<String>;
  district_gte?: Maybe<String>;
  district_contains?: Maybe<String>;
  district_not_contains?: Maybe<String>;
  district_starts_with?: Maybe<String>;
  district_not_starts_with?: Maybe<String>;
  district_ends_with?: Maybe<String>;
  district_not_ends_with?: Maybe<String>;
  pincode?: Maybe<Int>;
  pincode_not?: Maybe<Int>;
  pincode_in?: Maybe<Int[] | Int>;
  pincode_not_in?: Maybe<Int[] | Int>;
  pincode_lt?: Maybe<Int>;
  pincode_lte?: Maybe<Int>;
  pincode_gt?: Maybe<Int>;
  pincode_gte?: Maybe<Int>;
  countryCode?: Maybe<Int>;
  countryCode_not?: Maybe<Int>;
  countryCode_in?: Maybe<Int[] | Int>;
  countryCode_not_in?: Maybe<Int[] | Int>;
  countryCode_lt?: Maybe<Int>;
  countryCode_lte?: Maybe<Int>;
  countryCode_gt?: Maybe<Int>;
  countryCode_gte?: Maybe<Int>;
  AND?: Maybe<HospitalWhereInput[] | HospitalWhereInput>;
  OR?: Maybe<HospitalWhereInput[] | HospitalWhereInput>;
  NOT?: Maybe<HospitalWhereInput[] | HospitalWhereInput>;
}

export type IcdCodesWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  icdCode?: Maybe<String>;
}>;

export interface IcdCodesWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  icdCode?: Maybe<String>;
  icdCode_not?: Maybe<String>;
  icdCode_in?: Maybe<String[] | String>;
  icdCode_not_in?: Maybe<String[] | String>;
  icdCode_lt?: Maybe<String>;
  icdCode_lte?: Maybe<String>;
  icdCode_gt?: Maybe<String>;
  icdCode_gte?: Maybe<String>;
  icdCode_contains?: Maybe<String>;
  icdCode_not_contains?: Maybe<String>;
  icdCode_starts_with?: Maybe<String>;
  icdCode_not_starts_with?: Maybe<String>;
  icdCode_ends_with?: Maybe<String>;
  icdCode_not_ends_with?: Maybe<String>;
  commonName?: Maybe<String>;
  commonName_not?: Maybe<String>;
  commonName_in?: Maybe<String[] | String>;
  commonName_not_in?: Maybe<String[] | String>;
  commonName_lt?: Maybe<String>;
  commonName_lte?: Maybe<String>;
  commonName_gt?: Maybe<String>;
  commonName_gte?: Maybe<String>;
  commonName_contains?: Maybe<String>;
  commonName_not_contains?: Maybe<String>;
  commonName_starts_with?: Maybe<String>;
  commonName_not_starts_with?: Maybe<String>;
  commonName_ends_with?: Maybe<String>;
  commonName_not_ends_with?: Maybe<String>;
  AND?: Maybe<IcdCodesWhereInput[] | IcdCodesWhereInput>;
  OR?: Maybe<IcdCodesWhereInput[] | IcdCodesWhereInput>;
  NOT?: Maybe<IcdCodesWhereInput[] | IcdCodesWhereInput>;
}

export type IcdSubCodesWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  icdSubCode?: Maybe<String>;
}>;

export interface IcdSubCodesWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  icdSubCode?: Maybe<String>;
  icdSubCode_not?: Maybe<String>;
  icdSubCode_in?: Maybe<String[] | String>;
  icdSubCode_not_in?: Maybe<String[] | String>;
  icdSubCode_lt?: Maybe<String>;
  icdSubCode_lte?: Maybe<String>;
  icdSubCode_gt?: Maybe<String>;
  icdSubCode_gte?: Maybe<String>;
  icdSubCode_contains?: Maybe<String>;
  icdSubCode_not_contains?: Maybe<String>;
  icdSubCode_starts_with?: Maybe<String>;
  icdSubCode_not_starts_with?: Maybe<String>;
  icdSubCode_ends_with?: Maybe<String>;
  icdSubCode_not_ends_with?: Maybe<String>;
  scientificName?: Maybe<String>;
  scientificName_not?: Maybe<String>;
  scientificName_in?: Maybe<String[] | String>;
  scientificName_not_in?: Maybe<String[] | String>;
  scientificName_lt?: Maybe<String>;
  scientificName_lte?: Maybe<String>;
  scientificName_gt?: Maybe<String>;
  scientificName_gte?: Maybe<String>;
  scientificName_contains?: Maybe<String>;
  scientificName_not_contains?: Maybe<String>;
  scientificName_starts_with?: Maybe<String>;
  scientificName_not_starts_with?: Maybe<String>;
  scientificName_ends_with?: Maybe<String>;
  scientificName_not_ends_with?: Maybe<String>;
  icdCode?: Maybe<IcdCodesWhereInput>;
  AND?: Maybe<IcdSubCodesWhereInput[] | IcdSubCodesWhereInput>;
  OR?: Maybe<IcdSubCodesWhereInput[] | IcdSubCodesWhereInput>;
  NOT?: Maybe<IcdSubCodesWhereInput[] | IcdSubCodesWhereInput>;
}

export type InsuranceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface InsuranceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  status?: Maybe<Boolean>;
  status_not?: Maybe<Boolean>;
  companyName?: Maybe<String>;
  companyName_not?: Maybe<String>;
  companyName_in?: Maybe<String[] | String>;
  companyName_not_in?: Maybe<String[] | String>;
  companyName_lt?: Maybe<String>;
  companyName_lte?: Maybe<String>;
  companyName_gt?: Maybe<String>;
  companyName_gte?: Maybe<String>;
  companyName_contains?: Maybe<String>;
  companyName_not_contains?: Maybe<String>;
  companyName_starts_with?: Maybe<String>;
  companyName_not_starts_with?: Maybe<String>;
  companyName_ends_with?: Maybe<String>;
  companyName_not_ends_with?: Maybe<String>;
  AND?: Maybe<InsuranceWhereInput[] | InsuranceWhereInput>;
  OR?: Maybe<InsuranceWhereInput[] | InsuranceWhereInput>;
  NOT?: Maybe<InsuranceWhereInput[] | InsuranceWhereInput>;
}

export type MedicalPractitionerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  mpId?: Maybe<Int>;
  email?: Maybe<String>;
}>;

export interface PatientWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  middleName?: Maybe<String>;
  middleName_not?: Maybe<String>;
  middleName_in?: Maybe<String[] | String>;
  middleName_not_in?: Maybe<String[] | String>;
  middleName_lt?: Maybe<String>;
  middleName_lte?: Maybe<String>;
  middleName_gt?: Maybe<String>;
  middleName_gte?: Maybe<String>;
  middleName_contains?: Maybe<String>;
  middleName_not_contains?: Maybe<String>;
  middleName_starts_with?: Maybe<String>;
  middleName_not_starts_with?: Maybe<String>;
  middleName_ends_with?: Maybe<String>;
  middleName_not_ends_with?: Maybe<String>;
  motherName?: Maybe<String>;
  motherName_not?: Maybe<String>;
  motherName_in?: Maybe<String[] | String>;
  motherName_not_in?: Maybe<String[] | String>;
  motherName_lt?: Maybe<String>;
  motherName_lte?: Maybe<String>;
  motherName_gt?: Maybe<String>;
  motherName_gte?: Maybe<String>;
  motherName_contains?: Maybe<String>;
  motherName_not_contains?: Maybe<String>;
  motherName_starts_with?: Maybe<String>;
  motherName_not_starts_with?: Maybe<String>;
  motherName_ends_with?: Maybe<String>;
  motherName_not_ends_with?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  dob_not?: Maybe<DateTimeInput>;
  dob_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_lt?: Maybe<DateTimeInput>;
  dob_lte?: Maybe<DateTimeInput>;
  dob_gt?: Maybe<DateTimeInput>;
  dob_gte?: Maybe<DateTimeInput>;
  bloodGroup?: Maybe<String>;
  bloodGroup_not?: Maybe<String>;
  bloodGroup_in?: Maybe<String[] | String>;
  bloodGroup_not_in?: Maybe<String[] | String>;
  bloodGroup_lt?: Maybe<String>;
  bloodGroup_lte?: Maybe<String>;
  bloodGroup_gt?: Maybe<String>;
  bloodGroup_gte?: Maybe<String>;
  bloodGroup_contains?: Maybe<String>;
  bloodGroup_not_contains?: Maybe<String>;
  bloodGroup_starts_with?: Maybe<String>;
  bloodGroup_not_starts_with?: Maybe<String>;
  bloodGroup_ends_with?: Maybe<String>;
  bloodGroup_not_ends_with?: Maybe<String>;
  sex?: Maybe<String>;
  sex_not?: Maybe<String>;
  sex_in?: Maybe<String[] | String>;
  sex_not_in?: Maybe<String[] | String>;
  sex_lt?: Maybe<String>;
  sex_lte?: Maybe<String>;
  sex_gt?: Maybe<String>;
  sex_gte?: Maybe<String>;
  sex_contains?: Maybe<String>;
  sex_not_contains?: Maybe<String>;
  sex_starts_with?: Maybe<String>;
  sex_not_starts_with?: Maybe<String>;
  sex_ends_with?: Maybe<String>;
  sex_not_ends_with?: Maybe<String>;
  religion?: Maybe<String>;
  religion_not?: Maybe<String>;
  religion_in?: Maybe<String[] | String>;
  religion_not_in?: Maybe<String[] | String>;
  religion_lt?: Maybe<String>;
  religion_lte?: Maybe<String>;
  religion_gt?: Maybe<String>;
  religion_gte?: Maybe<String>;
  religion_contains?: Maybe<String>;
  religion_not_contains?: Maybe<String>;
  religion_starts_with?: Maybe<String>;
  religion_not_starts_with?: Maybe<String>;
  religion_ends_with?: Maybe<String>;
  religion_not_ends_with?: Maybe<String>;
  maritalStatus?: Maybe<String>;
  maritalStatus_not?: Maybe<String>;
  maritalStatus_in?: Maybe<String[] | String>;
  maritalStatus_not_in?: Maybe<String[] | String>;
  maritalStatus_lt?: Maybe<String>;
  maritalStatus_lte?: Maybe<String>;
  maritalStatus_gt?: Maybe<String>;
  maritalStatus_gte?: Maybe<String>;
  maritalStatus_contains?: Maybe<String>;
  maritalStatus_not_contains?: Maybe<String>;
  maritalStatus_starts_with?: Maybe<String>;
  maritalStatus_not_starts_with?: Maybe<String>;
  maritalStatus_ends_with?: Maybe<String>;
  maritalStatus_not_ends_with?: Maybe<String>;
  primaryLanguage?: Maybe<String>;
  primaryLanguage_not?: Maybe<String>;
  primaryLanguage_in?: Maybe<String[] | String>;
  primaryLanguage_not_in?: Maybe<String[] | String>;
  primaryLanguage_lt?: Maybe<String>;
  primaryLanguage_lte?: Maybe<String>;
  primaryLanguage_gt?: Maybe<String>;
  primaryLanguage_gte?: Maybe<String>;
  primaryLanguage_contains?: Maybe<String>;
  primaryLanguage_not_contains?: Maybe<String>;
  primaryLanguage_starts_with?: Maybe<String>;
  primaryLanguage_not_starts_with?: Maybe<String>;
  primaryLanguage_ends_with?: Maybe<String>;
  primaryLanguage_not_ends_with?: Maybe<String>;
  birthPlace?: Maybe<String>;
  birthPlace_not?: Maybe<String>;
  birthPlace_in?: Maybe<String[] | String>;
  birthPlace_not_in?: Maybe<String[] | String>;
  birthPlace_lt?: Maybe<String>;
  birthPlace_lte?: Maybe<String>;
  birthPlace_gt?: Maybe<String>;
  birthPlace_gte?: Maybe<String>;
  birthPlace_contains?: Maybe<String>;
  birthPlace_not_contains?: Maybe<String>;
  birthPlace_starts_with?: Maybe<String>;
  birthPlace_not_starts_with?: Maybe<String>;
  birthPlace_ends_with?: Maybe<String>;
  birthPlace_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  countryCode?: Maybe<Int>;
  countryCode_not?: Maybe<Int>;
  countryCode_in?: Maybe<Int[] | Int>;
  countryCode_not_in?: Maybe<Int[] | Int>;
  countryCode_lt?: Maybe<Int>;
  countryCode_lte?: Maybe<Int>;
  countryCode_gt?: Maybe<Int>;
  countryCode_gte?: Maybe<Int>;
  occupation?: Maybe<String>;
  occupation_not?: Maybe<String>;
  occupation_in?: Maybe<String[] | String>;
  occupation_not_in?: Maybe<String[] | String>;
  occupation_lt?: Maybe<String>;
  occupation_lte?: Maybe<String>;
  occupation_gt?: Maybe<String>;
  occupation_gte?: Maybe<String>;
  occupation_contains?: Maybe<String>;
  occupation_not_contains?: Maybe<String>;
  occupation_starts_with?: Maybe<String>;
  occupation_not_starts_with?: Maybe<String>;
  occupation_ends_with?: Maybe<String>;
  occupation_not_ends_with?: Maybe<String>;
  contact1?: Maybe<String>;
  contact1_not?: Maybe<String>;
  contact1_in?: Maybe<String[] | String>;
  contact1_not_in?: Maybe<String[] | String>;
  contact1_lt?: Maybe<String>;
  contact1_lte?: Maybe<String>;
  contact1_gt?: Maybe<String>;
  contact1_gte?: Maybe<String>;
  contact1_contains?: Maybe<String>;
  contact1_not_contains?: Maybe<String>;
  contact1_starts_with?: Maybe<String>;
  contact1_not_starts_with?: Maybe<String>;
  contact1_ends_with?: Maybe<String>;
  contact1_not_ends_with?: Maybe<String>;
  contact2?: Maybe<String>;
  contact2_not?: Maybe<String>;
  contact2_in?: Maybe<String[] | String>;
  contact2_not_in?: Maybe<String[] | String>;
  contact2_lt?: Maybe<String>;
  contact2_lte?: Maybe<String>;
  contact2_gt?: Maybe<String>;
  contact2_gte?: Maybe<String>;
  contact2_contains?: Maybe<String>;
  contact2_not_contains?: Maybe<String>;
  contact2_starts_with?: Maybe<String>;
  contact2_not_starts_with?: Maybe<String>;
  contact2_ends_with?: Maybe<String>;
  contact2_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  socioEconomicStatus?: Maybe<String>;
  socioEconomicStatus_not?: Maybe<String>;
  socioEconomicStatus_in?: Maybe<String[] | String>;
  socioEconomicStatus_not_in?: Maybe<String[] | String>;
  socioEconomicStatus_lt?: Maybe<String>;
  socioEconomicStatus_lte?: Maybe<String>;
  socioEconomicStatus_gt?: Maybe<String>;
  socioEconomicStatus_gte?: Maybe<String>;
  socioEconomicStatus_contains?: Maybe<String>;
  socioEconomicStatus_not_contains?: Maybe<String>;
  socioEconomicStatus_starts_with?: Maybe<String>;
  socioEconomicStatus_not_starts_with?: Maybe<String>;
  socioEconomicStatus_ends_with?: Maybe<String>;
  socioEconomicStatus_not_ends_with?: Maybe<String>;
  immunizationStatus?: Maybe<String>;
  immunizationStatus_not?: Maybe<String>;
  immunizationStatus_in?: Maybe<String[] | String>;
  immunizationStatus_not_in?: Maybe<String[] | String>;
  immunizationStatus_lt?: Maybe<String>;
  immunizationStatus_lte?: Maybe<String>;
  immunizationStatus_gt?: Maybe<String>;
  immunizationStatus_gte?: Maybe<String>;
  immunizationStatus_contains?: Maybe<String>;
  immunizationStatus_not_contains?: Maybe<String>;
  immunizationStatus_starts_with?: Maybe<String>;
  immunizationStatus_not_starts_with?: Maybe<String>;
  immunizationStatus_ends_with?: Maybe<String>;
  immunizationStatus_not_ends_with?: Maybe<String>;
  allergyStatus?: Maybe<Boolean>;
  allergyStatus_not?: Maybe<Boolean>;
  organDonorStatus?: Maybe<Boolean>;
  organDonorStatus_not?: Maybe<Boolean>;
  PMH?: Maybe<String>;
  PMH_not?: Maybe<String>;
  PMH_in?: Maybe<String[] | String>;
  PMH_not_in?: Maybe<String[] | String>;
  PMH_lt?: Maybe<String>;
  PMH_lte?: Maybe<String>;
  PMH_gt?: Maybe<String>;
  PMH_gte?: Maybe<String>;
  PMH_contains?: Maybe<String>;
  PMH_not_contains?: Maybe<String>;
  PMH_starts_with?: Maybe<String>;
  PMH_not_starts_with?: Maybe<String>;
  PMH_ends_with?: Maybe<String>;
  PMH_not_ends_with?: Maybe<String>;
  DHx?: Maybe<String>;
  DHx_not?: Maybe<String>;
  DHx_in?: Maybe<String[] | String>;
  DHx_not_in?: Maybe<String[] | String>;
  DHx_lt?: Maybe<String>;
  DHx_lte?: Maybe<String>;
  DHx_gt?: Maybe<String>;
  DHx_gte?: Maybe<String>;
  DHx_contains?: Maybe<String>;
  DHx_not_contains?: Maybe<String>;
  DHx_starts_with?: Maybe<String>;
  DHx_not_starts_with?: Maybe<String>;
  DHx_ends_with?: Maybe<String>;
  DHx_not_ends_with?: Maybe<String>;
  Ca?: Maybe<String>;
  Ca_not?: Maybe<String>;
  Ca_in?: Maybe<String[] | String>;
  Ca_not_in?: Maybe<String[] | String>;
  Ca_lt?: Maybe<String>;
  Ca_lte?: Maybe<String>;
  Ca_gt?: Maybe<String>;
  Ca_gte?: Maybe<String>;
  Ca_contains?: Maybe<String>;
  Ca_not_contains?: Maybe<String>;
  Ca_starts_with?: Maybe<String>;
  Ca_not_starts_with?: Maybe<String>;
  Ca_ends_with?: Maybe<String>;
  Ca_not_ends_with?: Maybe<String>;
  IDDM?: Maybe<String>;
  IDDM_not?: Maybe<String>;
  IDDM_in?: Maybe<String[] | String>;
  IDDM_not_in?: Maybe<String[] | String>;
  IDDM_lt?: Maybe<String>;
  IDDM_lte?: Maybe<String>;
  IDDM_gt?: Maybe<String>;
  IDDM_gte?: Maybe<String>;
  IDDM_contains?: Maybe<String>;
  IDDM_not_contains?: Maybe<String>;
  IDDM_starts_with?: Maybe<String>;
  IDDM_not_starts_with?: Maybe<String>;
  IDDM_ends_with?: Maybe<String>;
  IDDM_not_ends_with?: Maybe<String>;
  NIDDM?: Maybe<String>;
  NIDDM_not?: Maybe<String>;
  NIDDM_in?: Maybe<String[] | String>;
  NIDDM_not_in?: Maybe<String[] | String>;
  NIDDM_lt?: Maybe<String>;
  NIDDM_lte?: Maybe<String>;
  NIDDM_gt?: Maybe<String>;
  NIDDM_gte?: Maybe<String>;
  NIDDM_contains?: Maybe<String>;
  NIDDM_not_contains?: Maybe<String>;
  NIDDM_starts_with?: Maybe<String>;
  NIDDM_not_starts_with?: Maybe<String>;
  NIDDM_ends_with?: Maybe<String>;
  NIDDM_not_ends_with?: Maybe<String>;
  MI?: Maybe<String>;
  MI_not?: Maybe<String>;
  MI_in?: Maybe<String[] | String>;
  MI_not_in?: Maybe<String[] | String>;
  MI_lt?: Maybe<String>;
  MI_lte?: Maybe<String>;
  MI_gt?: Maybe<String>;
  MI_gte?: Maybe<String>;
  MI_contains?: Maybe<String>;
  MI_not_contains?: Maybe<String>;
  MI_starts_with?: Maybe<String>;
  MI_not_starts_with?: Maybe<String>;
  MI_ends_with?: Maybe<String>;
  MI_not_ends_with?: Maybe<String>;
  AF?: Maybe<String>;
  AF_not?: Maybe<String>;
  AF_in?: Maybe<String[] | String>;
  AF_not_in?: Maybe<String[] | String>;
  AF_lt?: Maybe<String>;
  AF_lte?: Maybe<String>;
  AF_gt?: Maybe<String>;
  AF_gte?: Maybe<String>;
  AF_contains?: Maybe<String>;
  AF_not_contains?: Maybe<String>;
  AF_starts_with?: Maybe<String>;
  AF_not_starts_with?: Maybe<String>;
  AF_ends_with?: Maybe<String>;
  AF_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<DateTimeInput>;
  registeredAt_not?: Maybe<DateTimeInput>;
  registeredAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  registeredAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  registeredAt_lt?: Maybe<DateTimeInput>;
  registeredAt_lte?: Maybe<DateTimeInput>;
  registeredAt_gt?: Maybe<DateTimeInput>;
  registeredAt_gte?: Maybe<DateTimeInput>;
  careProvider?: Maybe<CareProviderWhereInput>;
  insurance?: Maybe<InsuranceWhereInput>;
  patientCase?: Maybe<PatientCaseWhereInput>;
  accessRequests_every?: Maybe<AccessRequestWhereInput>;
  accessRequests_some?: Maybe<AccessRequestWhereInput>;
  accessRequests_none?: Maybe<AccessRequestWhereInput>;
  AND?: Maybe<PatientWhereInput[] | PatientWhereInput>;
  OR?: Maybe<PatientWhereInput[] | PatientWhereInput>;
  NOT?: Maybe<PatientWhereInput[] | PatientWhereInput>;
}

export interface PatientCaseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  mp?: Maybe<MedicalPractitionerWhereInput>;
  icdCode?: Maybe<IcdCodesWhereInput>;
  icdSubCode?: Maybe<IcdSubCodesWhereInput>;
  hospital?: Maybe<HospitalWhereInput>;
  HPC?: Maybe<String>;
  HPC_not?: Maybe<String>;
  HPC_in?: Maybe<String[] | String>;
  HPC_not_in?: Maybe<String[] | String>;
  HPC_lt?: Maybe<String>;
  HPC_lte?: Maybe<String>;
  HPC_gt?: Maybe<String>;
  HPC_gte?: Maybe<String>;
  HPC_contains?: Maybe<String>;
  HPC_not_contains?: Maybe<String>;
  HPC_starts_with?: Maybe<String>;
  HPC_not_starts_with?: Maybe<String>;
  HPC_ends_with?: Maybe<String>;
  HPC_not_ends_with?: Maybe<String>;
  MoI?: Maybe<String>;
  MoI_not?: Maybe<String>;
  MoI_in?: Maybe<String[] | String>;
  MoI_not_in?: Maybe<String[] | String>;
  MoI_lt?: Maybe<String>;
  MoI_lte?: Maybe<String>;
  MoI_gt?: Maybe<String>;
  MoI_gte?: Maybe<String>;
  MoI_contains?: Maybe<String>;
  MoI_not_contains?: Maybe<String>;
  MoI_starts_with?: Maybe<String>;
  MoI_not_starts_with?: Maybe<String>;
  MoI_ends_with?: Maybe<String>;
  MoI_not_ends_with?: Maybe<String>;
  DnV?: Maybe<String>;
  DnV_not?: Maybe<String>;
  DnV_in?: Maybe<String[] | String>;
  DnV_not_in?: Maybe<String[] | String>;
  DnV_lt?: Maybe<String>;
  DnV_lte?: Maybe<String>;
  DnV_gt?: Maybe<String>;
  DnV_gte?: Maybe<String>;
  DnV_contains?: Maybe<String>;
  DnV_not_contains?: Maybe<String>;
  DnV_starts_with?: Maybe<String>;
  DnV_not_starts_with?: Maybe<String>;
  DnV_ends_with?: Maybe<String>;
  DnV_not_ends_with?: Maybe<String>;
  clinicNote?: Maybe<String>;
  clinicNote_not?: Maybe<String>;
  clinicNote_in?: Maybe<String[] | String>;
  clinicNote_not_in?: Maybe<String[] | String>;
  clinicNote_lt?: Maybe<String>;
  clinicNote_lte?: Maybe<String>;
  clinicNote_gt?: Maybe<String>;
  clinicNote_gte?: Maybe<String>;
  clinicNote_contains?: Maybe<String>;
  clinicNote_not_contains?: Maybe<String>;
  clinicNote_starts_with?: Maybe<String>;
  clinicNote_not_starts_with?: Maybe<String>;
  clinicNote_ends_with?: Maybe<String>;
  clinicNote_not_ends_with?: Maybe<String>;
  diagnosisType?: Maybe<String>;
  diagnosisType_not?: Maybe<String>;
  diagnosisType_in?: Maybe<String[] | String>;
  diagnosisType_not_in?: Maybe<String[] | String>;
  diagnosisType_lt?: Maybe<String>;
  diagnosisType_lte?: Maybe<String>;
  diagnosisType_gt?: Maybe<String>;
  diagnosisType_gte?: Maybe<String>;
  diagnosisType_contains?: Maybe<String>;
  diagnosisType_not_contains?: Maybe<String>;
  diagnosisType_starts_with?: Maybe<String>;
  diagnosisType_not_starts_with?: Maybe<String>;
  diagnosisType_ends_with?: Maybe<String>;
  diagnosisType_not_ends_with?: Maybe<String>;
  currentClinicalStatus?: Maybe<String>;
  currentClinicalStatus_not?: Maybe<String>;
  currentClinicalStatus_in?: Maybe<String[] | String>;
  currentClinicalStatus_not_in?: Maybe<String[] | String>;
  currentClinicalStatus_lt?: Maybe<String>;
  currentClinicalStatus_lte?: Maybe<String>;
  currentClinicalStatus_gt?: Maybe<String>;
  currentClinicalStatus_gte?: Maybe<String>;
  currentClinicalStatus_contains?: Maybe<String>;
  currentClinicalStatus_not_contains?: Maybe<String>;
  currentClinicalStatus_starts_with?: Maybe<String>;
  currentClinicalStatus_not_starts_with?: Maybe<String>;
  currentClinicalStatus_ends_with?: Maybe<String>;
  currentClinicalStatus_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  records_every?: Maybe<PatientRecordWhereInput>;
  records_some?: Maybe<PatientRecordWhereInput>;
  records_none?: Maybe<PatientRecordWhereInput>;
  AND?: Maybe<PatientCaseWhereInput[] | PatientCaseWhereInput>;
  OR?: Maybe<PatientCaseWhereInput[] | PatientCaseWhereInput>;
  NOT?: Maybe<PatientCaseWhereInput[] | PatientCaseWhereInput>;
}

export interface MedicalPractitionerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  mpId?: Maybe<Int>;
  mpId_not?: Maybe<Int>;
  mpId_in?: Maybe<Int[] | Int>;
  mpId_not_in?: Maybe<Int[] | Int>;
  mpId_lt?: Maybe<Int>;
  mpId_lte?: Maybe<Int>;
  mpId_gt?: Maybe<Int>;
  mpId_gte?: Maybe<Int>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  middleName?: Maybe<String>;
  middleName_not?: Maybe<String>;
  middleName_in?: Maybe<String[] | String>;
  middleName_not_in?: Maybe<String[] | String>;
  middleName_lt?: Maybe<String>;
  middleName_lte?: Maybe<String>;
  middleName_gt?: Maybe<String>;
  middleName_gte?: Maybe<String>;
  middleName_contains?: Maybe<String>;
  middleName_not_contains?: Maybe<String>;
  middleName_starts_with?: Maybe<String>;
  middleName_not_starts_with?: Maybe<String>;
  middleName_ends_with?: Maybe<String>;
  middleName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  dob_not?: Maybe<DateTimeInput>;
  dob_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_lt?: Maybe<DateTimeInput>;
  dob_lte?: Maybe<DateTimeInput>;
  dob_gt?: Maybe<DateTimeInput>;
  dob_gte?: Maybe<DateTimeInput>;
  sex?: Maybe<String>;
  sex_not?: Maybe<String>;
  sex_in?: Maybe<String[] | String>;
  sex_not_in?: Maybe<String[] | String>;
  sex_lt?: Maybe<String>;
  sex_lte?: Maybe<String>;
  sex_gt?: Maybe<String>;
  sex_gte?: Maybe<String>;
  sex_contains?: Maybe<String>;
  sex_not_contains?: Maybe<String>;
  sex_starts_with?: Maybe<String>;
  sex_not_starts_with?: Maybe<String>;
  sex_ends_with?: Maybe<String>;
  sex_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  degree?: Maybe<String>;
  degree_not?: Maybe<String>;
  degree_in?: Maybe<String[] | String>;
  degree_not_in?: Maybe<String[] | String>;
  degree_lt?: Maybe<String>;
  degree_lte?: Maybe<String>;
  degree_gt?: Maybe<String>;
  degree_gte?: Maybe<String>;
  degree_contains?: Maybe<String>;
  degree_not_contains?: Maybe<String>;
  degree_starts_with?: Maybe<String>;
  degree_not_starts_with?: Maybe<String>;
  degree_ends_with?: Maybe<String>;
  degree_not_ends_with?: Maybe<String>;
  field?: Maybe<String>;
  field_not?: Maybe<String>;
  field_in?: Maybe<String[] | String>;
  field_not_in?: Maybe<String[] | String>;
  field_lt?: Maybe<String>;
  field_lte?: Maybe<String>;
  field_gt?: Maybe<String>;
  field_gte?: Maybe<String>;
  field_contains?: Maybe<String>;
  field_not_contains?: Maybe<String>;
  field_starts_with?: Maybe<String>;
  field_not_starts_with?: Maybe<String>;
  field_ends_with?: Maybe<String>;
  field_not_ends_with?: Maybe<String>;
  hospital?: Maybe<HospitalWhereInput>;
  registeredAt?: Maybe<DateTimeInput>;
  registeredAt_not?: Maybe<DateTimeInput>;
  registeredAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  registeredAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  registeredAt_lt?: Maybe<DateTimeInput>;
  registeredAt_lte?: Maybe<DateTimeInput>;
  registeredAt_gt?: Maybe<DateTimeInput>;
  registeredAt_gte?: Maybe<DateTimeInput>;
  accessiblePatients_every?: Maybe<PatientWhereInput>;
  accessiblePatients_some?: Maybe<PatientWhereInput>;
  accessiblePatients_none?: Maybe<PatientWhereInput>;
  AND?: Maybe<MedicalPractitionerWhereInput[] | MedicalPractitionerWhereInput>;
  OR?: Maybe<MedicalPractitionerWhereInput[] | MedicalPractitionerWhereInput>;
  NOT?: Maybe<MedicalPractitionerWhereInput[] | MedicalPractitionerWhereInput>;
}

export interface PatientRecordWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  visitNo?: Maybe<Int>;
  visitNo_not?: Maybe<Int>;
  visitNo_in?: Maybe<Int[] | Int>;
  visitNo_not_in?: Maybe<Int[] | Int>;
  visitNo_lt?: Maybe<Int>;
  visitNo_lte?: Maybe<Int>;
  visitNo_gt?: Maybe<Int>;
  visitNo_gte?: Maybe<Int>;
  mp?: Maybe<MedicalPractitionerWhereInput>;
  hospital?: Maybe<HospitalWhereInput>;
  encounterDate?: Maybe<DateTimeInput>;
  encounterDate_not?: Maybe<DateTimeInput>;
  encounterDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  encounterDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  encounterDate_lt?: Maybe<DateTimeInput>;
  encounterDate_lte?: Maybe<DateTimeInput>;
  encounterDate_gt?: Maybe<DateTimeInput>;
  encounterDate_gte?: Maybe<DateTimeInput>;
  observation?: Maybe<String>;
  observation_not?: Maybe<String>;
  observation_in?: Maybe<String[] | String>;
  observation_not_in?: Maybe<String[] | String>;
  observation_lt?: Maybe<String>;
  observation_lte?: Maybe<String>;
  observation_gt?: Maybe<String>;
  observation_gte?: Maybe<String>;
  observation_contains?: Maybe<String>;
  observation_not_contains?: Maybe<String>;
  observation_starts_with?: Maybe<String>;
  observation_not_starts_with?: Maybe<String>;
  observation_ends_with?: Maybe<String>;
  observation_not_ends_with?: Maybe<String>;
  Tx?: Maybe<String>;
  Tx_not?: Maybe<String>;
  Tx_in?: Maybe<String[] | String>;
  Tx_not_in?: Maybe<String[] | String>;
  Tx_lt?: Maybe<String>;
  Tx_lte?: Maybe<String>;
  Tx_gt?: Maybe<String>;
  Tx_gte?: Maybe<String>;
  Tx_contains?: Maybe<String>;
  Tx_not_contains?: Maybe<String>;
  Tx_starts_with?: Maybe<String>;
  Tx_not_starts_with?: Maybe<String>;
  Tx_ends_with?: Maybe<String>;
  Tx_not_ends_with?: Maybe<String>;
  suggesstions?: Maybe<String>;
  suggesstions_not?: Maybe<String>;
  suggesstions_in?: Maybe<String[] | String>;
  suggesstions_not_in?: Maybe<String[] | String>;
  suggesstions_lt?: Maybe<String>;
  suggesstions_lte?: Maybe<String>;
  suggesstions_gt?: Maybe<String>;
  suggesstions_gte?: Maybe<String>;
  suggesstions_contains?: Maybe<String>;
  suggesstions_not_contains?: Maybe<String>;
  suggesstions_starts_with?: Maybe<String>;
  suggesstions_not_starts_with?: Maybe<String>;
  suggesstions_ends_with?: Maybe<String>;
  suggesstions_not_ends_with?: Maybe<String>;
  cevsSp?: Maybe<Int>;
  cevsSp_not?: Maybe<Int>;
  cevsSp_in?: Maybe<Int[] | Int>;
  cevsSp_not_in?: Maybe<Int[] | Int>;
  cevsSp_lt?: Maybe<Int>;
  cevsSp_lte?: Maybe<Int>;
  cevsSp_gt?: Maybe<Int>;
  cevsSp_gte?: Maybe<Int>;
  cevsDp?: Maybe<Int>;
  cevsDp_not?: Maybe<Int>;
  cevsDp_in?: Maybe<Int[] | Int>;
  cevsDp_not_in?: Maybe<Int[] | Int>;
  cevsDp_lt?: Maybe<Int>;
  cevsDp_lte?: Maybe<Int>;
  cevsDp_gt?: Maybe<Int>;
  cevsDp_gte?: Maybe<Int>;
  cePr?: Maybe<Int>;
  cePr_not?: Maybe<Int>;
  cePr_in?: Maybe<Int[] | Int>;
  cePr_not_in?: Maybe<Int[] | Int>;
  cePr_lt?: Maybe<Int>;
  cePr_lte?: Maybe<Int>;
  cePr_gt?: Maybe<Int>;
  cePr_gte?: Maybe<Int>;
  ceRr?: Maybe<Int>;
  ceRr_not?: Maybe<Int>;
  ceRr_in?: Maybe<Int[] | Int>;
  ceRr_not_in?: Maybe<Int[] | Int>;
  ceRr_lt?: Maybe<Int>;
  ceRr_lte?: Maybe<Int>;
  ceRr_gt?: Maybe<Int>;
  ceRr_gte?: Maybe<Int>;
  ceHeight?: Maybe<Int>;
  ceHeight_not?: Maybe<Int>;
  ceHeight_in?: Maybe<Int[] | Int>;
  ceHeight_not_in?: Maybe<Int[] | Int>;
  ceHeight_lt?: Maybe<Int>;
  ceHeight_lte?: Maybe<Int>;
  ceHeight_gt?: Maybe<Int>;
  ceHeight_gte?: Maybe<Int>;
  ceWeight?: Maybe<Int>;
  ceWeight_not?: Maybe<Int>;
  ceWeight_in?: Maybe<Int[] | Int>;
  ceWeight_not_in?: Maybe<Int[] | Int>;
  ceWeight_lt?: Maybe<Int>;
  ceWeight_lte?: Maybe<Int>;
  ceWeight_gt?: Maybe<Int>;
  ceWeight_gte?: Maybe<Int>;
  medication?: Maybe<String>;
  medication_not?: Maybe<String>;
  medication_in?: Maybe<String[] | String>;
  medication_not_in?: Maybe<String[] | String>;
  medication_lt?: Maybe<String>;
  medication_lte?: Maybe<String>;
  medication_gt?: Maybe<String>;
  medication_gte?: Maybe<String>;
  medication_contains?: Maybe<String>;
  medication_not_contains?: Maybe<String>;
  medication_starts_with?: Maybe<String>;
  medication_not_starts_with?: Maybe<String>;
  medication_ends_with?: Maybe<String>;
  medication_not_ends_with?: Maybe<String>;
  advice?: Maybe<String>;
  advice_not?: Maybe<String>;
  advice_in?: Maybe<String[] | String>;
  advice_not_in?: Maybe<String[] | String>;
  advice_lt?: Maybe<String>;
  advice_lte?: Maybe<String>;
  advice_gt?: Maybe<String>;
  advice_gte?: Maybe<String>;
  advice_contains?: Maybe<String>;
  advice_not_contains?: Maybe<String>;
  advice_starts_with?: Maybe<String>;
  advice_not_starts_with?: Maybe<String>;
  advice_ends_with?: Maybe<String>;
  advice_not_ends_with?: Maybe<String>;
  query?: Maybe<String>;
  query_not?: Maybe<String>;
  query_in?: Maybe<String[] | String>;
  query_not_in?: Maybe<String[] | String>;
  query_lt?: Maybe<String>;
  query_lte?: Maybe<String>;
  query_gt?: Maybe<String>;
  query_gte?: Maybe<String>;
  query_contains?: Maybe<String>;
  query_not_contains?: Maybe<String>;
  query_starts_with?: Maybe<String>;
  query_not_starts_with?: Maybe<String>;
  query_ends_with?: Maybe<String>;
  query_not_ends_with?: Maybe<String>;
  followUpObservation?: Maybe<String>;
  followUpObservation_not?: Maybe<String>;
  followUpObservation_in?: Maybe<String[] | String>;
  followUpObservation_not_in?: Maybe<String[] | String>;
  followUpObservation_lt?: Maybe<String>;
  followUpObservation_lte?: Maybe<String>;
  followUpObservation_gt?: Maybe<String>;
  followUpObservation_gte?: Maybe<String>;
  followUpObservation_contains?: Maybe<String>;
  followUpObservation_not_contains?: Maybe<String>;
  followUpObservation_starts_with?: Maybe<String>;
  followUpObservation_not_starts_with?: Maybe<String>;
  followUpObservation_ends_with?: Maybe<String>;
  followUpObservation_not_ends_with?: Maybe<String>;
  AND?: Maybe<PatientRecordWhereInput[] | PatientRecordWhereInput>;
  OR?: Maybe<PatientRecordWhereInput[] | PatientRecordWhereInput>;
  NOT?: Maybe<PatientRecordWhereInput[] | PatientRecordWhereInput>;
}

export type PatientWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type PatientCaseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PatientRecordWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AccessRequestCreateInput {
  id?: Maybe<ID_Input>;
  medicalPractitionerFirstName: String;
  medicalPractitionerLastName: String;
  medicalPractitionerId: String;
}

export interface AccessRequestUpdateInput {
  medicalPractitionerFirstName?: Maybe<String>;
  medicalPractitionerLastName?: Maybe<String>;
  medicalPractitionerId?: Maybe<String>;
}

export interface AccessRequestUpdateManyMutationInput {
  medicalPractitionerFirstName?: Maybe<String>;
  medicalPractitionerLastName?: Maybe<String>;
  medicalPractitionerId?: Maybe<String>;
}

export interface AdminCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
}

export interface AdminUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface AdminUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface CareProviderCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  middleName: String;
  address: String;
  cityId: Int;
  stateId: Int;
  pinCode: Int;
  countryCode: Int;
  contact1: String;
  email: String;
}

export interface CareProviderUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  middleName?: Maybe<String>;
  address?: Maybe<String>;
  cityId?: Maybe<Int>;
  stateId?: Maybe<Int>;
  pinCode?: Maybe<Int>;
  countryCode?: Maybe<Int>;
  contact1?: Maybe<String>;
  email?: Maybe<String>;
}

export interface CareProviderUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  middleName?: Maybe<String>;
  address?: Maybe<String>;
  cityId?: Maybe<Int>;
  stateId?: Maybe<Int>;
  pinCode?: Maybe<Int>;
  countryCode?: Maybe<Int>;
  contact1?: Maybe<String>;
  email?: Maybe<String>;
}

export interface HospitalCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  address: String;
  city: String;
  district: String;
  pincode: Int;
  countryCode: Int;
}

export interface HospitalUpdateInput {
  name?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  district?: Maybe<String>;
  pincode?: Maybe<Int>;
  countryCode?: Maybe<Int>;
}

export interface HospitalUpdateManyMutationInput {
  name?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  district?: Maybe<String>;
  pincode?: Maybe<Int>;
  countryCode?: Maybe<Int>;
}

export interface IcdCodesCreateInput {
  id?: Maybe<ID_Input>;
  icdCode: String;
  commonName: String;
}

export interface IcdCodesUpdateInput {
  icdCode?: Maybe<String>;
  commonName?: Maybe<String>;
}

export interface IcdCodesUpdateManyMutationInput {
  icdCode?: Maybe<String>;
  commonName?: Maybe<String>;
}

export interface IcdSubCodesCreateInput {
  id?: Maybe<ID_Input>;
  icdSubCode: String;
  scientificName: String;
  icdCode: IcdCodesCreateOneInput;
}

export interface IcdCodesCreateOneInput {
  create?: Maybe<IcdCodesCreateInput>;
  connect?: Maybe<IcdCodesWhereUniqueInput>;
}

export interface IcdSubCodesUpdateInput {
  icdSubCode?: Maybe<String>;
  scientificName?: Maybe<String>;
  icdCode?: Maybe<IcdCodesUpdateOneRequiredInput>;
}

export interface IcdCodesUpdateOneRequiredInput {
  create?: Maybe<IcdCodesCreateInput>;
  update?: Maybe<IcdCodesUpdateDataInput>;
  upsert?: Maybe<IcdCodesUpsertNestedInput>;
  connect?: Maybe<IcdCodesWhereUniqueInput>;
}

export interface IcdCodesUpdateDataInput {
  icdCode?: Maybe<String>;
  commonName?: Maybe<String>;
}

export interface IcdCodesUpsertNestedInput {
  update: IcdCodesUpdateDataInput;
  create: IcdCodesCreateInput;
}

export interface IcdSubCodesUpdateManyMutationInput {
  icdSubCode?: Maybe<String>;
  scientificName?: Maybe<String>;
}

export interface InsuranceCreateInput {
  id?: Maybe<ID_Input>;
  status: Boolean;
  companyName: String;
}

export interface InsuranceUpdateInput {
  status?: Maybe<Boolean>;
  companyName?: Maybe<String>;
}

export interface InsuranceUpdateManyMutationInput {
  status?: Maybe<Boolean>;
  companyName?: Maybe<String>;
}

export interface MedicalPractitionerCreateInput {
  id?: Maybe<ID_Input>;
  mpId: Int;
  lastName: String;
  firstName: String;
  middleName: String;
  email: String;
  password: String;
  dob: DateTimeInput;
  sex: String;
  address: String;
  degree: String;
  field: String;
  hospital: HospitalCreateOneInput;
  accessiblePatients?: Maybe<PatientCreateManyInput>;
}

export interface HospitalCreateOneInput {
  create?: Maybe<HospitalCreateInput>;
  connect?: Maybe<HospitalWhereUniqueInput>;
}

export interface PatientCreateManyInput {
  create?: Maybe<PatientCreateInput[] | PatientCreateInput>;
  connect?: Maybe<PatientWhereUniqueInput[] | PatientWhereUniqueInput>;
}

export interface PatientCreateInput {
  id?: Maybe<ID_Input>;
  lastName: String;
  firstName: String;
  middleName: String;
  motherName: String;
  dob: DateTimeInput;
  bloodGroup: String;
  sex: String;
  religion: String;
  maritalStatus: String;
  primaryLanguage: String;
  birthPlace: String;
  address: String;
  countryCode: Int;
  occupation: String;
  contact1: String;
  contact2: String;
  email: String;
  password: String;
  socioEconomicStatus: String;
  immunizationStatus: String;
  allergyStatus: Boolean;
  organDonorStatus: Boolean;
  PMH: String;
  DHx: String;
  Ca: String;
  IDDM: String;
  NIDDM: String;
  MI: String;
  AF: String;
  careProvider?: Maybe<CareProviderCreateOneInput>;
  insurance?: Maybe<InsuranceCreateOneInput>;
  patientCase?: Maybe<PatientCaseCreateOneInput>;
  accessRequests?: Maybe<AccessRequestCreateManyInput>;
}

export interface CareProviderCreateOneInput {
  create?: Maybe<CareProviderCreateInput>;
  connect?: Maybe<CareProviderWhereUniqueInput>;
}

export interface InsuranceCreateOneInput {
  create?: Maybe<InsuranceCreateInput>;
  connect?: Maybe<InsuranceWhereUniqueInput>;
}

export interface PatientCaseCreateOneInput {
  create?: Maybe<PatientCaseCreateInput>;
  connect?: Maybe<PatientCaseWhereUniqueInput>;
}

export interface PatientCaseCreateInput {
  id?: Maybe<ID_Input>;
  mp: MedicalPractitionerCreateOneInput;
  icdCode: IcdCodesCreateOneInput;
  icdSubCode: IcdSubCodesCreateOneInput;
  hospital: HospitalCreateOneInput;
  HPC: String;
  MoI?: Maybe<String>;
  DnV?: Maybe<String>;
  clinicNote: String;
  diagnosisType: String;
  currentClinicalStatus: String;
  records?: Maybe<PatientRecordCreateManyInput>;
}

export interface MedicalPractitionerCreateOneInput {
  create?: Maybe<MedicalPractitionerCreateInput>;
  connect?: Maybe<MedicalPractitionerWhereUniqueInput>;
}

export interface IcdSubCodesCreateOneInput {
  create?: Maybe<IcdSubCodesCreateInput>;
  connect?: Maybe<IcdSubCodesWhereUniqueInput>;
}

export interface PatientRecordCreateManyInput {
  create?: Maybe<PatientRecordCreateInput[] | PatientRecordCreateInput>;
  connect?: Maybe<
    PatientRecordWhereUniqueInput[] | PatientRecordWhereUniqueInput
  >;
}

export interface PatientRecordCreateInput {
  id?: Maybe<ID_Input>;
  visitNo: Int;
  mp: MedicalPractitionerCreateOneInput;
  hospital: HospitalCreateOneInput;
  observation: String;
  Tx: String;
  suggesstions?: Maybe<String>;
  cevsSp: Int;
  cevsDp: Int;
  cePr: Int;
  ceRr: Int;
  ceHeight: Int;
  ceWeight: Int;
  medication: String;
  advice?: Maybe<String>;
  query?: Maybe<String>;
  followUpObservation?: Maybe<String>;
}

export interface AccessRequestCreateManyInput {
  create?: Maybe<AccessRequestCreateInput[] | AccessRequestCreateInput>;
  connect?: Maybe<
    AccessRequestWhereUniqueInput[] | AccessRequestWhereUniqueInput
  >;
}

export interface MedicalPractitionerUpdateInput {
  mpId?: Maybe<Int>;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  sex?: Maybe<String>;
  address?: Maybe<String>;
  degree?: Maybe<String>;
  field?: Maybe<String>;
  hospital?: Maybe<HospitalUpdateOneRequiredInput>;
  accessiblePatients?: Maybe<PatientUpdateManyInput>;
}

export interface HospitalUpdateOneRequiredInput {
  create?: Maybe<HospitalCreateInput>;
  update?: Maybe<HospitalUpdateDataInput>;
  upsert?: Maybe<HospitalUpsertNestedInput>;
  connect?: Maybe<HospitalWhereUniqueInput>;
}

export interface HospitalUpdateDataInput {
  name?: Maybe<String>;
  address?: Maybe<String>;
  city?: Maybe<String>;
  district?: Maybe<String>;
  pincode?: Maybe<Int>;
  countryCode?: Maybe<Int>;
}

export interface HospitalUpsertNestedInput {
  update: HospitalUpdateDataInput;
  create: HospitalCreateInput;
}

export interface PatientUpdateManyInput {
  create?: Maybe<PatientCreateInput[] | PatientCreateInput>;
  update?: Maybe<
    | PatientUpdateWithWhereUniqueNestedInput[]
    | PatientUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PatientUpsertWithWhereUniqueNestedInput[]
    | PatientUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<PatientWhereUniqueInput[] | PatientWhereUniqueInput>;
  connect?: Maybe<PatientWhereUniqueInput[] | PatientWhereUniqueInput>;
  set?: Maybe<PatientWhereUniqueInput[] | PatientWhereUniqueInput>;
  disconnect?: Maybe<PatientWhereUniqueInput[] | PatientWhereUniqueInput>;
  deleteMany?: Maybe<PatientScalarWhereInput[] | PatientScalarWhereInput>;
  updateMany?: Maybe<
    | PatientUpdateManyWithWhereNestedInput[]
    | PatientUpdateManyWithWhereNestedInput
  >;
}

export interface PatientUpdateWithWhereUniqueNestedInput {
  where: PatientWhereUniqueInput;
  data: PatientUpdateDataInput;
}

export interface PatientUpdateDataInput {
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  motherName?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  bloodGroup?: Maybe<String>;
  sex?: Maybe<String>;
  religion?: Maybe<String>;
  maritalStatus?: Maybe<String>;
  primaryLanguage?: Maybe<String>;
  birthPlace?: Maybe<String>;
  address?: Maybe<String>;
  countryCode?: Maybe<Int>;
  occupation?: Maybe<String>;
  contact1?: Maybe<String>;
  contact2?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  socioEconomicStatus?: Maybe<String>;
  immunizationStatus?: Maybe<String>;
  allergyStatus?: Maybe<Boolean>;
  organDonorStatus?: Maybe<Boolean>;
  PMH?: Maybe<String>;
  DHx?: Maybe<String>;
  Ca?: Maybe<String>;
  IDDM?: Maybe<String>;
  NIDDM?: Maybe<String>;
  MI?: Maybe<String>;
  AF?: Maybe<String>;
  careProvider?: Maybe<CareProviderUpdateOneInput>;
  insurance?: Maybe<InsuranceUpdateOneInput>;
  patientCase?: Maybe<PatientCaseUpdateOneInput>;
  accessRequests?: Maybe<AccessRequestUpdateManyInput>;
}

export interface CareProviderUpdateOneInput {
  create?: Maybe<CareProviderCreateInput>;
  update?: Maybe<CareProviderUpdateDataInput>;
  upsert?: Maybe<CareProviderUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CareProviderWhereUniqueInput>;
}

export interface CareProviderUpdateDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  middleName?: Maybe<String>;
  address?: Maybe<String>;
  cityId?: Maybe<Int>;
  stateId?: Maybe<Int>;
  pinCode?: Maybe<Int>;
  countryCode?: Maybe<Int>;
  contact1?: Maybe<String>;
  email?: Maybe<String>;
}

export interface CareProviderUpsertNestedInput {
  update: CareProviderUpdateDataInput;
  create: CareProviderCreateInput;
}

export interface InsuranceUpdateOneInput {
  create?: Maybe<InsuranceCreateInput>;
  update?: Maybe<InsuranceUpdateDataInput>;
  upsert?: Maybe<InsuranceUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<InsuranceWhereUniqueInput>;
}

export interface InsuranceUpdateDataInput {
  status?: Maybe<Boolean>;
  companyName?: Maybe<String>;
}

export interface InsuranceUpsertNestedInput {
  update: InsuranceUpdateDataInput;
  create: InsuranceCreateInput;
}

export interface PatientCaseUpdateOneInput {
  create?: Maybe<PatientCaseCreateInput>;
  update?: Maybe<PatientCaseUpdateDataInput>;
  upsert?: Maybe<PatientCaseUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PatientCaseWhereUniqueInput>;
}

export interface PatientCaseUpdateDataInput {
  mp?: Maybe<MedicalPractitionerUpdateOneRequiredInput>;
  icdCode?: Maybe<IcdCodesUpdateOneRequiredInput>;
  icdSubCode?: Maybe<IcdSubCodesUpdateOneRequiredInput>;
  hospital?: Maybe<HospitalUpdateOneRequiredInput>;
  HPC?: Maybe<String>;
  MoI?: Maybe<String>;
  DnV?: Maybe<String>;
  clinicNote?: Maybe<String>;
  diagnosisType?: Maybe<String>;
  currentClinicalStatus?: Maybe<String>;
  records?: Maybe<PatientRecordUpdateManyInput>;
}

export interface MedicalPractitionerUpdateOneRequiredInput {
  create?: Maybe<MedicalPractitionerCreateInput>;
  update?: Maybe<MedicalPractitionerUpdateDataInput>;
  upsert?: Maybe<MedicalPractitionerUpsertNestedInput>;
  connect?: Maybe<MedicalPractitionerWhereUniqueInput>;
}

export interface MedicalPractitionerUpdateDataInput {
  mpId?: Maybe<Int>;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  sex?: Maybe<String>;
  address?: Maybe<String>;
  degree?: Maybe<String>;
  field?: Maybe<String>;
  hospital?: Maybe<HospitalUpdateOneRequiredInput>;
  accessiblePatients?: Maybe<PatientUpdateManyInput>;
}

export interface MedicalPractitionerUpsertNestedInput {
  update: MedicalPractitionerUpdateDataInput;
  create: MedicalPractitionerCreateInput;
}

export interface IcdSubCodesUpdateOneRequiredInput {
  create?: Maybe<IcdSubCodesCreateInput>;
  update?: Maybe<IcdSubCodesUpdateDataInput>;
  upsert?: Maybe<IcdSubCodesUpsertNestedInput>;
  connect?: Maybe<IcdSubCodesWhereUniqueInput>;
}

export interface IcdSubCodesUpdateDataInput {
  icdSubCode?: Maybe<String>;
  scientificName?: Maybe<String>;
  icdCode?: Maybe<IcdCodesUpdateOneRequiredInput>;
}

export interface IcdSubCodesUpsertNestedInput {
  update: IcdSubCodesUpdateDataInput;
  create: IcdSubCodesCreateInput;
}

export interface PatientRecordUpdateManyInput {
  create?: Maybe<PatientRecordCreateInput[] | PatientRecordCreateInput>;
  update?: Maybe<
    | PatientRecordUpdateWithWhereUniqueNestedInput[]
    | PatientRecordUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PatientRecordUpsertWithWhereUniqueNestedInput[]
    | PatientRecordUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    PatientRecordWhereUniqueInput[] | PatientRecordWhereUniqueInput
  >;
  connect?: Maybe<
    PatientRecordWhereUniqueInput[] | PatientRecordWhereUniqueInput
  >;
  set?: Maybe<PatientRecordWhereUniqueInput[] | PatientRecordWhereUniqueInput>;
  disconnect?: Maybe<
    PatientRecordWhereUniqueInput[] | PatientRecordWhereUniqueInput
  >;
  deleteMany?: Maybe<
    PatientRecordScalarWhereInput[] | PatientRecordScalarWhereInput
  >;
  updateMany?: Maybe<
    | PatientRecordUpdateManyWithWhereNestedInput[]
    | PatientRecordUpdateManyWithWhereNestedInput
  >;
}

export interface PatientRecordUpdateWithWhereUniqueNestedInput {
  where: PatientRecordWhereUniqueInput;
  data: PatientRecordUpdateDataInput;
}

export interface PatientRecordUpdateDataInput {
  visitNo?: Maybe<Int>;
  mp?: Maybe<MedicalPractitionerUpdateOneRequiredInput>;
  hospital?: Maybe<HospitalUpdateOneRequiredInput>;
  observation?: Maybe<String>;
  Tx?: Maybe<String>;
  suggesstions?: Maybe<String>;
  cevsSp?: Maybe<Int>;
  cevsDp?: Maybe<Int>;
  cePr?: Maybe<Int>;
  ceRr?: Maybe<Int>;
  ceHeight?: Maybe<Int>;
  ceWeight?: Maybe<Int>;
  medication?: Maybe<String>;
  advice?: Maybe<String>;
  query?: Maybe<String>;
  followUpObservation?: Maybe<String>;
}

export interface PatientRecordUpsertWithWhereUniqueNestedInput {
  where: PatientRecordWhereUniqueInput;
  update: PatientRecordUpdateDataInput;
  create: PatientRecordCreateInput;
}

export interface PatientRecordScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  visitNo?: Maybe<Int>;
  visitNo_not?: Maybe<Int>;
  visitNo_in?: Maybe<Int[] | Int>;
  visitNo_not_in?: Maybe<Int[] | Int>;
  visitNo_lt?: Maybe<Int>;
  visitNo_lte?: Maybe<Int>;
  visitNo_gt?: Maybe<Int>;
  visitNo_gte?: Maybe<Int>;
  encounterDate?: Maybe<DateTimeInput>;
  encounterDate_not?: Maybe<DateTimeInput>;
  encounterDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  encounterDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  encounterDate_lt?: Maybe<DateTimeInput>;
  encounterDate_lte?: Maybe<DateTimeInput>;
  encounterDate_gt?: Maybe<DateTimeInput>;
  encounterDate_gte?: Maybe<DateTimeInput>;
  observation?: Maybe<String>;
  observation_not?: Maybe<String>;
  observation_in?: Maybe<String[] | String>;
  observation_not_in?: Maybe<String[] | String>;
  observation_lt?: Maybe<String>;
  observation_lte?: Maybe<String>;
  observation_gt?: Maybe<String>;
  observation_gte?: Maybe<String>;
  observation_contains?: Maybe<String>;
  observation_not_contains?: Maybe<String>;
  observation_starts_with?: Maybe<String>;
  observation_not_starts_with?: Maybe<String>;
  observation_ends_with?: Maybe<String>;
  observation_not_ends_with?: Maybe<String>;
  Tx?: Maybe<String>;
  Tx_not?: Maybe<String>;
  Tx_in?: Maybe<String[] | String>;
  Tx_not_in?: Maybe<String[] | String>;
  Tx_lt?: Maybe<String>;
  Tx_lte?: Maybe<String>;
  Tx_gt?: Maybe<String>;
  Tx_gte?: Maybe<String>;
  Tx_contains?: Maybe<String>;
  Tx_not_contains?: Maybe<String>;
  Tx_starts_with?: Maybe<String>;
  Tx_not_starts_with?: Maybe<String>;
  Tx_ends_with?: Maybe<String>;
  Tx_not_ends_with?: Maybe<String>;
  suggesstions?: Maybe<String>;
  suggesstions_not?: Maybe<String>;
  suggesstions_in?: Maybe<String[] | String>;
  suggesstions_not_in?: Maybe<String[] | String>;
  suggesstions_lt?: Maybe<String>;
  suggesstions_lte?: Maybe<String>;
  suggesstions_gt?: Maybe<String>;
  suggesstions_gte?: Maybe<String>;
  suggesstions_contains?: Maybe<String>;
  suggesstions_not_contains?: Maybe<String>;
  suggesstions_starts_with?: Maybe<String>;
  suggesstions_not_starts_with?: Maybe<String>;
  suggesstions_ends_with?: Maybe<String>;
  suggesstions_not_ends_with?: Maybe<String>;
  cevsSp?: Maybe<Int>;
  cevsSp_not?: Maybe<Int>;
  cevsSp_in?: Maybe<Int[] | Int>;
  cevsSp_not_in?: Maybe<Int[] | Int>;
  cevsSp_lt?: Maybe<Int>;
  cevsSp_lte?: Maybe<Int>;
  cevsSp_gt?: Maybe<Int>;
  cevsSp_gte?: Maybe<Int>;
  cevsDp?: Maybe<Int>;
  cevsDp_not?: Maybe<Int>;
  cevsDp_in?: Maybe<Int[] | Int>;
  cevsDp_not_in?: Maybe<Int[] | Int>;
  cevsDp_lt?: Maybe<Int>;
  cevsDp_lte?: Maybe<Int>;
  cevsDp_gt?: Maybe<Int>;
  cevsDp_gte?: Maybe<Int>;
  cePr?: Maybe<Int>;
  cePr_not?: Maybe<Int>;
  cePr_in?: Maybe<Int[] | Int>;
  cePr_not_in?: Maybe<Int[] | Int>;
  cePr_lt?: Maybe<Int>;
  cePr_lte?: Maybe<Int>;
  cePr_gt?: Maybe<Int>;
  cePr_gte?: Maybe<Int>;
  ceRr?: Maybe<Int>;
  ceRr_not?: Maybe<Int>;
  ceRr_in?: Maybe<Int[] | Int>;
  ceRr_not_in?: Maybe<Int[] | Int>;
  ceRr_lt?: Maybe<Int>;
  ceRr_lte?: Maybe<Int>;
  ceRr_gt?: Maybe<Int>;
  ceRr_gte?: Maybe<Int>;
  ceHeight?: Maybe<Int>;
  ceHeight_not?: Maybe<Int>;
  ceHeight_in?: Maybe<Int[] | Int>;
  ceHeight_not_in?: Maybe<Int[] | Int>;
  ceHeight_lt?: Maybe<Int>;
  ceHeight_lte?: Maybe<Int>;
  ceHeight_gt?: Maybe<Int>;
  ceHeight_gte?: Maybe<Int>;
  ceWeight?: Maybe<Int>;
  ceWeight_not?: Maybe<Int>;
  ceWeight_in?: Maybe<Int[] | Int>;
  ceWeight_not_in?: Maybe<Int[] | Int>;
  ceWeight_lt?: Maybe<Int>;
  ceWeight_lte?: Maybe<Int>;
  ceWeight_gt?: Maybe<Int>;
  ceWeight_gte?: Maybe<Int>;
  medication?: Maybe<String>;
  medication_not?: Maybe<String>;
  medication_in?: Maybe<String[] | String>;
  medication_not_in?: Maybe<String[] | String>;
  medication_lt?: Maybe<String>;
  medication_lte?: Maybe<String>;
  medication_gt?: Maybe<String>;
  medication_gte?: Maybe<String>;
  medication_contains?: Maybe<String>;
  medication_not_contains?: Maybe<String>;
  medication_starts_with?: Maybe<String>;
  medication_not_starts_with?: Maybe<String>;
  medication_ends_with?: Maybe<String>;
  medication_not_ends_with?: Maybe<String>;
  advice?: Maybe<String>;
  advice_not?: Maybe<String>;
  advice_in?: Maybe<String[] | String>;
  advice_not_in?: Maybe<String[] | String>;
  advice_lt?: Maybe<String>;
  advice_lte?: Maybe<String>;
  advice_gt?: Maybe<String>;
  advice_gte?: Maybe<String>;
  advice_contains?: Maybe<String>;
  advice_not_contains?: Maybe<String>;
  advice_starts_with?: Maybe<String>;
  advice_not_starts_with?: Maybe<String>;
  advice_ends_with?: Maybe<String>;
  advice_not_ends_with?: Maybe<String>;
  query?: Maybe<String>;
  query_not?: Maybe<String>;
  query_in?: Maybe<String[] | String>;
  query_not_in?: Maybe<String[] | String>;
  query_lt?: Maybe<String>;
  query_lte?: Maybe<String>;
  query_gt?: Maybe<String>;
  query_gte?: Maybe<String>;
  query_contains?: Maybe<String>;
  query_not_contains?: Maybe<String>;
  query_starts_with?: Maybe<String>;
  query_not_starts_with?: Maybe<String>;
  query_ends_with?: Maybe<String>;
  query_not_ends_with?: Maybe<String>;
  followUpObservation?: Maybe<String>;
  followUpObservation_not?: Maybe<String>;
  followUpObservation_in?: Maybe<String[] | String>;
  followUpObservation_not_in?: Maybe<String[] | String>;
  followUpObservation_lt?: Maybe<String>;
  followUpObservation_lte?: Maybe<String>;
  followUpObservation_gt?: Maybe<String>;
  followUpObservation_gte?: Maybe<String>;
  followUpObservation_contains?: Maybe<String>;
  followUpObservation_not_contains?: Maybe<String>;
  followUpObservation_starts_with?: Maybe<String>;
  followUpObservation_not_starts_with?: Maybe<String>;
  followUpObservation_ends_with?: Maybe<String>;
  followUpObservation_not_ends_with?: Maybe<String>;
  AND?: Maybe<PatientRecordScalarWhereInput[] | PatientRecordScalarWhereInput>;
  OR?: Maybe<PatientRecordScalarWhereInput[] | PatientRecordScalarWhereInput>;
  NOT?: Maybe<PatientRecordScalarWhereInput[] | PatientRecordScalarWhereInput>;
}

export interface PatientRecordUpdateManyWithWhereNestedInput {
  where: PatientRecordScalarWhereInput;
  data: PatientRecordUpdateManyDataInput;
}

export interface PatientRecordUpdateManyDataInput {
  visitNo?: Maybe<Int>;
  observation?: Maybe<String>;
  Tx?: Maybe<String>;
  suggesstions?: Maybe<String>;
  cevsSp?: Maybe<Int>;
  cevsDp?: Maybe<Int>;
  cePr?: Maybe<Int>;
  ceRr?: Maybe<Int>;
  ceHeight?: Maybe<Int>;
  ceWeight?: Maybe<Int>;
  medication?: Maybe<String>;
  advice?: Maybe<String>;
  query?: Maybe<String>;
  followUpObservation?: Maybe<String>;
}

export interface PatientCaseUpsertNestedInput {
  update: PatientCaseUpdateDataInput;
  create: PatientCaseCreateInput;
}

export interface AccessRequestUpdateManyInput {
  create?: Maybe<AccessRequestCreateInput[] | AccessRequestCreateInput>;
  update?: Maybe<
    | AccessRequestUpdateWithWhereUniqueNestedInput[]
    | AccessRequestUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AccessRequestUpsertWithWhereUniqueNestedInput[]
    | AccessRequestUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<
    AccessRequestWhereUniqueInput[] | AccessRequestWhereUniqueInput
  >;
  connect?: Maybe<
    AccessRequestWhereUniqueInput[] | AccessRequestWhereUniqueInput
  >;
  set?: Maybe<AccessRequestWhereUniqueInput[] | AccessRequestWhereUniqueInput>;
  disconnect?: Maybe<
    AccessRequestWhereUniqueInput[] | AccessRequestWhereUniqueInput
  >;
  deleteMany?: Maybe<
    AccessRequestScalarWhereInput[] | AccessRequestScalarWhereInput
  >;
  updateMany?: Maybe<
    | AccessRequestUpdateManyWithWhereNestedInput[]
    | AccessRequestUpdateManyWithWhereNestedInput
  >;
}

export interface AccessRequestUpdateWithWhereUniqueNestedInput {
  where: AccessRequestWhereUniqueInput;
  data: AccessRequestUpdateDataInput;
}

export interface AccessRequestUpdateDataInput {
  medicalPractitionerFirstName?: Maybe<String>;
  medicalPractitionerLastName?: Maybe<String>;
  medicalPractitionerId?: Maybe<String>;
}

export interface AccessRequestUpsertWithWhereUniqueNestedInput {
  where: AccessRequestWhereUniqueInput;
  update: AccessRequestUpdateDataInput;
  create: AccessRequestCreateInput;
}

export interface AccessRequestScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  medicalPractitionerFirstName?: Maybe<String>;
  medicalPractitionerFirstName_not?: Maybe<String>;
  medicalPractitionerFirstName_in?: Maybe<String[] | String>;
  medicalPractitionerFirstName_not_in?: Maybe<String[] | String>;
  medicalPractitionerFirstName_lt?: Maybe<String>;
  medicalPractitionerFirstName_lte?: Maybe<String>;
  medicalPractitionerFirstName_gt?: Maybe<String>;
  medicalPractitionerFirstName_gte?: Maybe<String>;
  medicalPractitionerFirstName_contains?: Maybe<String>;
  medicalPractitionerFirstName_not_contains?: Maybe<String>;
  medicalPractitionerFirstName_starts_with?: Maybe<String>;
  medicalPractitionerFirstName_not_starts_with?: Maybe<String>;
  medicalPractitionerFirstName_ends_with?: Maybe<String>;
  medicalPractitionerFirstName_not_ends_with?: Maybe<String>;
  medicalPractitionerLastName?: Maybe<String>;
  medicalPractitionerLastName_not?: Maybe<String>;
  medicalPractitionerLastName_in?: Maybe<String[] | String>;
  medicalPractitionerLastName_not_in?: Maybe<String[] | String>;
  medicalPractitionerLastName_lt?: Maybe<String>;
  medicalPractitionerLastName_lte?: Maybe<String>;
  medicalPractitionerLastName_gt?: Maybe<String>;
  medicalPractitionerLastName_gte?: Maybe<String>;
  medicalPractitionerLastName_contains?: Maybe<String>;
  medicalPractitionerLastName_not_contains?: Maybe<String>;
  medicalPractitionerLastName_starts_with?: Maybe<String>;
  medicalPractitionerLastName_not_starts_with?: Maybe<String>;
  medicalPractitionerLastName_ends_with?: Maybe<String>;
  medicalPractitionerLastName_not_ends_with?: Maybe<String>;
  medicalPractitionerId?: Maybe<String>;
  medicalPractitionerId_not?: Maybe<String>;
  medicalPractitionerId_in?: Maybe<String[] | String>;
  medicalPractitionerId_not_in?: Maybe<String[] | String>;
  medicalPractitionerId_lt?: Maybe<String>;
  medicalPractitionerId_lte?: Maybe<String>;
  medicalPractitionerId_gt?: Maybe<String>;
  medicalPractitionerId_gte?: Maybe<String>;
  medicalPractitionerId_contains?: Maybe<String>;
  medicalPractitionerId_not_contains?: Maybe<String>;
  medicalPractitionerId_starts_with?: Maybe<String>;
  medicalPractitionerId_not_starts_with?: Maybe<String>;
  medicalPractitionerId_ends_with?: Maybe<String>;
  medicalPractitionerId_not_ends_with?: Maybe<String>;
  AND?: Maybe<AccessRequestScalarWhereInput[] | AccessRequestScalarWhereInput>;
  OR?: Maybe<AccessRequestScalarWhereInput[] | AccessRequestScalarWhereInput>;
  NOT?: Maybe<AccessRequestScalarWhereInput[] | AccessRequestScalarWhereInput>;
}

export interface AccessRequestUpdateManyWithWhereNestedInput {
  where: AccessRequestScalarWhereInput;
  data: AccessRequestUpdateManyDataInput;
}

export interface AccessRequestUpdateManyDataInput {
  medicalPractitionerFirstName?: Maybe<String>;
  medicalPractitionerLastName?: Maybe<String>;
  medicalPractitionerId?: Maybe<String>;
}

export interface PatientUpsertWithWhereUniqueNestedInput {
  where: PatientWhereUniqueInput;
  update: PatientUpdateDataInput;
  create: PatientCreateInput;
}

export interface PatientScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  middleName?: Maybe<String>;
  middleName_not?: Maybe<String>;
  middleName_in?: Maybe<String[] | String>;
  middleName_not_in?: Maybe<String[] | String>;
  middleName_lt?: Maybe<String>;
  middleName_lte?: Maybe<String>;
  middleName_gt?: Maybe<String>;
  middleName_gte?: Maybe<String>;
  middleName_contains?: Maybe<String>;
  middleName_not_contains?: Maybe<String>;
  middleName_starts_with?: Maybe<String>;
  middleName_not_starts_with?: Maybe<String>;
  middleName_ends_with?: Maybe<String>;
  middleName_not_ends_with?: Maybe<String>;
  motherName?: Maybe<String>;
  motherName_not?: Maybe<String>;
  motherName_in?: Maybe<String[] | String>;
  motherName_not_in?: Maybe<String[] | String>;
  motherName_lt?: Maybe<String>;
  motherName_lte?: Maybe<String>;
  motherName_gt?: Maybe<String>;
  motherName_gte?: Maybe<String>;
  motherName_contains?: Maybe<String>;
  motherName_not_contains?: Maybe<String>;
  motherName_starts_with?: Maybe<String>;
  motherName_not_starts_with?: Maybe<String>;
  motherName_ends_with?: Maybe<String>;
  motherName_not_ends_with?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  dob_not?: Maybe<DateTimeInput>;
  dob_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dob_lt?: Maybe<DateTimeInput>;
  dob_lte?: Maybe<DateTimeInput>;
  dob_gt?: Maybe<DateTimeInput>;
  dob_gte?: Maybe<DateTimeInput>;
  bloodGroup?: Maybe<String>;
  bloodGroup_not?: Maybe<String>;
  bloodGroup_in?: Maybe<String[] | String>;
  bloodGroup_not_in?: Maybe<String[] | String>;
  bloodGroup_lt?: Maybe<String>;
  bloodGroup_lte?: Maybe<String>;
  bloodGroup_gt?: Maybe<String>;
  bloodGroup_gte?: Maybe<String>;
  bloodGroup_contains?: Maybe<String>;
  bloodGroup_not_contains?: Maybe<String>;
  bloodGroup_starts_with?: Maybe<String>;
  bloodGroup_not_starts_with?: Maybe<String>;
  bloodGroup_ends_with?: Maybe<String>;
  bloodGroup_not_ends_with?: Maybe<String>;
  sex?: Maybe<String>;
  sex_not?: Maybe<String>;
  sex_in?: Maybe<String[] | String>;
  sex_not_in?: Maybe<String[] | String>;
  sex_lt?: Maybe<String>;
  sex_lte?: Maybe<String>;
  sex_gt?: Maybe<String>;
  sex_gte?: Maybe<String>;
  sex_contains?: Maybe<String>;
  sex_not_contains?: Maybe<String>;
  sex_starts_with?: Maybe<String>;
  sex_not_starts_with?: Maybe<String>;
  sex_ends_with?: Maybe<String>;
  sex_not_ends_with?: Maybe<String>;
  religion?: Maybe<String>;
  religion_not?: Maybe<String>;
  religion_in?: Maybe<String[] | String>;
  religion_not_in?: Maybe<String[] | String>;
  religion_lt?: Maybe<String>;
  religion_lte?: Maybe<String>;
  religion_gt?: Maybe<String>;
  religion_gte?: Maybe<String>;
  religion_contains?: Maybe<String>;
  religion_not_contains?: Maybe<String>;
  religion_starts_with?: Maybe<String>;
  religion_not_starts_with?: Maybe<String>;
  religion_ends_with?: Maybe<String>;
  religion_not_ends_with?: Maybe<String>;
  maritalStatus?: Maybe<String>;
  maritalStatus_not?: Maybe<String>;
  maritalStatus_in?: Maybe<String[] | String>;
  maritalStatus_not_in?: Maybe<String[] | String>;
  maritalStatus_lt?: Maybe<String>;
  maritalStatus_lte?: Maybe<String>;
  maritalStatus_gt?: Maybe<String>;
  maritalStatus_gte?: Maybe<String>;
  maritalStatus_contains?: Maybe<String>;
  maritalStatus_not_contains?: Maybe<String>;
  maritalStatus_starts_with?: Maybe<String>;
  maritalStatus_not_starts_with?: Maybe<String>;
  maritalStatus_ends_with?: Maybe<String>;
  maritalStatus_not_ends_with?: Maybe<String>;
  primaryLanguage?: Maybe<String>;
  primaryLanguage_not?: Maybe<String>;
  primaryLanguage_in?: Maybe<String[] | String>;
  primaryLanguage_not_in?: Maybe<String[] | String>;
  primaryLanguage_lt?: Maybe<String>;
  primaryLanguage_lte?: Maybe<String>;
  primaryLanguage_gt?: Maybe<String>;
  primaryLanguage_gte?: Maybe<String>;
  primaryLanguage_contains?: Maybe<String>;
  primaryLanguage_not_contains?: Maybe<String>;
  primaryLanguage_starts_with?: Maybe<String>;
  primaryLanguage_not_starts_with?: Maybe<String>;
  primaryLanguage_ends_with?: Maybe<String>;
  primaryLanguage_not_ends_with?: Maybe<String>;
  birthPlace?: Maybe<String>;
  birthPlace_not?: Maybe<String>;
  birthPlace_in?: Maybe<String[] | String>;
  birthPlace_not_in?: Maybe<String[] | String>;
  birthPlace_lt?: Maybe<String>;
  birthPlace_lte?: Maybe<String>;
  birthPlace_gt?: Maybe<String>;
  birthPlace_gte?: Maybe<String>;
  birthPlace_contains?: Maybe<String>;
  birthPlace_not_contains?: Maybe<String>;
  birthPlace_starts_with?: Maybe<String>;
  birthPlace_not_starts_with?: Maybe<String>;
  birthPlace_ends_with?: Maybe<String>;
  birthPlace_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  countryCode?: Maybe<Int>;
  countryCode_not?: Maybe<Int>;
  countryCode_in?: Maybe<Int[] | Int>;
  countryCode_not_in?: Maybe<Int[] | Int>;
  countryCode_lt?: Maybe<Int>;
  countryCode_lte?: Maybe<Int>;
  countryCode_gt?: Maybe<Int>;
  countryCode_gte?: Maybe<Int>;
  occupation?: Maybe<String>;
  occupation_not?: Maybe<String>;
  occupation_in?: Maybe<String[] | String>;
  occupation_not_in?: Maybe<String[] | String>;
  occupation_lt?: Maybe<String>;
  occupation_lte?: Maybe<String>;
  occupation_gt?: Maybe<String>;
  occupation_gte?: Maybe<String>;
  occupation_contains?: Maybe<String>;
  occupation_not_contains?: Maybe<String>;
  occupation_starts_with?: Maybe<String>;
  occupation_not_starts_with?: Maybe<String>;
  occupation_ends_with?: Maybe<String>;
  occupation_not_ends_with?: Maybe<String>;
  contact1?: Maybe<String>;
  contact1_not?: Maybe<String>;
  contact1_in?: Maybe<String[] | String>;
  contact1_not_in?: Maybe<String[] | String>;
  contact1_lt?: Maybe<String>;
  contact1_lte?: Maybe<String>;
  contact1_gt?: Maybe<String>;
  contact1_gte?: Maybe<String>;
  contact1_contains?: Maybe<String>;
  contact1_not_contains?: Maybe<String>;
  contact1_starts_with?: Maybe<String>;
  contact1_not_starts_with?: Maybe<String>;
  contact1_ends_with?: Maybe<String>;
  contact1_not_ends_with?: Maybe<String>;
  contact2?: Maybe<String>;
  contact2_not?: Maybe<String>;
  contact2_in?: Maybe<String[] | String>;
  contact2_not_in?: Maybe<String[] | String>;
  contact2_lt?: Maybe<String>;
  contact2_lte?: Maybe<String>;
  contact2_gt?: Maybe<String>;
  contact2_gte?: Maybe<String>;
  contact2_contains?: Maybe<String>;
  contact2_not_contains?: Maybe<String>;
  contact2_starts_with?: Maybe<String>;
  contact2_not_starts_with?: Maybe<String>;
  contact2_ends_with?: Maybe<String>;
  contact2_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  socioEconomicStatus?: Maybe<String>;
  socioEconomicStatus_not?: Maybe<String>;
  socioEconomicStatus_in?: Maybe<String[] | String>;
  socioEconomicStatus_not_in?: Maybe<String[] | String>;
  socioEconomicStatus_lt?: Maybe<String>;
  socioEconomicStatus_lte?: Maybe<String>;
  socioEconomicStatus_gt?: Maybe<String>;
  socioEconomicStatus_gte?: Maybe<String>;
  socioEconomicStatus_contains?: Maybe<String>;
  socioEconomicStatus_not_contains?: Maybe<String>;
  socioEconomicStatus_starts_with?: Maybe<String>;
  socioEconomicStatus_not_starts_with?: Maybe<String>;
  socioEconomicStatus_ends_with?: Maybe<String>;
  socioEconomicStatus_not_ends_with?: Maybe<String>;
  immunizationStatus?: Maybe<String>;
  immunizationStatus_not?: Maybe<String>;
  immunizationStatus_in?: Maybe<String[] | String>;
  immunizationStatus_not_in?: Maybe<String[] | String>;
  immunizationStatus_lt?: Maybe<String>;
  immunizationStatus_lte?: Maybe<String>;
  immunizationStatus_gt?: Maybe<String>;
  immunizationStatus_gte?: Maybe<String>;
  immunizationStatus_contains?: Maybe<String>;
  immunizationStatus_not_contains?: Maybe<String>;
  immunizationStatus_starts_with?: Maybe<String>;
  immunizationStatus_not_starts_with?: Maybe<String>;
  immunizationStatus_ends_with?: Maybe<String>;
  immunizationStatus_not_ends_with?: Maybe<String>;
  allergyStatus?: Maybe<Boolean>;
  allergyStatus_not?: Maybe<Boolean>;
  organDonorStatus?: Maybe<Boolean>;
  organDonorStatus_not?: Maybe<Boolean>;
  PMH?: Maybe<String>;
  PMH_not?: Maybe<String>;
  PMH_in?: Maybe<String[] | String>;
  PMH_not_in?: Maybe<String[] | String>;
  PMH_lt?: Maybe<String>;
  PMH_lte?: Maybe<String>;
  PMH_gt?: Maybe<String>;
  PMH_gte?: Maybe<String>;
  PMH_contains?: Maybe<String>;
  PMH_not_contains?: Maybe<String>;
  PMH_starts_with?: Maybe<String>;
  PMH_not_starts_with?: Maybe<String>;
  PMH_ends_with?: Maybe<String>;
  PMH_not_ends_with?: Maybe<String>;
  DHx?: Maybe<String>;
  DHx_not?: Maybe<String>;
  DHx_in?: Maybe<String[] | String>;
  DHx_not_in?: Maybe<String[] | String>;
  DHx_lt?: Maybe<String>;
  DHx_lte?: Maybe<String>;
  DHx_gt?: Maybe<String>;
  DHx_gte?: Maybe<String>;
  DHx_contains?: Maybe<String>;
  DHx_not_contains?: Maybe<String>;
  DHx_starts_with?: Maybe<String>;
  DHx_not_starts_with?: Maybe<String>;
  DHx_ends_with?: Maybe<String>;
  DHx_not_ends_with?: Maybe<String>;
  Ca?: Maybe<String>;
  Ca_not?: Maybe<String>;
  Ca_in?: Maybe<String[] | String>;
  Ca_not_in?: Maybe<String[] | String>;
  Ca_lt?: Maybe<String>;
  Ca_lte?: Maybe<String>;
  Ca_gt?: Maybe<String>;
  Ca_gte?: Maybe<String>;
  Ca_contains?: Maybe<String>;
  Ca_not_contains?: Maybe<String>;
  Ca_starts_with?: Maybe<String>;
  Ca_not_starts_with?: Maybe<String>;
  Ca_ends_with?: Maybe<String>;
  Ca_not_ends_with?: Maybe<String>;
  IDDM?: Maybe<String>;
  IDDM_not?: Maybe<String>;
  IDDM_in?: Maybe<String[] | String>;
  IDDM_not_in?: Maybe<String[] | String>;
  IDDM_lt?: Maybe<String>;
  IDDM_lte?: Maybe<String>;
  IDDM_gt?: Maybe<String>;
  IDDM_gte?: Maybe<String>;
  IDDM_contains?: Maybe<String>;
  IDDM_not_contains?: Maybe<String>;
  IDDM_starts_with?: Maybe<String>;
  IDDM_not_starts_with?: Maybe<String>;
  IDDM_ends_with?: Maybe<String>;
  IDDM_not_ends_with?: Maybe<String>;
  NIDDM?: Maybe<String>;
  NIDDM_not?: Maybe<String>;
  NIDDM_in?: Maybe<String[] | String>;
  NIDDM_not_in?: Maybe<String[] | String>;
  NIDDM_lt?: Maybe<String>;
  NIDDM_lte?: Maybe<String>;
  NIDDM_gt?: Maybe<String>;
  NIDDM_gte?: Maybe<String>;
  NIDDM_contains?: Maybe<String>;
  NIDDM_not_contains?: Maybe<String>;
  NIDDM_starts_with?: Maybe<String>;
  NIDDM_not_starts_with?: Maybe<String>;
  NIDDM_ends_with?: Maybe<String>;
  NIDDM_not_ends_with?: Maybe<String>;
  MI?: Maybe<String>;
  MI_not?: Maybe<String>;
  MI_in?: Maybe<String[] | String>;
  MI_not_in?: Maybe<String[] | String>;
  MI_lt?: Maybe<String>;
  MI_lte?: Maybe<String>;
  MI_gt?: Maybe<String>;
  MI_gte?: Maybe<String>;
  MI_contains?: Maybe<String>;
  MI_not_contains?: Maybe<String>;
  MI_starts_with?: Maybe<String>;
  MI_not_starts_with?: Maybe<String>;
  MI_ends_with?: Maybe<String>;
  MI_not_ends_with?: Maybe<String>;
  AF?: Maybe<String>;
  AF_not?: Maybe<String>;
  AF_in?: Maybe<String[] | String>;
  AF_not_in?: Maybe<String[] | String>;
  AF_lt?: Maybe<String>;
  AF_lte?: Maybe<String>;
  AF_gt?: Maybe<String>;
  AF_gte?: Maybe<String>;
  AF_contains?: Maybe<String>;
  AF_not_contains?: Maybe<String>;
  AF_starts_with?: Maybe<String>;
  AF_not_starts_with?: Maybe<String>;
  AF_ends_with?: Maybe<String>;
  AF_not_ends_with?: Maybe<String>;
  registeredAt?: Maybe<DateTimeInput>;
  registeredAt_not?: Maybe<DateTimeInput>;
  registeredAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  registeredAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  registeredAt_lt?: Maybe<DateTimeInput>;
  registeredAt_lte?: Maybe<DateTimeInput>;
  registeredAt_gt?: Maybe<DateTimeInput>;
  registeredAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PatientScalarWhereInput[] | PatientScalarWhereInput>;
  OR?: Maybe<PatientScalarWhereInput[] | PatientScalarWhereInput>;
  NOT?: Maybe<PatientScalarWhereInput[] | PatientScalarWhereInput>;
}

export interface PatientUpdateManyWithWhereNestedInput {
  where: PatientScalarWhereInput;
  data: PatientUpdateManyDataInput;
}

export interface PatientUpdateManyDataInput {
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  motherName?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  bloodGroup?: Maybe<String>;
  sex?: Maybe<String>;
  religion?: Maybe<String>;
  maritalStatus?: Maybe<String>;
  primaryLanguage?: Maybe<String>;
  birthPlace?: Maybe<String>;
  address?: Maybe<String>;
  countryCode?: Maybe<Int>;
  occupation?: Maybe<String>;
  contact1?: Maybe<String>;
  contact2?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  socioEconomicStatus?: Maybe<String>;
  immunizationStatus?: Maybe<String>;
  allergyStatus?: Maybe<Boolean>;
  organDonorStatus?: Maybe<Boolean>;
  PMH?: Maybe<String>;
  DHx?: Maybe<String>;
  Ca?: Maybe<String>;
  IDDM?: Maybe<String>;
  NIDDM?: Maybe<String>;
  MI?: Maybe<String>;
  AF?: Maybe<String>;
}

export interface MedicalPractitionerUpdateManyMutationInput {
  mpId?: Maybe<Int>;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  sex?: Maybe<String>;
  address?: Maybe<String>;
  degree?: Maybe<String>;
  field?: Maybe<String>;
}

export interface PatientUpdateInput {
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  motherName?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  bloodGroup?: Maybe<String>;
  sex?: Maybe<String>;
  religion?: Maybe<String>;
  maritalStatus?: Maybe<String>;
  primaryLanguage?: Maybe<String>;
  birthPlace?: Maybe<String>;
  address?: Maybe<String>;
  countryCode?: Maybe<Int>;
  occupation?: Maybe<String>;
  contact1?: Maybe<String>;
  contact2?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  socioEconomicStatus?: Maybe<String>;
  immunizationStatus?: Maybe<String>;
  allergyStatus?: Maybe<Boolean>;
  organDonorStatus?: Maybe<Boolean>;
  PMH?: Maybe<String>;
  DHx?: Maybe<String>;
  Ca?: Maybe<String>;
  IDDM?: Maybe<String>;
  NIDDM?: Maybe<String>;
  MI?: Maybe<String>;
  AF?: Maybe<String>;
  careProvider?: Maybe<CareProviderUpdateOneInput>;
  insurance?: Maybe<InsuranceUpdateOneInput>;
  patientCase?: Maybe<PatientCaseUpdateOneInput>;
  accessRequests?: Maybe<AccessRequestUpdateManyInput>;
}

export interface PatientUpdateManyMutationInput {
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  middleName?: Maybe<String>;
  motherName?: Maybe<String>;
  dob?: Maybe<DateTimeInput>;
  bloodGroup?: Maybe<String>;
  sex?: Maybe<String>;
  religion?: Maybe<String>;
  maritalStatus?: Maybe<String>;
  primaryLanguage?: Maybe<String>;
  birthPlace?: Maybe<String>;
  address?: Maybe<String>;
  countryCode?: Maybe<Int>;
  occupation?: Maybe<String>;
  contact1?: Maybe<String>;
  contact2?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  socioEconomicStatus?: Maybe<String>;
  immunizationStatus?: Maybe<String>;
  allergyStatus?: Maybe<Boolean>;
  organDonorStatus?: Maybe<Boolean>;
  PMH?: Maybe<String>;
  DHx?: Maybe<String>;
  Ca?: Maybe<String>;
  IDDM?: Maybe<String>;
  NIDDM?: Maybe<String>;
  MI?: Maybe<String>;
  AF?: Maybe<String>;
}

export interface PatientCaseUpdateInput {
  mp?: Maybe<MedicalPractitionerUpdateOneRequiredInput>;
  icdCode?: Maybe<IcdCodesUpdateOneRequiredInput>;
  icdSubCode?: Maybe<IcdSubCodesUpdateOneRequiredInput>;
  hospital?: Maybe<HospitalUpdateOneRequiredInput>;
  HPC?: Maybe<String>;
  MoI?: Maybe<String>;
  DnV?: Maybe<String>;
  clinicNote?: Maybe<String>;
  diagnosisType?: Maybe<String>;
  currentClinicalStatus?: Maybe<String>;
  records?: Maybe<PatientRecordUpdateManyInput>;
}

export interface PatientCaseUpdateManyMutationInput {
  HPC?: Maybe<String>;
  MoI?: Maybe<String>;
  DnV?: Maybe<String>;
  clinicNote?: Maybe<String>;
  diagnosisType?: Maybe<String>;
  currentClinicalStatus?: Maybe<String>;
}

export interface PatientRecordUpdateInput {
  visitNo?: Maybe<Int>;
  mp?: Maybe<MedicalPractitionerUpdateOneRequiredInput>;
  hospital?: Maybe<HospitalUpdateOneRequiredInput>;
  observation?: Maybe<String>;
  Tx?: Maybe<String>;
  suggesstions?: Maybe<String>;
  cevsSp?: Maybe<Int>;
  cevsDp?: Maybe<Int>;
  cePr?: Maybe<Int>;
  ceRr?: Maybe<Int>;
  ceHeight?: Maybe<Int>;
  ceWeight?: Maybe<Int>;
  medication?: Maybe<String>;
  advice?: Maybe<String>;
  query?: Maybe<String>;
  followUpObservation?: Maybe<String>;
}

export interface PatientRecordUpdateManyMutationInput {
  visitNo?: Maybe<Int>;
  observation?: Maybe<String>;
  Tx?: Maybe<String>;
  suggesstions?: Maybe<String>;
  cevsSp?: Maybe<Int>;
  cevsDp?: Maybe<Int>;
  cePr?: Maybe<Int>;
  ceRr?: Maybe<Int>;
  ceHeight?: Maybe<Int>;
  ceWeight?: Maybe<Int>;
  medication?: Maybe<String>;
  advice?: Maybe<String>;
  query?: Maybe<String>;
  followUpObservation?: Maybe<String>;
}

export interface AccessRequestSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AccessRequestWhereInput>;
  AND?: Maybe<
    AccessRequestSubscriptionWhereInput[] | AccessRequestSubscriptionWhereInput
  >;
  OR?: Maybe<
    AccessRequestSubscriptionWhereInput[] | AccessRequestSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AccessRequestSubscriptionWhereInput[] | AccessRequestSubscriptionWhereInput
  >;
}

export interface AdminSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AdminWhereInput>;
  AND?: Maybe<AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput>;
  OR?: Maybe<AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput>;
  NOT?: Maybe<AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput>;
}

export interface CareProviderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CareProviderWhereInput>;
  AND?: Maybe<
    CareProviderSubscriptionWhereInput[] | CareProviderSubscriptionWhereInput
  >;
  OR?: Maybe<
    CareProviderSubscriptionWhereInput[] | CareProviderSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CareProviderSubscriptionWhereInput[] | CareProviderSubscriptionWhereInput
  >;
}

export interface HospitalSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<HospitalWhereInput>;
  AND?: Maybe<
    HospitalSubscriptionWhereInput[] | HospitalSubscriptionWhereInput
  >;
  OR?: Maybe<HospitalSubscriptionWhereInput[] | HospitalSubscriptionWhereInput>;
  NOT?: Maybe<
    HospitalSubscriptionWhereInput[] | HospitalSubscriptionWhereInput
  >;
}

export interface IcdCodesSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IcdCodesWhereInput>;
  AND?: Maybe<
    IcdCodesSubscriptionWhereInput[] | IcdCodesSubscriptionWhereInput
  >;
  OR?: Maybe<IcdCodesSubscriptionWhereInput[] | IcdCodesSubscriptionWhereInput>;
  NOT?: Maybe<
    IcdCodesSubscriptionWhereInput[] | IcdCodesSubscriptionWhereInput
  >;
}

export interface IcdSubCodesSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IcdSubCodesWhereInput>;
  AND?: Maybe<
    IcdSubCodesSubscriptionWhereInput[] | IcdSubCodesSubscriptionWhereInput
  >;
  OR?: Maybe<
    IcdSubCodesSubscriptionWhereInput[] | IcdSubCodesSubscriptionWhereInput
  >;
  NOT?: Maybe<
    IcdSubCodesSubscriptionWhereInput[] | IcdSubCodesSubscriptionWhereInput
  >;
}

export interface InsuranceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InsuranceWhereInput>;
  AND?: Maybe<
    InsuranceSubscriptionWhereInput[] | InsuranceSubscriptionWhereInput
  >;
  OR?: Maybe<
    InsuranceSubscriptionWhereInput[] | InsuranceSubscriptionWhereInput
  >;
  NOT?: Maybe<
    InsuranceSubscriptionWhereInput[] | InsuranceSubscriptionWhereInput
  >;
}

export interface MedicalPractitionerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MedicalPractitionerWhereInput>;
  AND?: Maybe<
    | MedicalPractitionerSubscriptionWhereInput[]
    | MedicalPractitionerSubscriptionWhereInput
  >;
  OR?: Maybe<
    | MedicalPractitionerSubscriptionWhereInput[]
    | MedicalPractitionerSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | MedicalPractitionerSubscriptionWhereInput[]
    | MedicalPractitionerSubscriptionWhereInput
  >;
}

export interface PatientSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PatientWhereInput>;
  AND?: Maybe<PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput>;
  OR?: Maybe<PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput>;
  NOT?: Maybe<PatientSubscriptionWhereInput[] | PatientSubscriptionWhereInput>;
}

export interface PatientCaseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PatientCaseWhereInput>;
  AND?: Maybe<
    PatientCaseSubscriptionWhereInput[] | PatientCaseSubscriptionWhereInput
  >;
  OR?: Maybe<
    PatientCaseSubscriptionWhereInput[] | PatientCaseSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PatientCaseSubscriptionWhereInput[] | PatientCaseSubscriptionWhereInput
  >;
}

export interface PatientRecordSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PatientRecordWhereInput>;
  AND?: Maybe<
    PatientRecordSubscriptionWhereInput[] | PatientRecordSubscriptionWhereInput
  >;
  OR?: Maybe<
    PatientRecordSubscriptionWhereInput[] | PatientRecordSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PatientRecordSubscriptionWhereInput[] | PatientRecordSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AccessRequest {
  id: ID_Output;
  medicalPractitionerFirstName: String;
  medicalPractitionerLastName: String;
  medicalPractitionerId: String;
}

export interface AccessRequestPromise
  extends Promise<AccessRequest>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  medicalPractitionerFirstName: () => Promise<String>;
  medicalPractitionerLastName: () => Promise<String>;
  medicalPractitionerId: () => Promise<String>;
}

export interface AccessRequestSubscription
  extends Promise<AsyncIterator<AccessRequest>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  medicalPractitionerFirstName: () => Promise<AsyncIterator<String>>;
  medicalPractitionerLastName: () => Promise<AsyncIterator<String>>;
  medicalPractitionerId: () => Promise<AsyncIterator<String>>;
}

export interface AccessRequestNullablePromise
  extends Promise<AccessRequest | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  medicalPractitionerFirstName: () => Promise<String>;
  medicalPractitionerLastName: () => Promise<String>;
  medicalPractitionerId: () => Promise<String>;
}

export interface AccessRequestConnection {
  pageInfo: PageInfo;
  edges: AccessRequestEdge[];
}

export interface AccessRequestConnectionPromise
  extends Promise<AccessRequestConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AccessRequestEdge>>() => T;
  aggregate: <T = AggregateAccessRequestPromise>() => T;
}

export interface AccessRequestConnectionSubscription
  extends Promise<AsyncIterator<AccessRequestConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AccessRequestEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccessRequestSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AccessRequestEdge {
  node: AccessRequest;
  cursor: String;
}

export interface AccessRequestEdgePromise
  extends Promise<AccessRequestEdge>,
    Fragmentable {
  node: <T = AccessRequestPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AccessRequestEdgeSubscription
  extends Promise<AsyncIterator<AccessRequestEdge>>,
    Fragmentable {
  node: <T = AccessRequestSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAccessRequest {
  count: Int;
}

export interface AggregateAccessRequestPromise
  extends Promise<AggregateAccessRequest>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccessRequestSubscription
  extends Promise<AsyncIterator<AggregateAccessRequest>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Admin {
  id: ID_Output;
  email: String;
  password: String;
}

export interface AdminPromise extends Promise<Admin>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface AdminSubscription
  extends Promise<AsyncIterator<Admin>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface AdminNullablePromise
  extends Promise<Admin | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface AdminConnection {
  pageInfo: PageInfo;
  edges: AdminEdge[];
}

export interface AdminConnectionPromise
  extends Promise<AdminConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AdminEdge>>() => T;
  aggregate: <T = AggregateAdminPromise>() => T;
}

export interface AdminConnectionSubscription
  extends Promise<AsyncIterator<AdminConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AdminEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAdminSubscription>() => T;
}

export interface AdminEdge {
  node: Admin;
  cursor: String;
}

export interface AdminEdgePromise extends Promise<AdminEdge>, Fragmentable {
  node: <T = AdminPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AdminEdgeSubscription
  extends Promise<AsyncIterator<AdminEdge>>,
    Fragmentable {
  node: <T = AdminSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAdmin {
  count: Int;
}

export interface AggregateAdminPromise
  extends Promise<AggregateAdmin>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdminSubscription
  extends Promise<AsyncIterator<AggregateAdmin>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CareProvider {
  id: ID_Output;
  firstName: String;
  lastName: String;
  middleName: String;
  address: String;
  cityId: Int;
  stateId: Int;
  pinCode: Int;
  countryCode: Int;
  contact1: String;
  email: String;
}

export interface CareProviderPromise
  extends Promise<CareProvider>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  middleName: () => Promise<String>;
  address: () => Promise<String>;
  cityId: () => Promise<Int>;
  stateId: () => Promise<Int>;
  pinCode: () => Promise<Int>;
  countryCode: () => Promise<Int>;
  contact1: () => Promise<String>;
  email: () => Promise<String>;
}

export interface CareProviderSubscription
  extends Promise<AsyncIterator<CareProvider>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  cityId: () => Promise<AsyncIterator<Int>>;
  stateId: () => Promise<AsyncIterator<Int>>;
  pinCode: () => Promise<AsyncIterator<Int>>;
  countryCode: () => Promise<AsyncIterator<Int>>;
  contact1: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface CareProviderNullablePromise
  extends Promise<CareProvider | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  middleName: () => Promise<String>;
  address: () => Promise<String>;
  cityId: () => Promise<Int>;
  stateId: () => Promise<Int>;
  pinCode: () => Promise<Int>;
  countryCode: () => Promise<Int>;
  contact1: () => Promise<String>;
  email: () => Promise<String>;
}

export interface CareProviderConnection {
  pageInfo: PageInfo;
  edges: CareProviderEdge[];
}

export interface CareProviderConnectionPromise
  extends Promise<CareProviderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CareProviderEdge>>() => T;
  aggregate: <T = AggregateCareProviderPromise>() => T;
}

export interface CareProviderConnectionSubscription
  extends Promise<AsyncIterator<CareProviderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CareProviderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCareProviderSubscription>() => T;
}

export interface CareProviderEdge {
  node: CareProvider;
  cursor: String;
}

export interface CareProviderEdgePromise
  extends Promise<CareProviderEdge>,
    Fragmentable {
  node: <T = CareProviderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CareProviderEdgeSubscription
  extends Promise<AsyncIterator<CareProviderEdge>>,
    Fragmentable {
  node: <T = CareProviderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCareProvider {
  count: Int;
}

export interface AggregateCareProviderPromise
  extends Promise<AggregateCareProvider>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCareProviderSubscription
  extends Promise<AsyncIterator<AggregateCareProvider>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Hospital {
  id: ID_Output;
  name: String;
  address: String;
  city: String;
  district: String;
  pincode: Int;
  countryCode: Int;
}

export interface HospitalPromise extends Promise<Hospital>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  district: () => Promise<String>;
  pincode: () => Promise<Int>;
  countryCode: () => Promise<Int>;
}

export interface HospitalSubscription
  extends Promise<AsyncIterator<Hospital>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  district: () => Promise<AsyncIterator<String>>;
  pincode: () => Promise<AsyncIterator<Int>>;
  countryCode: () => Promise<AsyncIterator<Int>>;
}

export interface HospitalNullablePromise
  extends Promise<Hospital | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  district: () => Promise<String>;
  pincode: () => Promise<Int>;
  countryCode: () => Promise<Int>;
}

export interface HospitalConnection {
  pageInfo: PageInfo;
  edges: HospitalEdge[];
}

export interface HospitalConnectionPromise
  extends Promise<HospitalConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HospitalEdge>>() => T;
  aggregate: <T = AggregateHospitalPromise>() => T;
}

export interface HospitalConnectionSubscription
  extends Promise<AsyncIterator<HospitalConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HospitalEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHospitalSubscription>() => T;
}

export interface HospitalEdge {
  node: Hospital;
  cursor: String;
}

export interface HospitalEdgePromise
  extends Promise<HospitalEdge>,
    Fragmentable {
  node: <T = HospitalPromise>() => T;
  cursor: () => Promise<String>;
}

export interface HospitalEdgeSubscription
  extends Promise<AsyncIterator<HospitalEdge>>,
    Fragmentable {
  node: <T = HospitalSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHospital {
  count: Int;
}

export interface AggregateHospitalPromise
  extends Promise<AggregateHospital>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHospitalSubscription
  extends Promise<AsyncIterator<AggregateHospital>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface IcdCodes {
  id: ID_Output;
  icdCode: String;
  commonName: String;
}

export interface IcdCodesPromise extends Promise<IcdCodes>, Fragmentable {
  id: () => Promise<ID_Output>;
  icdCode: () => Promise<String>;
  commonName: () => Promise<String>;
}

export interface IcdCodesSubscription
  extends Promise<AsyncIterator<IcdCodes>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  icdCode: () => Promise<AsyncIterator<String>>;
  commonName: () => Promise<AsyncIterator<String>>;
}

export interface IcdCodesNullablePromise
  extends Promise<IcdCodes | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  icdCode: () => Promise<String>;
  commonName: () => Promise<String>;
}

export interface IcdCodesConnection {
  pageInfo: PageInfo;
  edges: IcdCodesEdge[];
}

export interface IcdCodesConnectionPromise
  extends Promise<IcdCodesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IcdCodesEdge>>() => T;
  aggregate: <T = AggregateIcdCodesPromise>() => T;
}

export interface IcdCodesConnectionSubscription
  extends Promise<AsyncIterator<IcdCodesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IcdCodesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIcdCodesSubscription>() => T;
}

export interface IcdCodesEdge {
  node: IcdCodes;
  cursor: String;
}

export interface IcdCodesEdgePromise
  extends Promise<IcdCodesEdge>,
    Fragmentable {
  node: <T = IcdCodesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IcdCodesEdgeSubscription
  extends Promise<AsyncIterator<IcdCodesEdge>>,
    Fragmentable {
  node: <T = IcdCodesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIcdCodes {
  count: Int;
}

export interface AggregateIcdCodesPromise
  extends Promise<AggregateIcdCodes>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIcdCodesSubscription
  extends Promise<AsyncIterator<AggregateIcdCodes>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface IcdSubCodes {
  id: ID_Output;
  icdSubCode: String;
  scientificName: String;
}

export interface IcdSubCodesPromise extends Promise<IcdSubCodes>, Fragmentable {
  id: () => Promise<ID_Output>;
  icdSubCode: () => Promise<String>;
  scientificName: () => Promise<String>;
  icdCode: <T = IcdCodesPromise>() => T;
}

export interface IcdSubCodesSubscription
  extends Promise<AsyncIterator<IcdSubCodes>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  icdSubCode: () => Promise<AsyncIterator<String>>;
  scientificName: () => Promise<AsyncIterator<String>>;
  icdCode: <T = IcdCodesSubscription>() => T;
}

export interface IcdSubCodesNullablePromise
  extends Promise<IcdSubCodes | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  icdSubCode: () => Promise<String>;
  scientificName: () => Promise<String>;
  icdCode: <T = IcdCodesPromise>() => T;
}

export interface IcdSubCodesConnection {
  pageInfo: PageInfo;
  edges: IcdSubCodesEdge[];
}

export interface IcdSubCodesConnectionPromise
  extends Promise<IcdSubCodesConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IcdSubCodesEdge>>() => T;
  aggregate: <T = AggregateIcdSubCodesPromise>() => T;
}

export interface IcdSubCodesConnectionSubscription
  extends Promise<AsyncIterator<IcdSubCodesConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IcdSubCodesEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIcdSubCodesSubscription>() => T;
}

export interface IcdSubCodesEdge {
  node: IcdSubCodes;
  cursor: String;
}

export interface IcdSubCodesEdgePromise
  extends Promise<IcdSubCodesEdge>,
    Fragmentable {
  node: <T = IcdSubCodesPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IcdSubCodesEdgeSubscription
  extends Promise<AsyncIterator<IcdSubCodesEdge>>,
    Fragmentable {
  node: <T = IcdSubCodesSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIcdSubCodes {
  count: Int;
}

export interface AggregateIcdSubCodesPromise
  extends Promise<AggregateIcdSubCodes>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIcdSubCodesSubscription
  extends Promise<AsyncIterator<AggregateIcdSubCodes>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Insurance {
  id: ID_Output;
  status: Boolean;
  companyName: String;
}

export interface InsurancePromise extends Promise<Insurance>, Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<Boolean>;
  companyName: () => Promise<String>;
}

export interface InsuranceSubscription
  extends Promise<AsyncIterator<Insurance>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  companyName: () => Promise<AsyncIterator<String>>;
}

export interface InsuranceNullablePromise
  extends Promise<Insurance | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<Boolean>;
  companyName: () => Promise<String>;
}

export interface InsuranceConnection {
  pageInfo: PageInfo;
  edges: InsuranceEdge[];
}

export interface InsuranceConnectionPromise
  extends Promise<InsuranceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InsuranceEdge>>() => T;
  aggregate: <T = AggregateInsurancePromise>() => T;
}

export interface InsuranceConnectionSubscription
  extends Promise<AsyncIterator<InsuranceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InsuranceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInsuranceSubscription>() => T;
}

export interface InsuranceEdge {
  node: Insurance;
  cursor: String;
}

export interface InsuranceEdgePromise
  extends Promise<InsuranceEdge>,
    Fragmentable {
  node: <T = InsurancePromise>() => T;
  cursor: () => Promise<String>;
}

export interface InsuranceEdgeSubscription
  extends Promise<AsyncIterator<InsuranceEdge>>,
    Fragmentable {
  node: <T = InsuranceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateInsurance {
  count: Int;
}

export interface AggregateInsurancePromise
  extends Promise<AggregateInsurance>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInsuranceSubscription
  extends Promise<AsyncIterator<AggregateInsurance>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MedicalPractitioner {
  id: ID_Output;
  mpId: Int;
  lastName: String;
  firstName: String;
  middleName: String;
  email: String;
  password: String;
  dob: DateTimeOutput;
  sex: String;
  address: String;
  degree: String;
  field: String;
  registeredAt: DateTimeOutput;
}

export interface MedicalPractitionerPromise
  extends Promise<MedicalPractitioner>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  mpId: () => Promise<Int>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  middleName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  sex: () => Promise<String>;
  address: () => Promise<String>;
  degree: () => Promise<String>;
  field: () => Promise<String>;
  hospital: <T = HospitalPromise>() => T;
  registeredAt: () => Promise<DateTimeOutput>;
  accessiblePatients: <T = FragmentableArray<Patient>>(args?: {
    where?: PatientWhereInput;
    orderBy?: PatientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MedicalPractitionerSubscription
  extends Promise<AsyncIterator<MedicalPractitioner>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  mpId: () => Promise<AsyncIterator<Int>>;
  lastName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  sex: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  degree: () => Promise<AsyncIterator<String>>;
  field: () => Promise<AsyncIterator<String>>;
  hospital: <T = HospitalSubscription>() => T;
  registeredAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  accessiblePatients: <T = Promise<AsyncIterator<PatientSubscription>>>(args?: {
    where?: PatientWhereInput;
    orderBy?: PatientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MedicalPractitionerNullablePromise
  extends Promise<MedicalPractitioner | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  mpId: () => Promise<Int>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  middleName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  sex: () => Promise<String>;
  address: () => Promise<String>;
  degree: () => Promise<String>;
  field: () => Promise<String>;
  hospital: <T = HospitalPromise>() => T;
  registeredAt: () => Promise<DateTimeOutput>;
  accessiblePatients: <T = FragmentableArray<Patient>>(args?: {
    where?: PatientWhereInput;
    orderBy?: PatientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Patient {
  id: ID_Output;
  lastName: String;
  firstName: String;
  middleName: String;
  motherName: String;
  dob: DateTimeOutput;
  bloodGroup: String;
  sex: String;
  religion: String;
  maritalStatus: String;
  primaryLanguage: String;
  birthPlace: String;
  address: String;
  countryCode: Int;
  occupation: String;
  contact1: String;
  contact2: String;
  email: String;
  password: String;
  socioEconomicStatus: String;
  immunizationStatus: String;
  allergyStatus: Boolean;
  organDonorStatus: Boolean;
  PMH: String;
  DHx: String;
  Ca: String;
  IDDM: String;
  NIDDM: String;
  MI: String;
  AF: String;
  registeredAt: DateTimeOutput;
}

export interface PatientPromise extends Promise<Patient>, Fragmentable {
  id: () => Promise<ID_Output>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  middleName: () => Promise<String>;
  motherName: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  bloodGroup: () => Promise<String>;
  sex: () => Promise<String>;
  religion: () => Promise<String>;
  maritalStatus: () => Promise<String>;
  primaryLanguage: () => Promise<String>;
  birthPlace: () => Promise<String>;
  address: () => Promise<String>;
  countryCode: () => Promise<Int>;
  occupation: () => Promise<String>;
  contact1: () => Promise<String>;
  contact2: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  socioEconomicStatus: () => Promise<String>;
  immunizationStatus: () => Promise<String>;
  allergyStatus: () => Promise<Boolean>;
  organDonorStatus: () => Promise<Boolean>;
  PMH: () => Promise<String>;
  DHx: () => Promise<String>;
  Ca: () => Promise<String>;
  IDDM: () => Promise<String>;
  NIDDM: () => Promise<String>;
  MI: () => Promise<String>;
  AF: () => Promise<String>;
  registeredAt: () => Promise<DateTimeOutput>;
  careProvider: <T = CareProviderPromise>() => T;
  insurance: <T = InsurancePromise>() => T;
  patientCase: <T = PatientCasePromise>() => T;
  accessRequests: <T = FragmentableArray<AccessRequest>>(args?: {
    where?: AccessRequestWhereInput;
    orderBy?: AccessRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PatientSubscription
  extends Promise<AsyncIterator<Patient>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lastName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  motherName: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  bloodGroup: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<String>>;
  religion: () => Promise<AsyncIterator<String>>;
  maritalStatus: () => Promise<AsyncIterator<String>>;
  primaryLanguage: () => Promise<AsyncIterator<String>>;
  birthPlace: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  countryCode: () => Promise<AsyncIterator<Int>>;
  occupation: () => Promise<AsyncIterator<String>>;
  contact1: () => Promise<AsyncIterator<String>>;
  contact2: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  socioEconomicStatus: () => Promise<AsyncIterator<String>>;
  immunizationStatus: () => Promise<AsyncIterator<String>>;
  allergyStatus: () => Promise<AsyncIterator<Boolean>>;
  organDonorStatus: () => Promise<AsyncIterator<Boolean>>;
  PMH: () => Promise<AsyncIterator<String>>;
  DHx: () => Promise<AsyncIterator<String>>;
  Ca: () => Promise<AsyncIterator<String>>;
  IDDM: () => Promise<AsyncIterator<String>>;
  NIDDM: () => Promise<AsyncIterator<String>>;
  MI: () => Promise<AsyncIterator<String>>;
  AF: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  careProvider: <T = CareProviderSubscription>() => T;
  insurance: <T = InsuranceSubscription>() => T;
  patientCase: <T = PatientCaseSubscription>() => T;
  accessRequests: <
    T = Promise<AsyncIterator<AccessRequestSubscription>>
  >(args?: {
    where?: AccessRequestWhereInput;
    orderBy?: AccessRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PatientNullablePromise
  extends Promise<Patient | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  middleName: () => Promise<String>;
  motherName: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  bloodGroup: () => Promise<String>;
  sex: () => Promise<String>;
  religion: () => Promise<String>;
  maritalStatus: () => Promise<String>;
  primaryLanguage: () => Promise<String>;
  birthPlace: () => Promise<String>;
  address: () => Promise<String>;
  countryCode: () => Promise<Int>;
  occupation: () => Promise<String>;
  contact1: () => Promise<String>;
  contact2: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  socioEconomicStatus: () => Promise<String>;
  immunizationStatus: () => Promise<String>;
  allergyStatus: () => Promise<Boolean>;
  organDonorStatus: () => Promise<Boolean>;
  PMH: () => Promise<String>;
  DHx: () => Promise<String>;
  Ca: () => Promise<String>;
  IDDM: () => Promise<String>;
  NIDDM: () => Promise<String>;
  MI: () => Promise<String>;
  AF: () => Promise<String>;
  registeredAt: () => Promise<DateTimeOutput>;
  careProvider: <T = CareProviderPromise>() => T;
  insurance: <T = InsurancePromise>() => T;
  patientCase: <T = PatientCasePromise>() => T;
  accessRequests: <T = FragmentableArray<AccessRequest>>(args?: {
    where?: AccessRequestWhereInput;
    orderBy?: AccessRequestOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PatientCase {
  id: ID_Output;
  HPC: String;
  MoI?: String;
  DnV?: String;
  clinicNote: String;
  diagnosisType: String;
  currentClinicalStatus: String;
  createdAt: DateTimeOutput;
}

export interface PatientCasePromise extends Promise<PatientCase>, Fragmentable {
  id: () => Promise<ID_Output>;
  mp: <T = MedicalPractitionerPromise>() => T;
  icdCode: <T = IcdCodesPromise>() => T;
  icdSubCode: <T = IcdSubCodesPromise>() => T;
  hospital: <T = HospitalPromise>() => T;
  HPC: () => Promise<String>;
  MoI: () => Promise<String>;
  DnV: () => Promise<String>;
  clinicNote: () => Promise<String>;
  diagnosisType: () => Promise<String>;
  currentClinicalStatus: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  records: <T = FragmentableArray<PatientRecord>>(args?: {
    where?: PatientRecordWhereInput;
    orderBy?: PatientRecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PatientCaseSubscription
  extends Promise<AsyncIterator<PatientCase>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  mp: <T = MedicalPractitionerSubscription>() => T;
  icdCode: <T = IcdCodesSubscription>() => T;
  icdSubCode: <T = IcdSubCodesSubscription>() => T;
  hospital: <T = HospitalSubscription>() => T;
  HPC: () => Promise<AsyncIterator<String>>;
  MoI: () => Promise<AsyncIterator<String>>;
  DnV: () => Promise<AsyncIterator<String>>;
  clinicNote: () => Promise<AsyncIterator<String>>;
  diagnosisType: () => Promise<AsyncIterator<String>>;
  currentClinicalStatus: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  records: <T = Promise<AsyncIterator<PatientRecordSubscription>>>(args?: {
    where?: PatientRecordWhereInput;
    orderBy?: PatientRecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PatientCaseNullablePromise
  extends Promise<PatientCase | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  mp: <T = MedicalPractitionerPromise>() => T;
  icdCode: <T = IcdCodesPromise>() => T;
  icdSubCode: <T = IcdSubCodesPromise>() => T;
  hospital: <T = HospitalPromise>() => T;
  HPC: () => Promise<String>;
  MoI: () => Promise<String>;
  DnV: () => Promise<String>;
  clinicNote: () => Promise<String>;
  diagnosisType: () => Promise<String>;
  currentClinicalStatus: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  records: <T = FragmentableArray<PatientRecord>>(args?: {
    where?: PatientRecordWhereInput;
    orderBy?: PatientRecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PatientRecord {
  id: ID_Output;
  visitNo: Int;
  encounterDate: DateTimeOutput;
  observation: String;
  Tx: String;
  suggesstions?: String;
  cevsSp: Int;
  cevsDp: Int;
  cePr: Int;
  ceRr: Int;
  ceHeight: Int;
  ceWeight: Int;
  medication: String;
  advice?: String;
  query?: String;
  followUpObservation?: String;
}

export interface PatientRecordPromise
  extends Promise<PatientRecord>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  visitNo: () => Promise<Int>;
  mp: <T = MedicalPractitionerPromise>() => T;
  hospital: <T = HospitalPromise>() => T;
  encounterDate: () => Promise<DateTimeOutput>;
  observation: () => Promise<String>;
  Tx: () => Promise<String>;
  suggesstions: () => Promise<String>;
  cevsSp: () => Promise<Int>;
  cevsDp: () => Promise<Int>;
  cePr: () => Promise<Int>;
  ceRr: () => Promise<Int>;
  ceHeight: () => Promise<Int>;
  ceWeight: () => Promise<Int>;
  medication: () => Promise<String>;
  advice: () => Promise<String>;
  query: () => Promise<String>;
  followUpObservation: () => Promise<String>;
}

export interface PatientRecordSubscription
  extends Promise<AsyncIterator<PatientRecord>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  visitNo: () => Promise<AsyncIterator<Int>>;
  mp: <T = MedicalPractitionerSubscription>() => T;
  hospital: <T = HospitalSubscription>() => T;
  encounterDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  observation: () => Promise<AsyncIterator<String>>;
  Tx: () => Promise<AsyncIterator<String>>;
  suggesstions: () => Promise<AsyncIterator<String>>;
  cevsSp: () => Promise<AsyncIterator<Int>>;
  cevsDp: () => Promise<AsyncIterator<Int>>;
  cePr: () => Promise<AsyncIterator<Int>>;
  ceRr: () => Promise<AsyncIterator<Int>>;
  ceHeight: () => Promise<AsyncIterator<Int>>;
  ceWeight: () => Promise<AsyncIterator<Int>>;
  medication: () => Promise<AsyncIterator<String>>;
  advice: () => Promise<AsyncIterator<String>>;
  query: () => Promise<AsyncIterator<String>>;
  followUpObservation: () => Promise<AsyncIterator<String>>;
}

export interface PatientRecordNullablePromise
  extends Promise<PatientRecord | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  visitNo: () => Promise<Int>;
  mp: <T = MedicalPractitionerPromise>() => T;
  hospital: <T = HospitalPromise>() => T;
  encounterDate: () => Promise<DateTimeOutput>;
  observation: () => Promise<String>;
  Tx: () => Promise<String>;
  suggesstions: () => Promise<String>;
  cevsSp: () => Promise<Int>;
  cevsDp: () => Promise<Int>;
  cePr: () => Promise<Int>;
  ceRr: () => Promise<Int>;
  ceHeight: () => Promise<Int>;
  ceWeight: () => Promise<Int>;
  medication: () => Promise<String>;
  advice: () => Promise<String>;
  query: () => Promise<String>;
  followUpObservation: () => Promise<String>;
}

export interface MedicalPractitionerConnection {
  pageInfo: PageInfo;
  edges: MedicalPractitionerEdge[];
}

export interface MedicalPractitionerConnectionPromise
  extends Promise<MedicalPractitionerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MedicalPractitionerEdge>>() => T;
  aggregate: <T = AggregateMedicalPractitionerPromise>() => T;
}

export interface MedicalPractitionerConnectionSubscription
  extends Promise<AsyncIterator<MedicalPractitionerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<MedicalPractitionerEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateMedicalPractitionerSubscription>() => T;
}

export interface MedicalPractitionerEdge {
  node: MedicalPractitioner;
  cursor: String;
}

export interface MedicalPractitionerEdgePromise
  extends Promise<MedicalPractitionerEdge>,
    Fragmentable {
  node: <T = MedicalPractitionerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MedicalPractitionerEdgeSubscription
  extends Promise<AsyncIterator<MedicalPractitionerEdge>>,
    Fragmentable {
  node: <T = MedicalPractitionerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMedicalPractitioner {
  count: Int;
}

export interface AggregateMedicalPractitionerPromise
  extends Promise<AggregateMedicalPractitioner>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMedicalPractitionerSubscription
  extends Promise<AsyncIterator<AggregateMedicalPractitioner>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PatientConnection {
  pageInfo: PageInfo;
  edges: PatientEdge[];
}

export interface PatientConnectionPromise
  extends Promise<PatientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PatientEdge>>() => T;
  aggregate: <T = AggregatePatientPromise>() => T;
}

export interface PatientConnectionSubscription
  extends Promise<AsyncIterator<PatientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PatientEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePatientSubscription>() => T;
}

export interface PatientEdge {
  node: Patient;
  cursor: String;
}

export interface PatientEdgePromise extends Promise<PatientEdge>, Fragmentable {
  node: <T = PatientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PatientEdgeSubscription
  extends Promise<AsyncIterator<PatientEdge>>,
    Fragmentable {
  node: <T = PatientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePatient {
  count: Int;
}

export interface AggregatePatientPromise
  extends Promise<AggregatePatient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePatientSubscription
  extends Promise<AsyncIterator<AggregatePatient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PatientCaseConnection {
  pageInfo: PageInfo;
  edges: PatientCaseEdge[];
}

export interface PatientCaseConnectionPromise
  extends Promise<PatientCaseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PatientCaseEdge>>() => T;
  aggregate: <T = AggregatePatientCasePromise>() => T;
}

export interface PatientCaseConnectionSubscription
  extends Promise<AsyncIterator<PatientCaseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PatientCaseEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePatientCaseSubscription>() => T;
}

export interface PatientCaseEdge {
  node: PatientCase;
  cursor: String;
}

export interface PatientCaseEdgePromise
  extends Promise<PatientCaseEdge>,
    Fragmentable {
  node: <T = PatientCasePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PatientCaseEdgeSubscription
  extends Promise<AsyncIterator<PatientCaseEdge>>,
    Fragmentable {
  node: <T = PatientCaseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePatientCase {
  count: Int;
}

export interface AggregatePatientCasePromise
  extends Promise<AggregatePatientCase>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePatientCaseSubscription
  extends Promise<AsyncIterator<AggregatePatientCase>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PatientRecordConnection {
  pageInfo: PageInfo;
  edges: PatientRecordEdge[];
}

export interface PatientRecordConnectionPromise
  extends Promise<PatientRecordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PatientRecordEdge>>() => T;
  aggregate: <T = AggregatePatientRecordPromise>() => T;
}

export interface PatientRecordConnectionSubscription
  extends Promise<AsyncIterator<PatientRecordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PatientRecordEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePatientRecordSubscription>() => T;
}

export interface PatientRecordEdge {
  node: PatientRecord;
  cursor: String;
}

export interface PatientRecordEdgePromise
  extends Promise<PatientRecordEdge>,
    Fragmentable {
  node: <T = PatientRecordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PatientRecordEdgeSubscription
  extends Promise<AsyncIterator<PatientRecordEdge>>,
    Fragmentable {
  node: <T = PatientRecordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePatientRecord {
  count: Int;
}

export interface AggregatePatientRecordPromise
  extends Promise<AggregatePatientRecord>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePatientRecordSubscription
  extends Promise<AsyncIterator<AggregatePatientRecord>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AccessRequestSubscriptionPayload {
  mutation: MutationType;
  node: AccessRequest;
  updatedFields: String[];
  previousValues: AccessRequestPreviousValues;
}

export interface AccessRequestSubscriptionPayloadPromise
  extends Promise<AccessRequestSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AccessRequestPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AccessRequestPreviousValuesPromise>() => T;
}

export interface AccessRequestSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AccessRequestSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AccessRequestSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AccessRequestPreviousValuesSubscription>() => T;
}

export interface AccessRequestPreviousValues {
  id: ID_Output;
  medicalPractitionerFirstName: String;
  medicalPractitionerLastName: String;
  medicalPractitionerId: String;
}

export interface AccessRequestPreviousValuesPromise
  extends Promise<AccessRequestPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  medicalPractitionerFirstName: () => Promise<String>;
  medicalPractitionerLastName: () => Promise<String>;
  medicalPractitionerId: () => Promise<String>;
}

export interface AccessRequestPreviousValuesSubscription
  extends Promise<AsyncIterator<AccessRequestPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  medicalPractitionerFirstName: () => Promise<AsyncIterator<String>>;
  medicalPractitionerLastName: () => Promise<AsyncIterator<String>>;
  medicalPractitionerId: () => Promise<AsyncIterator<String>>;
}

export interface AdminSubscriptionPayload {
  mutation: MutationType;
  node: Admin;
  updatedFields: String[];
  previousValues: AdminPreviousValues;
}

export interface AdminSubscriptionPayloadPromise
  extends Promise<AdminSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AdminPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdminPreviousValuesPromise>() => T;
}

export interface AdminSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdminSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdminSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdminPreviousValuesSubscription>() => T;
}

export interface AdminPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
}

export interface AdminPreviousValuesPromise
  extends Promise<AdminPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface AdminPreviousValuesSubscription
  extends Promise<AsyncIterator<AdminPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface CareProviderSubscriptionPayload {
  mutation: MutationType;
  node: CareProvider;
  updatedFields: String[];
  previousValues: CareProviderPreviousValues;
}

export interface CareProviderSubscriptionPayloadPromise
  extends Promise<CareProviderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CareProviderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CareProviderPreviousValuesPromise>() => T;
}

export interface CareProviderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CareProviderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CareProviderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CareProviderPreviousValuesSubscription>() => T;
}

export interface CareProviderPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  middleName: String;
  address: String;
  cityId: Int;
  stateId: Int;
  pinCode: Int;
  countryCode: Int;
  contact1: String;
  email: String;
}

export interface CareProviderPreviousValuesPromise
  extends Promise<CareProviderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  middleName: () => Promise<String>;
  address: () => Promise<String>;
  cityId: () => Promise<Int>;
  stateId: () => Promise<Int>;
  pinCode: () => Promise<Int>;
  countryCode: () => Promise<Int>;
  contact1: () => Promise<String>;
  email: () => Promise<String>;
}

export interface CareProviderPreviousValuesSubscription
  extends Promise<AsyncIterator<CareProviderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  cityId: () => Promise<AsyncIterator<Int>>;
  stateId: () => Promise<AsyncIterator<Int>>;
  pinCode: () => Promise<AsyncIterator<Int>>;
  countryCode: () => Promise<AsyncIterator<Int>>;
  contact1: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface HospitalSubscriptionPayload {
  mutation: MutationType;
  node: Hospital;
  updatedFields: String[];
  previousValues: HospitalPreviousValues;
}

export interface HospitalSubscriptionPayloadPromise
  extends Promise<HospitalSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HospitalPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HospitalPreviousValuesPromise>() => T;
}

export interface HospitalSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HospitalSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HospitalSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HospitalPreviousValuesSubscription>() => T;
}

export interface HospitalPreviousValues {
  id: ID_Output;
  name: String;
  address: String;
  city: String;
  district: String;
  pincode: Int;
  countryCode: Int;
}

export interface HospitalPreviousValuesPromise
  extends Promise<HospitalPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<String>;
  city: () => Promise<String>;
  district: () => Promise<String>;
  pincode: () => Promise<Int>;
  countryCode: () => Promise<Int>;
}

export interface HospitalPreviousValuesSubscription
  extends Promise<AsyncIterator<HospitalPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  district: () => Promise<AsyncIterator<String>>;
  pincode: () => Promise<AsyncIterator<Int>>;
  countryCode: () => Promise<AsyncIterator<Int>>;
}

export interface IcdCodesSubscriptionPayload {
  mutation: MutationType;
  node: IcdCodes;
  updatedFields: String[];
  previousValues: IcdCodesPreviousValues;
}

export interface IcdCodesSubscriptionPayloadPromise
  extends Promise<IcdCodesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IcdCodesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IcdCodesPreviousValuesPromise>() => T;
}

export interface IcdCodesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IcdCodesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IcdCodesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IcdCodesPreviousValuesSubscription>() => T;
}

export interface IcdCodesPreviousValues {
  id: ID_Output;
  icdCode: String;
  commonName: String;
}

export interface IcdCodesPreviousValuesPromise
  extends Promise<IcdCodesPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  icdCode: () => Promise<String>;
  commonName: () => Promise<String>;
}

export interface IcdCodesPreviousValuesSubscription
  extends Promise<AsyncIterator<IcdCodesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  icdCode: () => Promise<AsyncIterator<String>>;
  commonName: () => Promise<AsyncIterator<String>>;
}

export interface IcdSubCodesSubscriptionPayload {
  mutation: MutationType;
  node: IcdSubCodes;
  updatedFields: String[];
  previousValues: IcdSubCodesPreviousValues;
}

export interface IcdSubCodesSubscriptionPayloadPromise
  extends Promise<IcdSubCodesSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IcdSubCodesPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IcdSubCodesPreviousValuesPromise>() => T;
}

export interface IcdSubCodesSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IcdSubCodesSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IcdSubCodesSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IcdSubCodesPreviousValuesSubscription>() => T;
}

export interface IcdSubCodesPreviousValues {
  id: ID_Output;
  icdSubCode: String;
  scientificName: String;
}

export interface IcdSubCodesPreviousValuesPromise
  extends Promise<IcdSubCodesPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  icdSubCode: () => Promise<String>;
  scientificName: () => Promise<String>;
}

export interface IcdSubCodesPreviousValuesSubscription
  extends Promise<AsyncIterator<IcdSubCodesPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  icdSubCode: () => Promise<AsyncIterator<String>>;
  scientificName: () => Promise<AsyncIterator<String>>;
}

export interface InsuranceSubscriptionPayload {
  mutation: MutationType;
  node: Insurance;
  updatedFields: String[];
  previousValues: InsurancePreviousValues;
}

export interface InsuranceSubscriptionPayloadPromise
  extends Promise<InsuranceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InsurancePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InsurancePreviousValuesPromise>() => T;
}

export interface InsuranceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InsuranceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InsuranceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InsurancePreviousValuesSubscription>() => T;
}

export interface InsurancePreviousValues {
  id: ID_Output;
  status: Boolean;
  companyName: String;
}

export interface InsurancePreviousValuesPromise
  extends Promise<InsurancePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  status: () => Promise<Boolean>;
  companyName: () => Promise<String>;
}

export interface InsurancePreviousValuesSubscription
  extends Promise<AsyncIterator<InsurancePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  companyName: () => Promise<AsyncIterator<String>>;
}

export interface MedicalPractitionerSubscriptionPayload {
  mutation: MutationType;
  node: MedicalPractitioner;
  updatedFields: String[];
  previousValues: MedicalPractitionerPreviousValues;
}

export interface MedicalPractitionerSubscriptionPayloadPromise
  extends Promise<MedicalPractitionerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MedicalPractitionerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MedicalPractitionerPreviousValuesPromise>() => T;
}

export interface MedicalPractitionerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MedicalPractitionerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MedicalPractitionerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MedicalPractitionerPreviousValuesSubscription>() => T;
}

export interface MedicalPractitionerPreviousValues {
  id: ID_Output;
  mpId: Int;
  lastName: String;
  firstName: String;
  middleName: String;
  email: String;
  password: String;
  dob: DateTimeOutput;
  sex: String;
  address: String;
  degree: String;
  field: String;
  registeredAt: DateTimeOutput;
}

export interface MedicalPractitionerPreviousValuesPromise
  extends Promise<MedicalPractitionerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  mpId: () => Promise<Int>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  middleName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  sex: () => Promise<String>;
  address: () => Promise<String>;
  degree: () => Promise<String>;
  field: () => Promise<String>;
  registeredAt: () => Promise<DateTimeOutput>;
}

export interface MedicalPractitionerPreviousValuesSubscription
  extends Promise<AsyncIterator<MedicalPractitionerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  mpId: () => Promise<AsyncIterator<Int>>;
  lastName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  sex: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  degree: () => Promise<AsyncIterator<String>>;
  field: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PatientSubscriptionPayload {
  mutation: MutationType;
  node: Patient;
  updatedFields: String[];
  previousValues: PatientPreviousValues;
}

export interface PatientSubscriptionPayloadPromise
  extends Promise<PatientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PatientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PatientPreviousValuesPromise>() => T;
}

export interface PatientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PatientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PatientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PatientPreviousValuesSubscription>() => T;
}

export interface PatientPreviousValues {
  id: ID_Output;
  lastName: String;
  firstName: String;
  middleName: String;
  motherName: String;
  dob: DateTimeOutput;
  bloodGroup: String;
  sex: String;
  religion: String;
  maritalStatus: String;
  primaryLanguage: String;
  birthPlace: String;
  address: String;
  countryCode: Int;
  occupation: String;
  contact1: String;
  contact2: String;
  email: String;
  password: String;
  socioEconomicStatus: String;
  immunizationStatus: String;
  allergyStatus: Boolean;
  organDonorStatus: Boolean;
  PMH: String;
  DHx: String;
  Ca: String;
  IDDM: String;
  NIDDM: String;
  MI: String;
  AF: String;
  registeredAt: DateTimeOutput;
}

export interface PatientPreviousValuesPromise
  extends Promise<PatientPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  middleName: () => Promise<String>;
  motherName: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  bloodGroup: () => Promise<String>;
  sex: () => Promise<String>;
  religion: () => Promise<String>;
  maritalStatus: () => Promise<String>;
  primaryLanguage: () => Promise<String>;
  birthPlace: () => Promise<String>;
  address: () => Promise<String>;
  countryCode: () => Promise<Int>;
  occupation: () => Promise<String>;
  contact1: () => Promise<String>;
  contact2: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  socioEconomicStatus: () => Promise<String>;
  immunizationStatus: () => Promise<String>;
  allergyStatus: () => Promise<Boolean>;
  organDonorStatus: () => Promise<Boolean>;
  PMH: () => Promise<String>;
  DHx: () => Promise<String>;
  Ca: () => Promise<String>;
  IDDM: () => Promise<String>;
  NIDDM: () => Promise<String>;
  MI: () => Promise<String>;
  AF: () => Promise<String>;
  registeredAt: () => Promise<DateTimeOutput>;
}

export interface PatientPreviousValuesSubscription
  extends Promise<AsyncIterator<PatientPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lastName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  motherName: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  bloodGroup: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<String>>;
  religion: () => Promise<AsyncIterator<String>>;
  maritalStatus: () => Promise<AsyncIterator<String>>;
  primaryLanguage: () => Promise<AsyncIterator<String>>;
  birthPlace: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  countryCode: () => Promise<AsyncIterator<Int>>;
  occupation: () => Promise<AsyncIterator<String>>;
  contact1: () => Promise<AsyncIterator<String>>;
  contact2: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  socioEconomicStatus: () => Promise<AsyncIterator<String>>;
  immunizationStatus: () => Promise<AsyncIterator<String>>;
  allergyStatus: () => Promise<AsyncIterator<Boolean>>;
  organDonorStatus: () => Promise<AsyncIterator<Boolean>>;
  PMH: () => Promise<AsyncIterator<String>>;
  DHx: () => Promise<AsyncIterator<String>>;
  Ca: () => Promise<AsyncIterator<String>>;
  IDDM: () => Promise<AsyncIterator<String>>;
  NIDDM: () => Promise<AsyncIterator<String>>;
  MI: () => Promise<AsyncIterator<String>>;
  AF: () => Promise<AsyncIterator<String>>;
  registeredAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PatientCaseSubscriptionPayload {
  mutation: MutationType;
  node: PatientCase;
  updatedFields: String[];
  previousValues: PatientCasePreviousValues;
}

export interface PatientCaseSubscriptionPayloadPromise
  extends Promise<PatientCaseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PatientCasePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PatientCasePreviousValuesPromise>() => T;
}

export interface PatientCaseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PatientCaseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PatientCaseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PatientCasePreviousValuesSubscription>() => T;
}

export interface PatientCasePreviousValues {
  id: ID_Output;
  HPC: String;
  MoI?: String;
  DnV?: String;
  clinicNote: String;
  diagnosisType: String;
  currentClinicalStatus: String;
  createdAt: DateTimeOutput;
}

export interface PatientCasePreviousValuesPromise
  extends Promise<PatientCasePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  HPC: () => Promise<String>;
  MoI: () => Promise<String>;
  DnV: () => Promise<String>;
  clinicNote: () => Promise<String>;
  diagnosisType: () => Promise<String>;
  currentClinicalStatus: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PatientCasePreviousValuesSubscription
  extends Promise<AsyncIterator<PatientCasePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  HPC: () => Promise<AsyncIterator<String>>;
  MoI: () => Promise<AsyncIterator<String>>;
  DnV: () => Promise<AsyncIterator<String>>;
  clinicNote: () => Promise<AsyncIterator<String>>;
  diagnosisType: () => Promise<AsyncIterator<String>>;
  currentClinicalStatus: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PatientRecordSubscriptionPayload {
  mutation: MutationType;
  node: PatientRecord;
  updatedFields: String[];
  previousValues: PatientRecordPreviousValues;
}

export interface PatientRecordSubscriptionPayloadPromise
  extends Promise<PatientRecordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PatientRecordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PatientRecordPreviousValuesPromise>() => T;
}

export interface PatientRecordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PatientRecordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PatientRecordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PatientRecordPreviousValuesSubscription>() => T;
}

export interface PatientRecordPreviousValues {
  id: ID_Output;
  visitNo: Int;
  encounterDate: DateTimeOutput;
  observation: String;
  Tx: String;
  suggesstions?: String;
  cevsSp: Int;
  cevsDp: Int;
  cePr: Int;
  ceRr: Int;
  ceHeight: Int;
  ceWeight: Int;
  medication: String;
  advice?: String;
  query?: String;
  followUpObservation?: String;
}

export interface PatientRecordPreviousValuesPromise
  extends Promise<PatientRecordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  visitNo: () => Promise<Int>;
  encounterDate: () => Promise<DateTimeOutput>;
  observation: () => Promise<String>;
  Tx: () => Promise<String>;
  suggesstions: () => Promise<String>;
  cevsSp: () => Promise<Int>;
  cevsDp: () => Promise<Int>;
  cePr: () => Promise<Int>;
  ceRr: () => Promise<Int>;
  ceHeight: () => Promise<Int>;
  ceWeight: () => Promise<Int>;
  medication: () => Promise<String>;
  advice: () => Promise<String>;
  query: () => Promise<String>;
  followUpObservation: () => Promise<String>;
}

export interface PatientRecordPreviousValuesSubscription
  extends Promise<AsyncIterator<PatientRecordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  visitNo: () => Promise<AsyncIterator<Int>>;
  encounterDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  observation: () => Promise<AsyncIterator<String>>;
  Tx: () => Promise<AsyncIterator<String>>;
  suggesstions: () => Promise<AsyncIterator<String>>;
  cevsSp: () => Promise<AsyncIterator<Int>>;
  cevsDp: () => Promise<AsyncIterator<Int>>;
  cePr: () => Promise<AsyncIterator<Int>>;
  ceRr: () => Promise<AsyncIterator<Int>>;
  ceHeight: () => Promise<AsyncIterator<Int>>;
  ceWeight: () => Promise<AsyncIterator<Int>>;
  medication: () => Promise<AsyncIterator<String>>;
  advice: () => Promise<AsyncIterator<String>>;
  query: () => Promise<AsyncIterator<String>>;
  followUpObservation: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "IcdCodes",
    embedded: false
  },
  {
    name: "IcdSubCodes",
    embedded: false
  },
  {
    name: "Admin",
    embedded: false
  },
  {
    name: "MedicalPractitioner",
    embedded: false
  },
  {
    name: "Hospital",
    embedded: false
  },
  {
    name: "Patient",
    embedded: false
  },
  {
    name: "AccessRequest",
    embedded: false
  },
  {
    name: "PatientCase",
    embedded: false
  },
  {
    name: "PatientRecord",
    embedded: false
  },
  {
    name: "CareProvider",
    embedded: false
  },
  {
    name: "Insurance",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
