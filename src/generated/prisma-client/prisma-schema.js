module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AccessRequest {
  id: ID!
  medicalPractitionerFirstName: String!
  medicalPractitionerLastName: String!
  medicalPractitionerId: String!
}

type AccessRequestConnection {
  pageInfo: PageInfo!
  edges: [AccessRequestEdge]!
  aggregate: AggregateAccessRequest!
}

input AccessRequestCreateInput {
  id: ID
  medicalPractitionerFirstName: String!
  medicalPractitionerLastName: String!
  medicalPractitionerId: String!
}

input AccessRequestCreateManyInput {
  create: [AccessRequestCreateInput!]
  connect: [AccessRequestWhereUniqueInput!]
}

type AccessRequestEdge {
  node: AccessRequest!
  cursor: String!
}

enum AccessRequestOrderByInput {
  id_ASC
  id_DESC
  medicalPractitionerFirstName_ASC
  medicalPractitionerFirstName_DESC
  medicalPractitionerLastName_ASC
  medicalPractitionerLastName_DESC
  medicalPractitionerId_ASC
  medicalPractitionerId_DESC
}

type AccessRequestPreviousValues {
  id: ID!
  medicalPractitionerFirstName: String!
  medicalPractitionerLastName: String!
  medicalPractitionerId: String!
}

input AccessRequestScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  medicalPractitionerFirstName: String
  medicalPractitionerFirstName_not: String
  medicalPractitionerFirstName_in: [String!]
  medicalPractitionerFirstName_not_in: [String!]
  medicalPractitionerFirstName_lt: String
  medicalPractitionerFirstName_lte: String
  medicalPractitionerFirstName_gt: String
  medicalPractitionerFirstName_gte: String
  medicalPractitionerFirstName_contains: String
  medicalPractitionerFirstName_not_contains: String
  medicalPractitionerFirstName_starts_with: String
  medicalPractitionerFirstName_not_starts_with: String
  medicalPractitionerFirstName_ends_with: String
  medicalPractitionerFirstName_not_ends_with: String
  medicalPractitionerLastName: String
  medicalPractitionerLastName_not: String
  medicalPractitionerLastName_in: [String!]
  medicalPractitionerLastName_not_in: [String!]
  medicalPractitionerLastName_lt: String
  medicalPractitionerLastName_lte: String
  medicalPractitionerLastName_gt: String
  medicalPractitionerLastName_gte: String
  medicalPractitionerLastName_contains: String
  medicalPractitionerLastName_not_contains: String
  medicalPractitionerLastName_starts_with: String
  medicalPractitionerLastName_not_starts_with: String
  medicalPractitionerLastName_ends_with: String
  medicalPractitionerLastName_not_ends_with: String
  medicalPractitionerId: String
  medicalPractitionerId_not: String
  medicalPractitionerId_in: [String!]
  medicalPractitionerId_not_in: [String!]
  medicalPractitionerId_lt: String
  medicalPractitionerId_lte: String
  medicalPractitionerId_gt: String
  medicalPractitionerId_gte: String
  medicalPractitionerId_contains: String
  medicalPractitionerId_not_contains: String
  medicalPractitionerId_starts_with: String
  medicalPractitionerId_not_starts_with: String
  medicalPractitionerId_ends_with: String
  medicalPractitionerId_not_ends_with: String
  AND: [AccessRequestScalarWhereInput!]
  OR: [AccessRequestScalarWhereInput!]
  NOT: [AccessRequestScalarWhereInput!]
}

type AccessRequestSubscriptionPayload {
  mutation: MutationType!
  node: AccessRequest
  updatedFields: [String!]
  previousValues: AccessRequestPreviousValues
}

input AccessRequestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AccessRequestWhereInput
  AND: [AccessRequestSubscriptionWhereInput!]
  OR: [AccessRequestSubscriptionWhereInput!]
  NOT: [AccessRequestSubscriptionWhereInput!]
}

input AccessRequestUpdateDataInput {
  medicalPractitionerFirstName: String
  medicalPractitionerLastName: String
  medicalPractitionerId: String
}

input AccessRequestUpdateInput {
  medicalPractitionerFirstName: String
  medicalPractitionerLastName: String
  medicalPractitionerId: String
}

input AccessRequestUpdateManyDataInput {
  medicalPractitionerFirstName: String
  medicalPractitionerLastName: String
  medicalPractitionerId: String
}

input AccessRequestUpdateManyInput {
  create: [AccessRequestCreateInput!]
  update: [AccessRequestUpdateWithWhereUniqueNestedInput!]
  upsert: [AccessRequestUpsertWithWhereUniqueNestedInput!]
  delete: [AccessRequestWhereUniqueInput!]
  connect: [AccessRequestWhereUniqueInput!]
  set: [AccessRequestWhereUniqueInput!]
  disconnect: [AccessRequestWhereUniqueInput!]
  deleteMany: [AccessRequestScalarWhereInput!]
  updateMany: [AccessRequestUpdateManyWithWhereNestedInput!]
}

input AccessRequestUpdateManyMutationInput {
  medicalPractitionerFirstName: String
  medicalPractitionerLastName: String
  medicalPractitionerId: String
}

input AccessRequestUpdateManyWithWhereNestedInput {
  where: AccessRequestScalarWhereInput!
  data: AccessRequestUpdateManyDataInput!
}

input AccessRequestUpdateWithWhereUniqueNestedInput {
  where: AccessRequestWhereUniqueInput!
  data: AccessRequestUpdateDataInput!
}

input AccessRequestUpsertWithWhereUniqueNestedInput {
  where: AccessRequestWhereUniqueInput!
  update: AccessRequestUpdateDataInput!
  create: AccessRequestCreateInput!
}

input AccessRequestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  medicalPractitionerFirstName: String
  medicalPractitionerFirstName_not: String
  medicalPractitionerFirstName_in: [String!]
  medicalPractitionerFirstName_not_in: [String!]
  medicalPractitionerFirstName_lt: String
  medicalPractitionerFirstName_lte: String
  medicalPractitionerFirstName_gt: String
  medicalPractitionerFirstName_gte: String
  medicalPractitionerFirstName_contains: String
  medicalPractitionerFirstName_not_contains: String
  medicalPractitionerFirstName_starts_with: String
  medicalPractitionerFirstName_not_starts_with: String
  medicalPractitionerFirstName_ends_with: String
  medicalPractitionerFirstName_not_ends_with: String
  medicalPractitionerLastName: String
  medicalPractitionerLastName_not: String
  medicalPractitionerLastName_in: [String!]
  medicalPractitionerLastName_not_in: [String!]
  medicalPractitionerLastName_lt: String
  medicalPractitionerLastName_lte: String
  medicalPractitionerLastName_gt: String
  medicalPractitionerLastName_gte: String
  medicalPractitionerLastName_contains: String
  medicalPractitionerLastName_not_contains: String
  medicalPractitionerLastName_starts_with: String
  medicalPractitionerLastName_not_starts_with: String
  medicalPractitionerLastName_ends_with: String
  medicalPractitionerLastName_not_ends_with: String
  medicalPractitionerId: String
  medicalPractitionerId_not: String
  medicalPractitionerId_in: [String!]
  medicalPractitionerId_not_in: [String!]
  medicalPractitionerId_lt: String
  medicalPractitionerId_lte: String
  medicalPractitionerId_gt: String
  medicalPractitionerId_gte: String
  medicalPractitionerId_contains: String
  medicalPractitionerId_not_contains: String
  medicalPractitionerId_starts_with: String
  medicalPractitionerId_not_starts_with: String
  medicalPractitionerId_ends_with: String
  medicalPractitionerId_not_ends_with: String
  AND: [AccessRequestWhereInput!]
  OR: [AccessRequestWhereInput!]
  NOT: [AccessRequestWhereInput!]
}

input AccessRequestWhereUniqueInput {
  id: ID
}

type Admin {
  id: ID!
  email: String!
  password: String!
}

type AdminConnection {
  pageInfo: PageInfo!
  edges: [AdminEdge]!
  aggregate: AggregateAdmin!
}

input AdminCreateInput {
  id: ID
  email: String!
  password: String!
}

type AdminEdge {
  node: Admin!
  cursor: String!
}

enum AdminOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type AdminPreviousValues {
  id: ID!
  email: String!
  password: String!
}

type AdminSubscriptionPayload {
  mutation: MutationType!
  node: Admin
  updatedFields: [String!]
  previousValues: AdminPreviousValues
}

input AdminSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AdminWhereInput
  AND: [AdminSubscriptionWhereInput!]
  OR: [AdminSubscriptionWhereInput!]
  NOT: [AdminSubscriptionWhereInput!]
}

input AdminUpdateInput {
  email: String
  password: String
}

input AdminUpdateManyMutationInput {
  email: String
  password: String
}

input AdminWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
}

input AdminWhereUniqueInput {
  id: ID
  email: String
}

type AggregateAccessRequest {
  count: Int!
}

type AggregateAdmin {
  count: Int!
}

type AggregateCareProvider {
  count: Int!
}

type AggregateHospital {
  count: Int!
}

type AggregateIcdCodes {
  count: Int!
}

type AggregateIcdSubCodes {
  count: Int!
}

type AggregateInsurance {
  count: Int!
}

type AggregateMedicalPractitioner {
  count: Int!
}

type AggregatePatient {
  count: Int!
}

type AggregatePatientCase {
  count: Int!
}

type AggregatePatientRecord {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type CareProvider {
  id: ID!
  firstName: String!
  lastName: String!
  middleName: String!
  address: String!
  cityId: Int!
  stateId: Int!
  pinCode: Int!
  countryCode: Int!
  contact1: String!
  email: String!
}

type CareProviderConnection {
  pageInfo: PageInfo!
  edges: [CareProviderEdge]!
  aggregate: AggregateCareProvider!
}

input CareProviderCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  middleName: String!
  address: String!
  cityId: Int!
  stateId: Int!
  pinCode: Int!
  countryCode: Int!
  contact1: String!
  email: String!
}

input CareProviderCreateOneInput {
  create: CareProviderCreateInput
  connect: CareProviderWhereUniqueInput
}

type CareProviderEdge {
  node: CareProvider!
  cursor: String!
}

enum CareProviderOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  middleName_ASC
  middleName_DESC
  address_ASC
  address_DESC
  cityId_ASC
  cityId_DESC
  stateId_ASC
  stateId_DESC
  pinCode_ASC
  pinCode_DESC
  countryCode_ASC
  countryCode_DESC
  contact1_ASC
  contact1_DESC
  email_ASC
  email_DESC
}

type CareProviderPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  middleName: String!
  address: String!
  cityId: Int!
  stateId: Int!
  pinCode: Int!
  countryCode: Int!
  contact1: String!
  email: String!
}

type CareProviderSubscriptionPayload {
  mutation: MutationType!
  node: CareProvider
  updatedFields: [String!]
  previousValues: CareProviderPreviousValues
}

input CareProviderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CareProviderWhereInput
  AND: [CareProviderSubscriptionWhereInput!]
  OR: [CareProviderSubscriptionWhereInput!]
  NOT: [CareProviderSubscriptionWhereInput!]
}

input CareProviderUpdateDataInput {
  firstName: String
  lastName: String
  middleName: String
  address: String
  cityId: Int
  stateId: Int
  pinCode: Int
  countryCode: Int
  contact1: String
  email: String
}

input CareProviderUpdateInput {
  firstName: String
  lastName: String
  middleName: String
  address: String
  cityId: Int
  stateId: Int
  pinCode: Int
  countryCode: Int
  contact1: String
  email: String
}

input CareProviderUpdateManyMutationInput {
  firstName: String
  lastName: String
  middleName: String
  address: String
  cityId: Int
  stateId: Int
  pinCode: Int
  countryCode: Int
  contact1: String
  email: String
}

input CareProviderUpdateOneInput {
  create: CareProviderCreateInput
  update: CareProviderUpdateDataInput
  upsert: CareProviderUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CareProviderWhereUniqueInput
}

input CareProviderUpsertNestedInput {
  update: CareProviderUpdateDataInput!
  create: CareProviderCreateInput!
}

input CareProviderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  middleName: String
  middleName_not: String
  middleName_in: [String!]
  middleName_not_in: [String!]
  middleName_lt: String
  middleName_lte: String
  middleName_gt: String
  middleName_gte: String
  middleName_contains: String
  middleName_not_contains: String
  middleName_starts_with: String
  middleName_not_starts_with: String
  middleName_ends_with: String
  middleName_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  cityId: Int
  cityId_not: Int
  cityId_in: [Int!]
  cityId_not_in: [Int!]
  cityId_lt: Int
  cityId_lte: Int
  cityId_gt: Int
  cityId_gte: Int
  stateId: Int
  stateId_not: Int
  stateId_in: [Int!]
  stateId_not_in: [Int!]
  stateId_lt: Int
  stateId_lte: Int
  stateId_gt: Int
  stateId_gte: Int
  pinCode: Int
  pinCode_not: Int
  pinCode_in: [Int!]
  pinCode_not_in: [Int!]
  pinCode_lt: Int
  pinCode_lte: Int
  pinCode_gt: Int
  pinCode_gte: Int
  countryCode: Int
  countryCode_not: Int
  countryCode_in: [Int!]
  countryCode_not_in: [Int!]
  countryCode_lt: Int
  countryCode_lte: Int
  countryCode_gt: Int
  countryCode_gte: Int
  contact1: String
  contact1_not: String
  contact1_in: [String!]
  contact1_not_in: [String!]
  contact1_lt: String
  contact1_lte: String
  contact1_gt: String
  contact1_gte: String
  contact1_contains: String
  contact1_not_contains: String
  contact1_starts_with: String
  contact1_not_starts_with: String
  contact1_ends_with: String
  contact1_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  AND: [CareProviderWhereInput!]
  OR: [CareProviderWhereInput!]
  NOT: [CareProviderWhereInput!]
}

input CareProviderWhereUniqueInput {
  id: ID
}

scalar DateTime

type Hospital {
  id: ID!
  name: String!
  address: String!
  city: String!
  district: String!
  pincode: Int!
  countryCode: Int!
}

type HospitalConnection {
  pageInfo: PageInfo!
  edges: [HospitalEdge]!
  aggregate: AggregateHospital!
}

input HospitalCreateInput {
  id: ID
  name: String!
  address: String!
  city: String!
  district: String!
  pincode: Int!
  countryCode: Int!
}

input HospitalCreateOneInput {
  create: HospitalCreateInput
  connect: HospitalWhereUniqueInput
}

type HospitalEdge {
  node: Hospital!
  cursor: String!
}

enum HospitalOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  address_ASC
  address_DESC
  city_ASC
  city_DESC
  district_ASC
  district_DESC
  pincode_ASC
  pincode_DESC
  countryCode_ASC
  countryCode_DESC
}

type HospitalPreviousValues {
  id: ID!
  name: String!
  address: String!
  city: String!
  district: String!
  pincode: Int!
  countryCode: Int!
}

type HospitalSubscriptionPayload {
  mutation: MutationType!
  node: Hospital
  updatedFields: [String!]
  previousValues: HospitalPreviousValues
}

input HospitalSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HospitalWhereInput
  AND: [HospitalSubscriptionWhereInput!]
  OR: [HospitalSubscriptionWhereInput!]
  NOT: [HospitalSubscriptionWhereInput!]
}

input HospitalUpdateDataInput {
  name: String
  address: String
  city: String
  district: String
  pincode: Int
  countryCode: Int
}

input HospitalUpdateInput {
  name: String
  address: String
  city: String
  district: String
  pincode: Int
  countryCode: Int
}

input HospitalUpdateManyMutationInput {
  name: String
  address: String
  city: String
  district: String
  pincode: Int
  countryCode: Int
}

input HospitalUpdateOneRequiredInput {
  create: HospitalCreateInput
  update: HospitalUpdateDataInput
  upsert: HospitalUpsertNestedInput
  connect: HospitalWhereUniqueInput
}

input HospitalUpsertNestedInput {
  update: HospitalUpdateDataInput!
  create: HospitalCreateInput!
}

input HospitalWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  district: String
  district_not: String
  district_in: [String!]
  district_not_in: [String!]
  district_lt: String
  district_lte: String
  district_gt: String
  district_gte: String
  district_contains: String
  district_not_contains: String
  district_starts_with: String
  district_not_starts_with: String
  district_ends_with: String
  district_not_ends_with: String
  pincode: Int
  pincode_not: Int
  pincode_in: [Int!]
  pincode_not_in: [Int!]
  pincode_lt: Int
  pincode_lte: Int
  pincode_gt: Int
  pincode_gte: Int
  countryCode: Int
  countryCode_not: Int
  countryCode_in: [Int!]
  countryCode_not_in: [Int!]
  countryCode_lt: Int
  countryCode_lte: Int
  countryCode_gt: Int
  countryCode_gte: Int
  AND: [HospitalWhereInput!]
  OR: [HospitalWhereInput!]
  NOT: [HospitalWhereInput!]
}

input HospitalWhereUniqueInput {
  id: ID
}

type IcdCodes {
  id: ID!
  icdCode: String!
  commonName: String!
}

type IcdCodesConnection {
  pageInfo: PageInfo!
  edges: [IcdCodesEdge]!
  aggregate: AggregateIcdCodes!
}

input IcdCodesCreateInput {
  id: ID
  icdCode: String!
  commonName: String!
}

input IcdCodesCreateOneInput {
  create: IcdCodesCreateInput
  connect: IcdCodesWhereUniqueInput
}

type IcdCodesEdge {
  node: IcdCodes!
  cursor: String!
}

enum IcdCodesOrderByInput {
  id_ASC
  id_DESC
  icdCode_ASC
  icdCode_DESC
  commonName_ASC
  commonName_DESC
}

type IcdCodesPreviousValues {
  id: ID!
  icdCode: String!
  commonName: String!
}

type IcdCodesSubscriptionPayload {
  mutation: MutationType!
  node: IcdCodes
  updatedFields: [String!]
  previousValues: IcdCodesPreviousValues
}

input IcdCodesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IcdCodesWhereInput
  AND: [IcdCodesSubscriptionWhereInput!]
  OR: [IcdCodesSubscriptionWhereInput!]
  NOT: [IcdCodesSubscriptionWhereInput!]
}

input IcdCodesUpdateDataInput {
  icdCode: String
  commonName: String
}

input IcdCodesUpdateInput {
  icdCode: String
  commonName: String
}

input IcdCodesUpdateManyMutationInput {
  icdCode: String
  commonName: String
}

input IcdCodesUpdateOneRequiredInput {
  create: IcdCodesCreateInput
  update: IcdCodesUpdateDataInput
  upsert: IcdCodesUpsertNestedInput
  connect: IcdCodesWhereUniqueInput
}

input IcdCodesUpsertNestedInput {
  update: IcdCodesUpdateDataInput!
  create: IcdCodesCreateInput!
}

input IcdCodesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  icdCode: String
  icdCode_not: String
  icdCode_in: [String!]
  icdCode_not_in: [String!]
  icdCode_lt: String
  icdCode_lte: String
  icdCode_gt: String
  icdCode_gte: String
  icdCode_contains: String
  icdCode_not_contains: String
  icdCode_starts_with: String
  icdCode_not_starts_with: String
  icdCode_ends_with: String
  icdCode_not_ends_with: String
  commonName: String
  commonName_not: String
  commonName_in: [String!]
  commonName_not_in: [String!]
  commonName_lt: String
  commonName_lte: String
  commonName_gt: String
  commonName_gte: String
  commonName_contains: String
  commonName_not_contains: String
  commonName_starts_with: String
  commonName_not_starts_with: String
  commonName_ends_with: String
  commonName_not_ends_with: String
  AND: [IcdCodesWhereInput!]
  OR: [IcdCodesWhereInput!]
  NOT: [IcdCodesWhereInput!]
}

input IcdCodesWhereUniqueInput {
  id: ID
  icdCode: String
}

type IcdSubCodes {
  id: ID!
  icdSubCode: String!
  scientificName: String!
  icdCode: IcdCodes!
}

type IcdSubCodesConnection {
  pageInfo: PageInfo!
  edges: [IcdSubCodesEdge]!
  aggregate: AggregateIcdSubCodes!
}

input IcdSubCodesCreateInput {
  id: ID
  icdSubCode: String!
  scientificName: String!
  icdCode: IcdCodesCreateOneInput!
}

input IcdSubCodesCreateOneInput {
  create: IcdSubCodesCreateInput
  connect: IcdSubCodesWhereUniqueInput
}

type IcdSubCodesEdge {
  node: IcdSubCodes!
  cursor: String!
}

enum IcdSubCodesOrderByInput {
  id_ASC
  id_DESC
  icdSubCode_ASC
  icdSubCode_DESC
  scientificName_ASC
  scientificName_DESC
}

type IcdSubCodesPreviousValues {
  id: ID!
  icdSubCode: String!
  scientificName: String!
}

type IcdSubCodesSubscriptionPayload {
  mutation: MutationType!
  node: IcdSubCodes
  updatedFields: [String!]
  previousValues: IcdSubCodesPreviousValues
}

input IcdSubCodesSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IcdSubCodesWhereInput
  AND: [IcdSubCodesSubscriptionWhereInput!]
  OR: [IcdSubCodesSubscriptionWhereInput!]
  NOT: [IcdSubCodesSubscriptionWhereInput!]
}

input IcdSubCodesUpdateDataInput {
  icdSubCode: String
  scientificName: String
  icdCode: IcdCodesUpdateOneRequiredInput
}

input IcdSubCodesUpdateInput {
  icdSubCode: String
  scientificName: String
  icdCode: IcdCodesUpdateOneRequiredInput
}

input IcdSubCodesUpdateManyMutationInput {
  icdSubCode: String
  scientificName: String
}

input IcdSubCodesUpdateOneRequiredInput {
  create: IcdSubCodesCreateInput
  update: IcdSubCodesUpdateDataInput
  upsert: IcdSubCodesUpsertNestedInput
  connect: IcdSubCodesWhereUniqueInput
}

input IcdSubCodesUpsertNestedInput {
  update: IcdSubCodesUpdateDataInput!
  create: IcdSubCodesCreateInput!
}

input IcdSubCodesWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  icdSubCode: String
  icdSubCode_not: String
  icdSubCode_in: [String!]
  icdSubCode_not_in: [String!]
  icdSubCode_lt: String
  icdSubCode_lte: String
  icdSubCode_gt: String
  icdSubCode_gte: String
  icdSubCode_contains: String
  icdSubCode_not_contains: String
  icdSubCode_starts_with: String
  icdSubCode_not_starts_with: String
  icdSubCode_ends_with: String
  icdSubCode_not_ends_with: String
  scientificName: String
  scientificName_not: String
  scientificName_in: [String!]
  scientificName_not_in: [String!]
  scientificName_lt: String
  scientificName_lte: String
  scientificName_gt: String
  scientificName_gte: String
  scientificName_contains: String
  scientificName_not_contains: String
  scientificName_starts_with: String
  scientificName_not_starts_with: String
  scientificName_ends_with: String
  scientificName_not_ends_with: String
  icdCode: IcdCodesWhereInput
  AND: [IcdSubCodesWhereInput!]
  OR: [IcdSubCodesWhereInput!]
  NOT: [IcdSubCodesWhereInput!]
}

input IcdSubCodesWhereUniqueInput {
  id: ID
  icdSubCode: String
}

type Insurance {
  id: ID!
  status: Boolean!
  companyName: String!
}

type InsuranceConnection {
  pageInfo: PageInfo!
  edges: [InsuranceEdge]!
  aggregate: AggregateInsurance!
}

input InsuranceCreateInput {
  id: ID
  status: Boolean!
  companyName: String!
}

input InsuranceCreateOneInput {
  create: InsuranceCreateInput
  connect: InsuranceWhereUniqueInput
}

type InsuranceEdge {
  node: Insurance!
  cursor: String!
}

enum InsuranceOrderByInput {
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  companyName_ASC
  companyName_DESC
}

type InsurancePreviousValues {
  id: ID!
  status: Boolean!
  companyName: String!
}

type InsuranceSubscriptionPayload {
  mutation: MutationType!
  node: Insurance
  updatedFields: [String!]
  previousValues: InsurancePreviousValues
}

input InsuranceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InsuranceWhereInput
  AND: [InsuranceSubscriptionWhereInput!]
  OR: [InsuranceSubscriptionWhereInput!]
  NOT: [InsuranceSubscriptionWhereInput!]
}

input InsuranceUpdateDataInput {
  status: Boolean
  companyName: String
}

input InsuranceUpdateInput {
  status: Boolean
  companyName: String
}

input InsuranceUpdateManyMutationInput {
  status: Boolean
  companyName: String
}

input InsuranceUpdateOneInput {
  create: InsuranceCreateInput
  update: InsuranceUpdateDataInput
  upsert: InsuranceUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: InsuranceWhereUniqueInput
}

input InsuranceUpsertNestedInput {
  update: InsuranceUpdateDataInput!
  create: InsuranceCreateInput!
}

input InsuranceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  status: Boolean
  status_not: Boolean
  companyName: String
  companyName_not: String
  companyName_in: [String!]
  companyName_not_in: [String!]
  companyName_lt: String
  companyName_lte: String
  companyName_gt: String
  companyName_gte: String
  companyName_contains: String
  companyName_not_contains: String
  companyName_starts_with: String
  companyName_not_starts_with: String
  companyName_ends_with: String
  companyName_not_ends_with: String
  AND: [InsuranceWhereInput!]
  OR: [InsuranceWhereInput!]
  NOT: [InsuranceWhereInput!]
}

input InsuranceWhereUniqueInput {
  id: ID
}

scalar Long

type MedicalPractitioner {
  id: ID!
  mpId: Int!
  lastName: String!
  firstName: String!
  middleName: String!
  email: String!
  password: String!
  dob: DateTime!
  sex: String!
  address: String!
  degree: String!
  field: String!
  hospital: Hospital!
  registeredAt: DateTime!
  accessiblePatients(where: PatientWhereInput, orderBy: PatientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Patient!]
}

type MedicalPractitionerConnection {
  pageInfo: PageInfo!
  edges: [MedicalPractitionerEdge]!
  aggregate: AggregateMedicalPractitioner!
}

input MedicalPractitionerCreateInput {
  id: ID
  mpId: Int!
  lastName: String!
  firstName: String!
  middleName: String!
  email: String!
  password: String!
  dob: DateTime!
  sex: String!
  address: String!
  degree: String!
  field: String!
  hospital: HospitalCreateOneInput!
  accessiblePatients: PatientCreateManyInput
}

input MedicalPractitionerCreateOneInput {
  create: MedicalPractitionerCreateInput
  connect: MedicalPractitionerWhereUniqueInput
}

type MedicalPractitionerEdge {
  node: MedicalPractitioner!
  cursor: String!
}

enum MedicalPractitionerOrderByInput {
  id_ASC
  id_DESC
  mpId_ASC
  mpId_DESC
  lastName_ASC
  lastName_DESC
  firstName_ASC
  firstName_DESC
  middleName_ASC
  middleName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  dob_ASC
  dob_DESC
  sex_ASC
  sex_DESC
  address_ASC
  address_DESC
  degree_ASC
  degree_DESC
  field_ASC
  field_DESC
  registeredAt_ASC
  registeredAt_DESC
}

type MedicalPractitionerPreviousValues {
  id: ID!
  mpId: Int!
  lastName: String!
  firstName: String!
  middleName: String!
  email: String!
  password: String!
  dob: DateTime!
  sex: String!
  address: String!
  degree: String!
  field: String!
  registeredAt: DateTime!
}

type MedicalPractitionerSubscriptionPayload {
  mutation: MutationType!
  node: MedicalPractitioner
  updatedFields: [String!]
  previousValues: MedicalPractitionerPreviousValues
}

input MedicalPractitionerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MedicalPractitionerWhereInput
  AND: [MedicalPractitionerSubscriptionWhereInput!]
  OR: [MedicalPractitionerSubscriptionWhereInput!]
  NOT: [MedicalPractitionerSubscriptionWhereInput!]
}

input MedicalPractitionerUpdateDataInput {
  mpId: Int
  lastName: String
  firstName: String
  middleName: String
  email: String
  password: String
  dob: DateTime
  sex: String
  address: String
  degree: String
  field: String
  hospital: HospitalUpdateOneRequiredInput
  accessiblePatients: PatientUpdateManyInput
}

input MedicalPractitionerUpdateInput {
  mpId: Int
  lastName: String
  firstName: String
  middleName: String
  email: String
  password: String
  dob: DateTime
  sex: String
  address: String
  degree: String
  field: String
  hospital: HospitalUpdateOneRequiredInput
  accessiblePatients: PatientUpdateManyInput
}

input MedicalPractitionerUpdateManyMutationInput {
  mpId: Int
  lastName: String
  firstName: String
  middleName: String
  email: String
  password: String
  dob: DateTime
  sex: String
  address: String
  degree: String
  field: String
}

input MedicalPractitionerUpdateOneRequiredInput {
  create: MedicalPractitionerCreateInput
  update: MedicalPractitionerUpdateDataInput
  upsert: MedicalPractitionerUpsertNestedInput
  connect: MedicalPractitionerWhereUniqueInput
}

input MedicalPractitionerUpsertNestedInput {
  update: MedicalPractitionerUpdateDataInput!
  create: MedicalPractitionerCreateInput!
}

input MedicalPractitionerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  mpId: Int
  mpId_not: Int
  mpId_in: [Int!]
  mpId_not_in: [Int!]
  mpId_lt: Int
  mpId_lte: Int
  mpId_gt: Int
  mpId_gte: Int
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  middleName: String
  middleName_not: String
  middleName_in: [String!]
  middleName_not_in: [String!]
  middleName_lt: String
  middleName_lte: String
  middleName_gt: String
  middleName_gte: String
  middleName_contains: String
  middleName_not_contains: String
  middleName_starts_with: String
  middleName_not_starts_with: String
  middleName_ends_with: String
  middleName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  dob: DateTime
  dob_not: DateTime
  dob_in: [DateTime!]
  dob_not_in: [DateTime!]
  dob_lt: DateTime
  dob_lte: DateTime
  dob_gt: DateTime
  dob_gte: DateTime
  sex: String
  sex_not: String
  sex_in: [String!]
  sex_not_in: [String!]
  sex_lt: String
  sex_lte: String
  sex_gt: String
  sex_gte: String
  sex_contains: String
  sex_not_contains: String
  sex_starts_with: String
  sex_not_starts_with: String
  sex_ends_with: String
  sex_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  degree: String
  degree_not: String
  degree_in: [String!]
  degree_not_in: [String!]
  degree_lt: String
  degree_lte: String
  degree_gt: String
  degree_gte: String
  degree_contains: String
  degree_not_contains: String
  degree_starts_with: String
  degree_not_starts_with: String
  degree_ends_with: String
  degree_not_ends_with: String
  field: String
  field_not: String
  field_in: [String!]
  field_not_in: [String!]
  field_lt: String
  field_lte: String
  field_gt: String
  field_gte: String
  field_contains: String
  field_not_contains: String
  field_starts_with: String
  field_not_starts_with: String
  field_ends_with: String
  field_not_ends_with: String
  hospital: HospitalWhereInput
  registeredAt: DateTime
  registeredAt_not: DateTime
  registeredAt_in: [DateTime!]
  registeredAt_not_in: [DateTime!]
  registeredAt_lt: DateTime
  registeredAt_lte: DateTime
  registeredAt_gt: DateTime
  registeredAt_gte: DateTime
  accessiblePatients_every: PatientWhereInput
  accessiblePatients_some: PatientWhereInput
  accessiblePatients_none: PatientWhereInput
  AND: [MedicalPractitionerWhereInput!]
  OR: [MedicalPractitionerWhereInput!]
  NOT: [MedicalPractitionerWhereInput!]
}

input MedicalPractitionerWhereUniqueInput {
  id: ID
  mpId: Int
  email: String
}

type Mutation {
  createAccessRequest(data: AccessRequestCreateInput!): AccessRequest!
  updateAccessRequest(data: AccessRequestUpdateInput!, where: AccessRequestWhereUniqueInput!): AccessRequest
  updateManyAccessRequests(data: AccessRequestUpdateManyMutationInput!, where: AccessRequestWhereInput): BatchPayload!
  upsertAccessRequest(where: AccessRequestWhereUniqueInput!, create: AccessRequestCreateInput!, update: AccessRequestUpdateInput!): AccessRequest!
  deleteAccessRequest(where: AccessRequestWhereUniqueInput!): AccessRequest
  deleteManyAccessRequests(where: AccessRequestWhereInput): BatchPayload!
  createAdmin(data: AdminCreateInput!): Admin!
  updateAdmin(data: AdminUpdateInput!, where: AdminWhereUniqueInput!): Admin
  updateManyAdmins(data: AdminUpdateManyMutationInput!, where: AdminWhereInput): BatchPayload!
  upsertAdmin(where: AdminWhereUniqueInput!, create: AdminCreateInput!, update: AdminUpdateInput!): Admin!
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteManyAdmins(where: AdminWhereInput): BatchPayload!
  createCareProvider(data: CareProviderCreateInput!): CareProvider!
  updateCareProvider(data: CareProviderUpdateInput!, where: CareProviderWhereUniqueInput!): CareProvider
  updateManyCareProviders(data: CareProviderUpdateManyMutationInput!, where: CareProviderWhereInput): BatchPayload!
  upsertCareProvider(where: CareProviderWhereUniqueInput!, create: CareProviderCreateInput!, update: CareProviderUpdateInput!): CareProvider!
  deleteCareProvider(where: CareProviderWhereUniqueInput!): CareProvider
  deleteManyCareProviders(where: CareProviderWhereInput): BatchPayload!
  createHospital(data: HospitalCreateInput!): Hospital!
  updateHospital(data: HospitalUpdateInput!, where: HospitalWhereUniqueInput!): Hospital
  updateManyHospitals(data: HospitalUpdateManyMutationInput!, where: HospitalWhereInput): BatchPayload!
  upsertHospital(where: HospitalWhereUniqueInput!, create: HospitalCreateInput!, update: HospitalUpdateInput!): Hospital!
  deleteHospital(where: HospitalWhereUniqueInput!): Hospital
  deleteManyHospitals(where: HospitalWhereInput): BatchPayload!
  createIcdCodes(data: IcdCodesCreateInput!): IcdCodes!
  updateIcdCodes(data: IcdCodesUpdateInput!, where: IcdCodesWhereUniqueInput!): IcdCodes
  updateManyIcdCodeses(data: IcdCodesUpdateManyMutationInput!, where: IcdCodesWhereInput): BatchPayload!
  upsertIcdCodes(where: IcdCodesWhereUniqueInput!, create: IcdCodesCreateInput!, update: IcdCodesUpdateInput!): IcdCodes!
  deleteIcdCodes(where: IcdCodesWhereUniqueInput!): IcdCodes
  deleteManyIcdCodeses(where: IcdCodesWhereInput): BatchPayload!
  createIcdSubCodes(data: IcdSubCodesCreateInput!): IcdSubCodes!
  updateIcdSubCodes(data: IcdSubCodesUpdateInput!, where: IcdSubCodesWhereUniqueInput!): IcdSubCodes
  updateManyIcdSubCodeses(data: IcdSubCodesUpdateManyMutationInput!, where: IcdSubCodesWhereInput): BatchPayload!
  upsertIcdSubCodes(where: IcdSubCodesWhereUniqueInput!, create: IcdSubCodesCreateInput!, update: IcdSubCodesUpdateInput!): IcdSubCodes!
  deleteIcdSubCodes(where: IcdSubCodesWhereUniqueInput!): IcdSubCodes
  deleteManyIcdSubCodeses(where: IcdSubCodesWhereInput): BatchPayload!
  createInsurance(data: InsuranceCreateInput!): Insurance!
  updateInsurance(data: InsuranceUpdateInput!, where: InsuranceWhereUniqueInput!): Insurance
  updateManyInsurances(data: InsuranceUpdateManyMutationInput!, where: InsuranceWhereInput): BatchPayload!
  upsertInsurance(where: InsuranceWhereUniqueInput!, create: InsuranceCreateInput!, update: InsuranceUpdateInput!): Insurance!
  deleteInsurance(where: InsuranceWhereUniqueInput!): Insurance
  deleteManyInsurances(where: InsuranceWhereInput): BatchPayload!
  createMedicalPractitioner(data: MedicalPractitionerCreateInput!): MedicalPractitioner!
  updateMedicalPractitioner(data: MedicalPractitionerUpdateInput!, where: MedicalPractitionerWhereUniqueInput!): MedicalPractitioner
  updateManyMedicalPractitioners(data: MedicalPractitionerUpdateManyMutationInput!, where: MedicalPractitionerWhereInput): BatchPayload!
  upsertMedicalPractitioner(where: MedicalPractitionerWhereUniqueInput!, create: MedicalPractitionerCreateInput!, update: MedicalPractitionerUpdateInput!): MedicalPractitioner!
  deleteMedicalPractitioner(where: MedicalPractitionerWhereUniqueInput!): MedicalPractitioner
  deleteManyMedicalPractitioners(where: MedicalPractitionerWhereInput): BatchPayload!
  createPatient(data: PatientCreateInput!): Patient!
  updatePatient(data: PatientUpdateInput!, where: PatientWhereUniqueInput!): Patient
  updateManyPatients(data: PatientUpdateManyMutationInput!, where: PatientWhereInput): BatchPayload!
  upsertPatient(where: PatientWhereUniqueInput!, create: PatientCreateInput!, update: PatientUpdateInput!): Patient!
  deletePatient(where: PatientWhereUniqueInput!): Patient
  deleteManyPatients(where: PatientWhereInput): BatchPayload!
  createPatientCase(data: PatientCaseCreateInput!): PatientCase!
  updatePatientCase(data: PatientCaseUpdateInput!, where: PatientCaseWhereUniqueInput!): PatientCase
  updateManyPatientCases(data: PatientCaseUpdateManyMutationInput!, where: PatientCaseWhereInput): BatchPayload!
  upsertPatientCase(where: PatientCaseWhereUniqueInput!, create: PatientCaseCreateInput!, update: PatientCaseUpdateInput!): PatientCase!
  deletePatientCase(where: PatientCaseWhereUniqueInput!): PatientCase
  deleteManyPatientCases(where: PatientCaseWhereInput): BatchPayload!
  createPatientRecord(data: PatientRecordCreateInput!): PatientRecord!
  updatePatientRecord(data: PatientRecordUpdateInput!, where: PatientRecordWhereUniqueInput!): PatientRecord
  updateManyPatientRecords(data: PatientRecordUpdateManyMutationInput!, where: PatientRecordWhereInput): BatchPayload!
  upsertPatientRecord(where: PatientRecordWhereUniqueInput!, create: PatientRecordCreateInput!, update: PatientRecordUpdateInput!): PatientRecord!
  deletePatientRecord(where: PatientRecordWhereUniqueInput!): PatientRecord
  deleteManyPatientRecords(where: PatientRecordWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Patient {
  id: ID!
  lastName: String!
  firstName: String!
  middleName: String!
  motherName: String!
  dob: DateTime!
  bloodGroup: String!
  sex: String!
  religion: String!
  maritalStatus: String!
  primaryLanguage: String!
  birthPlace: String!
  address: String!
  countryCode: Int!
  occupation: String!
  contact1: String!
  contact2: String!
  email: String!
  password: String!
  socioEconomicStatus: String!
  immunizationStatus: String!
  allergyStatus: Boolean!
  organDonorStatus: Boolean!
  PMH: String!
  DHx: String!
  Ca: String!
  IDDM: String!
  NIDDM: String!
  MI: String!
  AF: String!
  registeredAt: DateTime!
  careProvider: CareProvider
  insurance: Insurance
  patientCase: PatientCase
  accessRequests(where: AccessRequestWhereInput, orderBy: AccessRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AccessRequest!]
}

type PatientCase {
  id: ID!
  mp: MedicalPractitioner!
  icdCode: IcdCodes!
  icdSubCode: IcdSubCodes!
  hospital: Hospital!
  HPC: String!
  MoI: String
  DnV: String
  clinicNote: String!
  diagnosisType: String!
  currentClinicalStatus: String!
  createdAt: DateTime!
  records(where: PatientRecordWhereInput, orderBy: PatientRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PatientRecord!]
}

type PatientCaseConnection {
  pageInfo: PageInfo!
  edges: [PatientCaseEdge]!
  aggregate: AggregatePatientCase!
}

input PatientCaseCreateInput {
  id: ID
  mp: MedicalPractitionerCreateOneInput!
  icdCode: IcdCodesCreateOneInput!
  icdSubCode: IcdSubCodesCreateOneInput!
  hospital: HospitalCreateOneInput!
  HPC: String!
  MoI: String
  DnV: String
  clinicNote: String!
  diagnosisType: String!
  currentClinicalStatus: String!
  records: PatientRecordCreateManyInput
}

input PatientCaseCreateOneInput {
  create: PatientCaseCreateInput
  connect: PatientCaseWhereUniqueInput
}

type PatientCaseEdge {
  node: PatientCase!
  cursor: String!
}

enum PatientCaseOrderByInput {
  id_ASC
  id_DESC
  HPC_ASC
  HPC_DESC
  MoI_ASC
  MoI_DESC
  DnV_ASC
  DnV_DESC
  clinicNote_ASC
  clinicNote_DESC
  diagnosisType_ASC
  diagnosisType_DESC
  currentClinicalStatus_ASC
  currentClinicalStatus_DESC
  createdAt_ASC
  createdAt_DESC
}

type PatientCasePreviousValues {
  id: ID!
  HPC: String!
  MoI: String
  DnV: String
  clinicNote: String!
  diagnosisType: String!
  currentClinicalStatus: String!
  createdAt: DateTime!
}

type PatientCaseSubscriptionPayload {
  mutation: MutationType!
  node: PatientCase
  updatedFields: [String!]
  previousValues: PatientCasePreviousValues
}

input PatientCaseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PatientCaseWhereInput
  AND: [PatientCaseSubscriptionWhereInput!]
  OR: [PatientCaseSubscriptionWhereInput!]
  NOT: [PatientCaseSubscriptionWhereInput!]
}

input PatientCaseUpdateDataInput {
  mp: MedicalPractitionerUpdateOneRequiredInput
  icdCode: IcdCodesUpdateOneRequiredInput
  icdSubCode: IcdSubCodesUpdateOneRequiredInput
  hospital: HospitalUpdateOneRequiredInput
  HPC: String
  MoI: String
  DnV: String
  clinicNote: String
  diagnosisType: String
  currentClinicalStatus: String
  records: PatientRecordUpdateManyInput
}

input PatientCaseUpdateInput {
  mp: MedicalPractitionerUpdateOneRequiredInput
  icdCode: IcdCodesUpdateOneRequiredInput
  icdSubCode: IcdSubCodesUpdateOneRequiredInput
  hospital: HospitalUpdateOneRequiredInput
  HPC: String
  MoI: String
  DnV: String
  clinicNote: String
  diagnosisType: String
  currentClinicalStatus: String
  records: PatientRecordUpdateManyInput
}

input PatientCaseUpdateManyMutationInput {
  HPC: String
  MoI: String
  DnV: String
  clinicNote: String
  diagnosisType: String
  currentClinicalStatus: String
}

input PatientCaseUpdateOneInput {
  create: PatientCaseCreateInput
  update: PatientCaseUpdateDataInput
  upsert: PatientCaseUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: PatientCaseWhereUniqueInput
}

input PatientCaseUpsertNestedInput {
  update: PatientCaseUpdateDataInput!
  create: PatientCaseCreateInput!
}

input PatientCaseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  mp: MedicalPractitionerWhereInput
  icdCode: IcdCodesWhereInput
  icdSubCode: IcdSubCodesWhereInput
  hospital: HospitalWhereInput
  HPC: String
  HPC_not: String
  HPC_in: [String!]
  HPC_not_in: [String!]
  HPC_lt: String
  HPC_lte: String
  HPC_gt: String
  HPC_gte: String
  HPC_contains: String
  HPC_not_contains: String
  HPC_starts_with: String
  HPC_not_starts_with: String
  HPC_ends_with: String
  HPC_not_ends_with: String
  MoI: String
  MoI_not: String
  MoI_in: [String!]
  MoI_not_in: [String!]
  MoI_lt: String
  MoI_lte: String
  MoI_gt: String
  MoI_gte: String
  MoI_contains: String
  MoI_not_contains: String
  MoI_starts_with: String
  MoI_not_starts_with: String
  MoI_ends_with: String
  MoI_not_ends_with: String
  DnV: String
  DnV_not: String
  DnV_in: [String!]
  DnV_not_in: [String!]
  DnV_lt: String
  DnV_lte: String
  DnV_gt: String
  DnV_gte: String
  DnV_contains: String
  DnV_not_contains: String
  DnV_starts_with: String
  DnV_not_starts_with: String
  DnV_ends_with: String
  DnV_not_ends_with: String
  clinicNote: String
  clinicNote_not: String
  clinicNote_in: [String!]
  clinicNote_not_in: [String!]
  clinicNote_lt: String
  clinicNote_lte: String
  clinicNote_gt: String
  clinicNote_gte: String
  clinicNote_contains: String
  clinicNote_not_contains: String
  clinicNote_starts_with: String
  clinicNote_not_starts_with: String
  clinicNote_ends_with: String
  clinicNote_not_ends_with: String
  diagnosisType: String
  diagnosisType_not: String
  diagnosisType_in: [String!]
  diagnosisType_not_in: [String!]
  diagnosisType_lt: String
  diagnosisType_lte: String
  diagnosisType_gt: String
  diagnosisType_gte: String
  diagnosisType_contains: String
  diagnosisType_not_contains: String
  diagnosisType_starts_with: String
  diagnosisType_not_starts_with: String
  diagnosisType_ends_with: String
  diagnosisType_not_ends_with: String
  currentClinicalStatus: String
  currentClinicalStatus_not: String
  currentClinicalStatus_in: [String!]
  currentClinicalStatus_not_in: [String!]
  currentClinicalStatus_lt: String
  currentClinicalStatus_lte: String
  currentClinicalStatus_gt: String
  currentClinicalStatus_gte: String
  currentClinicalStatus_contains: String
  currentClinicalStatus_not_contains: String
  currentClinicalStatus_starts_with: String
  currentClinicalStatus_not_starts_with: String
  currentClinicalStatus_ends_with: String
  currentClinicalStatus_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  records_every: PatientRecordWhereInput
  records_some: PatientRecordWhereInput
  records_none: PatientRecordWhereInput
  AND: [PatientCaseWhereInput!]
  OR: [PatientCaseWhereInput!]
  NOT: [PatientCaseWhereInput!]
}

input PatientCaseWhereUniqueInput {
  id: ID
}

type PatientConnection {
  pageInfo: PageInfo!
  edges: [PatientEdge]!
  aggregate: AggregatePatient!
}

input PatientCreateInput {
  id: ID
  lastName: String!
  firstName: String!
  middleName: String!
  motherName: String!
  dob: DateTime!
  bloodGroup: String!
  sex: String!
  religion: String!
  maritalStatus: String!
  primaryLanguage: String!
  birthPlace: String!
  address: String!
  countryCode: Int!
  occupation: String!
  contact1: String!
  contact2: String!
  email: String!
  password: String!
  socioEconomicStatus: String!
  immunizationStatus: String!
  allergyStatus: Boolean!
  organDonorStatus: Boolean!
  PMH: String!
  DHx: String!
  Ca: String!
  IDDM: String!
  NIDDM: String!
  MI: String!
  AF: String!
  careProvider: CareProviderCreateOneInput
  insurance: InsuranceCreateOneInput
  patientCase: PatientCaseCreateOneInput
  accessRequests: AccessRequestCreateManyInput
}

input PatientCreateManyInput {
  create: [PatientCreateInput!]
  connect: [PatientWhereUniqueInput!]
}

type PatientEdge {
  node: Patient!
  cursor: String!
}

enum PatientOrderByInput {
  id_ASC
  id_DESC
  lastName_ASC
  lastName_DESC
  firstName_ASC
  firstName_DESC
  middleName_ASC
  middleName_DESC
  motherName_ASC
  motherName_DESC
  dob_ASC
  dob_DESC
  bloodGroup_ASC
  bloodGroup_DESC
  sex_ASC
  sex_DESC
  religion_ASC
  religion_DESC
  maritalStatus_ASC
  maritalStatus_DESC
  primaryLanguage_ASC
  primaryLanguage_DESC
  birthPlace_ASC
  birthPlace_DESC
  address_ASC
  address_DESC
  countryCode_ASC
  countryCode_DESC
  occupation_ASC
  occupation_DESC
  contact1_ASC
  contact1_DESC
  contact2_ASC
  contact2_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  socioEconomicStatus_ASC
  socioEconomicStatus_DESC
  immunizationStatus_ASC
  immunizationStatus_DESC
  allergyStatus_ASC
  allergyStatus_DESC
  organDonorStatus_ASC
  organDonorStatus_DESC
  PMH_ASC
  PMH_DESC
  DHx_ASC
  DHx_DESC
  Ca_ASC
  Ca_DESC
  IDDM_ASC
  IDDM_DESC
  NIDDM_ASC
  NIDDM_DESC
  MI_ASC
  MI_DESC
  AF_ASC
  AF_DESC
  registeredAt_ASC
  registeredAt_DESC
}

type PatientPreviousValues {
  id: ID!
  lastName: String!
  firstName: String!
  middleName: String!
  motherName: String!
  dob: DateTime!
  bloodGroup: String!
  sex: String!
  religion: String!
  maritalStatus: String!
  primaryLanguage: String!
  birthPlace: String!
  address: String!
  countryCode: Int!
  occupation: String!
  contact1: String!
  contact2: String!
  email: String!
  password: String!
  socioEconomicStatus: String!
  immunizationStatus: String!
  allergyStatus: Boolean!
  organDonorStatus: Boolean!
  PMH: String!
  DHx: String!
  Ca: String!
  IDDM: String!
  NIDDM: String!
  MI: String!
  AF: String!
  registeredAt: DateTime!
}

type PatientRecord {
  id: ID!
  visitNo: Int!
  mp: MedicalPractitioner!
  hospital: Hospital!
  encounterDate: DateTime!
  observation: String!
  Tx: String!
  suggesstions: String
  cevsSp: Int!
  cevsDp: Int!
  cePr: Int!
  ceRr: Int!
  ceHeight: Int!
  ceWeight: Int!
  medication: String!
  advice: String
  query: String
  followUpObservation: String
}

type PatientRecordConnection {
  pageInfo: PageInfo!
  edges: [PatientRecordEdge]!
  aggregate: AggregatePatientRecord!
}

input PatientRecordCreateInput {
  id: ID
  visitNo: Int!
  mp: MedicalPractitionerCreateOneInput!
  hospital: HospitalCreateOneInput!
  observation: String!
  Tx: String!
  suggesstions: String
  cevsSp: Int!
  cevsDp: Int!
  cePr: Int!
  ceRr: Int!
  ceHeight: Int!
  ceWeight: Int!
  medication: String!
  advice: String
  query: String
  followUpObservation: String
}

input PatientRecordCreateManyInput {
  create: [PatientRecordCreateInput!]
  connect: [PatientRecordWhereUniqueInput!]
}

type PatientRecordEdge {
  node: PatientRecord!
  cursor: String!
}

enum PatientRecordOrderByInput {
  id_ASC
  id_DESC
  visitNo_ASC
  visitNo_DESC
  encounterDate_ASC
  encounterDate_DESC
  observation_ASC
  observation_DESC
  Tx_ASC
  Tx_DESC
  suggesstions_ASC
  suggesstions_DESC
  cevsSp_ASC
  cevsSp_DESC
  cevsDp_ASC
  cevsDp_DESC
  cePr_ASC
  cePr_DESC
  ceRr_ASC
  ceRr_DESC
  ceHeight_ASC
  ceHeight_DESC
  ceWeight_ASC
  ceWeight_DESC
  medication_ASC
  medication_DESC
  advice_ASC
  advice_DESC
  query_ASC
  query_DESC
  followUpObservation_ASC
  followUpObservation_DESC
}

type PatientRecordPreviousValues {
  id: ID!
  visitNo: Int!
  encounterDate: DateTime!
  observation: String!
  Tx: String!
  suggesstions: String
  cevsSp: Int!
  cevsDp: Int!
  cePr: Int!
  ceRr: Int!
  ceHeight: Int!
  ceWeight: Int!
  medication: String!
  advice: String
  query: String
  followUpObservation: String
}

input PatientRecordScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  visitNo: Int
  visitNo_not: Int
  visitNo_in: [Int!]
  visitNo_not_in: [Int!]
  visitNo_lt: Int
  visitNo_lte: Int
  visitNo_gt: Int
  visitNo_gte: Int
  encounterDate: DateTime
  encounterDate_not: DateTime
  encounterDate_in: [DateTime!]
  encounterDate_not_in: [DateTime!]
  encounterDate_lt: DateTime
  encounterDate_lte: DateTime
  encounterDate_gt: DateTime
  encounterDate_gte: DateTime
  observation: String
  observation_not: String
  observation_in: [String!]
  observation_not_in: [String!]
  observation_lt: String
  observation_lte: String
  observation_gt: String
  observation_gte: String
  observation_contains: String
  observation_not_contains: String
  observation_starts_with: String
  observation_not_starts_with: String
  observation_ends_with: String
  observation_not_ends_with: String
  Tx: String
  Tx_not: String
  Tx_in: [String!]
  Tx_not_in: [String!]
  Tx_lt: String
  Tx_lte: String
  Tx_gt: String
  Tx_gte: String
  Tx_contains: String
  Tx_not_contains: String
  Tx_starts_with: String
  Tx_not_starts_with: String
  Tx_ends_with: String
  Tx_not_ends_with: String
  suggesstions: String
  suggesstions_not: String
  suggesstions_in: [String!]
  suggesstions_not_in: [String!]
  suggesstions_lt: String
  suggesstions_lte: String
  suggesstions_gt: String
  suggesstions_gte: String
  suggesstions_contains: String
  suggesstions_not_contains: String
  suggesstions_starts_with: String
  suggesstions_not_starts_with: String
  suggesstions_ends_with: String
  suggesstions_not_ends_with: String
  cevsSp: Int
  cevsSp_not: Int
  cevsSp_in: [Int!]
  cevsSp_not_in: [Int!]
  cevsSp_lt: Int
  cevsSp_lte: Int
  cevsSp_gt: Int
  cevsSp_gte: Int
  cevsDp: Int
  cevsDp_not: Int
  cevsDp_in: [Int!]
  cevsDp_not_in: [Int!]
  cevsDp_lt: Int
  cevsDp_lte: Int
  cevsDp_gt: Int
  cevsDp_gte: Int
  cePr: Int
  cePr_not: Int
  cePr_in: [Int!]
  cePr_not_in: [Int!]
  cePr_lt: Int
  cePr_lte: Int
  cePr_gt: Int
  cePr_gte: Int
  ceRr: Int
  ceRr_not: Int
  ceRr_in: [Int!]
  ceRr_not_in: [Int!]
  ceRr_lt: Int
  ceRr_lte: Int
  ceRr_gt: Int
  ceRr_gte: Int
  ceHeight: Int
  ceHeight_not: Int
  ceHeight_in: [Int!]
  ceHeight_not_in: [Int!]
  ceHeight_lt: Int
  ceHeight_lte: Int
  ceHeight_gt: Int
  ceHeight_gte: Int
  ceWeight: Int
  ceWeight_not: Int
  ceWeight_in: [Int!]
  ceWeight_not_in: [Int!]
  ceWeight_lt: Int
  ceWeight_lte: Int
  ceWeight_gt: Int
  ceWeight_gte: Int
  medication: String
  medication_not: String
  medication_in: [String!]
  medication_not_in: [String!]
  medication_lt: String
  medication_lte: String
  medication_gt: String
  medication_gte: String
  medication_contains: String
  medication_not_contains: String
  medication_starts_with: String
  medication_not_starts_with: String
  medication_ends_with: String
  medication_not_ends_with: String
  advice: String
  advice_not: String
  advice_in: [String!]
  advice_not_in: [String!]
  advice_lt: String
  advice_lte: String
  advice_gt: String
  advice_gte: String
  advice_contains: String
  advice_not_contains: String
  advice_starts_with: String
  advice_not_starts_with: String
  advice_ends_with: String
  advice_not_ends_with: String
  query: String
  query_not: String
  query_in: [String!]
  query_not_in: [String!]
  query_lt: String
  query_lte: String
  query_gt: String
  query_gte: String
  query_contains: String
  query_not_contains: String
  query_starts_with: String
  query_not_starts_with: String
  query_ends_with: String
  query_not_ends_with: String
  followUpObservation: String
  followUpObservation_not: String
  followUpObservation_in: [String!]
  followUpObservation_not_in: [String!]
  followUpObservation_lt: String
  followUpObservation_lte: String
  followUpObservation_gt: String
  followUpObservation_gte: String
  followUpObservation_contains: String
  followUpObservation_not_contains: String
  followUpObservation_starts_with: String
  followUpObservation_not_starts_with: String
  followUpObservation_ends_with: String
  followUpObservation_not_ends_with: String
  AND: [PatientRecordScalarWhereInput!]
  OR: [PatientRecordScalarWhereInput!]
  NOT: [PatientRecordScalarWhereInput!]
}

type PatientRecordSubscriptionPayload {
  mutation: MutationType!
  node: PatientRecord
  updatedFields: [String!]
  previousValues: PatientRecordPreviousValues
}

input PatientRecordSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PatientRecordWhereInput
  AND: [PatientRecordSubscriptionWhereInput!]
  OR: [PatientRecordSubscriptionWhereInput!]
  NOT: [PatientRecordSubscriptionWhereInput!]
}

input PatientRecordUpdateDataInput {
  visitNo: Int
  mp: MedicalPractitionerUpdateOneRequiredInput
  hospital: HospitalUpdateOneRequiredInput
  observation: String
  Tx: String
  suggesstions: String
  cevsSp: Int
  cevsDp: Int
  cePr: Int
  ceRr: Int
  ceHeight: Int
  ceWeight: Int
  medication: String
  advice: String
  query: String
  followUpObservation: String
}

input PatientRecordUpdateInput {
  visitNo: Int
  mp: MedicalPractitionerUpdateOneRequiredInput
  hospital: HospitalUpdateOneRequiredInput
  observation: String
  Tx: String
  suggesstions: String
  cevsSp: Int
  cevsDp: Int
  cePr: Int
  ceRr: Int
  ceHeight: Int
  ceWeight: Int
  medication: String
  advice: String
  query: String
  followUpObservation: String
}

input PatientRecordUpdateManyDataInput {
  visitNo: Int
  observation: String
  Tx: String
  suggesstions: String
  cevsSp: Int
  cevsDp: Int
  cePr: Int
  ceRr: Int
  ceHeight: Int
  ceWeight: Int
  medication: String
  advice: String
  query: String
  followUpObservation: String
}

input PatientRecordUpdateManyInput {
  create: [PatientRecordCreateInput!]
  update: [PatientRecordUpdateWithWhereUniqueNestedInput!]
  upsert: [PatientRecordUpsertWithWhereUniqueNestedInput!]
  delete: [PatientRecordWhereUniqueInput!]
  connect: [PatientRecordWhereUniqueInput!]
  set: [PatientRecordWhereUniqueInput!]
  disconnect: [PatientRecordWhereUniqueInput!]
  deleteMany: [PatientRecordScalarWhereInput!]
  updateMany: [PatientRecordUpdateManyWithWhereNestedInput!]
}

input PatientRecordUpdateManyMutationInput {
  visitNo: Int
  observation: String
  Tx: String
  suggesstions: String
  cevsSp: Int
  cevsDp: Int
  cePr: Int
  ceRr: Int
  ceHeight: Int
  ceWeight: Int
  medication: String
  advice: String
  query: String
  followUpObservation: String
}

input PatientRecordUpdateManyWithWhereNestedInput {
  where: PatientRecordScalarWhereInput!
  data: PatientRecordUpdateManyDataInput!
}

input PatientRecordUpdateWithWhereUniqueNestedInput {
  where: PatientRecordWhereUniqueInput!
  data: PatientRecordUpdateDataInput!
}

input PatientRecordUpsertWithWhereUniqueNestedInput {
  where: PatientRecordWhereUniqueInput!
  update: PatientRecordUpdateDataInput!
  create: PatientRecordCreateInput!
}

input PatientRecordWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  visitNo: Int
  visitNo_not: Int
  visitNo_in: [Int!]
  visitNo_not_in: [Int!]
  visitNo_lt: Int
  visitNo_lte: Int
  visitNo_gt: Int
  visitNo_gte: Int
  mp: MedicalPractitionerWhereInput
  hospital: HospitalWhereInput
  encounterDate: DateTime
  encounterDate_not: DateTime
  encounterDate_in: [DateTime!]
  encounterDate_not_in: [DateTime!]
  encounterDate_lt: DateTime
  encounterDate_lte: DateTime
  encounterDate_gt: DateTime
  encounterDate_gte: DateTime
  observation: String
  observation_not: String
  observation_in: [String!]
  observation_not_in: [String!]
  observation_lt: String
  observation_lte: String
  observation_gt: String
  observation_gte: String
  observation_contains: String
  observation_not_contains: String
  observation_starts_with: String
  observation_not_starts_with: String
  observation_ends_with: String
  observation_not_ends_with: String
  Tx: String
  Tx_not: String
  Tx_in: [String!]
  Tx_not_in: [String!]
  Tx_lt: String
  Tx_lte: String
  Tx_gt: String
  Tx_gte: String
  Tx_contains: String
  Tx_not_contains: String
  Tx_starts_with: String
  Tx_not_starts_with: String
  Tx_ends_with: String
  Tx_not_ends_with: String
  suggesstions: String
  suggesstions_not: String
  suggesstions_in: [String!]
  suggesstions_not_in: [String!]
  suggesstions_lt: String
  suggesstions_lte: String
  suggesstions_gt: String
  suggesstions_gte: String
  suggesstions_contains: String
  suggesstions_not_contains: String
  suggesstions_starts_with: String
  suggesstions_not_starts_with: String
  suggesstions_ends_with: String
  suggesstions_not_ends_with: String
  cevsSp: Int
  cevsSp_not: Int
  cevsSp_in: [Int!]
  cevsSp_not_in: [Int!]
  cevsSp_lt: Int
  cevsSp_lte: Int
  cevsSp_gt: Int
  cevsSp_gte: Int
  cevsDp: Int
  cevsDp_not: Int
  cevsDp_in: [Int!]
  cevsDp_not_in: [Int!]
  cevsDp_lt: Int
  cevsDp_lte: Int
  cevsDp_gt: Int
  cevsDp_gte: Int
  cePr: Int
  cePr_not: Int
  cePr_in: [Int!]
  cePr_not_in: [Int!]
  cePr_lt: Int
  cePr_lte: Int
  cePr_gt: Int
  cePr_gte: Int
  ceRr: Int
  ceRr_not: Int
  ceRr_in: [Int!]
  ceRr_not_in: [Int!]
  ceRr_lt: Int
  ceRr_lte: Int
  ceRr_gt: Int
  ceRr_gte: Int
  ceHeight: Int
  ceHeight_not: Int
  ceHeight_in: [Int!]
  ceHeight_not_in: [Int!]
  ceHeight_lt: Int
  ceHeight_lte: Int
  ceHeight_gt: Int
  ceHeight_gte: Int
  ceWeight: Int
  ceWeight_not: Int
  ceWeight_in: [Int!]
  ceWeight_not_in: [Int!]
  ceWeight_lt: Int
  ceWeight_lte: Int
  ceWeight_gt: Int
  ceWeight_gte: Int
  medication: String
  medication_not: String
  medication_in: [String!]
  medication_not_in: [String!]
  medication_lt: String
  medication_lte: String
  medication_gt: String
  medication_gte: String
  medication_contains: String
  medication_not_contains: String
  medication_starts_with: String
  medication_not_starts_with: String
  medication_ends_with: String
  medication_not_ends_with: String
  advice: String
  advice_not: String
  advice_in: [String!]
  advice_not_in: [String!]
  advice_lt: String
  advice_lte: String
  advice_gt: String
  advice_gte: String
  advice_contains: String
  advice_not_contains: String
  advice_starts_with: String
  advice_not_starts_with: String
  advice_ends_with: String
  advice_not_ends_with: String
  query: String
  query_not: String
  query_in: [String!]
  query_not_in: [String!]
  query_lt: String
  query_lte: String
  query_gt: String
  query_gte: String
  query_contains: String
  query_not_contains: String
  query_starts_with: String
  query_not_starts_with: String
  query_ends_with: String
  query_not_ends_with: String
  followUpObservation: String
  followUpObservation_not: String
  followUpObservation_in: [String!]
  followUpObservation_not_in: [String!]
  followUpObservation_lt: String
  followUpObservation_lte: String
  followUpObservation_gt: String
  followUpObservation_gte: String
  followUpObservation_contains: String
  followUpObservation_not_contains: String
  followUpObservation_starts_with: String
  followUpObservation_not_starts_with: String
  followUpObservation_ends_with: String
  followUpObservation_not_ends_with: String
  AND: [PatientRecordWhereInput!]
  OR: [PatientRecordWhereInput!]
  NOT: [PatientRecordWhereInput!]
}

input PatientRecordWhereUniqueInput {
  id: ID
}

input PatientScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  middleName: String
  middleName_not: String
  middleName_in: [String!]
  middleName_not_in: [String!]
  middleName_lt: String
  middleName_lte: String
  middleName_gt: String
  middleName_gte: String
  middleName_contains: String
  middleName_not_contains: String
  middleName_starts_with: String
  middleName_not_starts_with: String
  middleName_ends_with: String
  middleName_not_ends_with: String
  motherName: String
  motherName_not: String
  motherName_in: [String!]
  motherName_not_in: [String!]
  motherName_lt: String
  motherName_lte: String
  motherName_gt: String
  motherName_gte: String
  motherName_contains: String
  motherName_not_contains: String
  motherName_starts_with: String
  motherName_not_starts_with: String
  motherName_ends_with: String
  motherName_not_ends_with: String
  dob: DateTime
  dob_not: DateTime
  dob_in: [DateTime!]
  dob_not_in: [DateTime!]
  dob_lt: DateTime
  dob_lte: DateTime
  dob_gt: DateTime
  dob_gte: DateTime
  bloodGroup: String
  bloodGroup_not: String
  bloodGroup_in: [String!]
  bloodGroup_not_in: [String!]
  bloodGroup_lt: String
  bloodGroup_lte: String
  bloodGroup_gt: String
  bloodGroup_gte: String
  bloodGroup_contains: String
  bloodGroup_not_contains: String
  bloodGroup_starts_with: String
  bloodGroup_not_starts_with: String
  bloodGroup_ends_with: String
  bloodGroup_not_ends_with: String
  sex: String
  sex_not: String
  sex_in: [String!]
  sex_not_in: [String!]
  sex_lt: String
  sex_lte: String
  sex_gt: String
  sex_gte: String
  sex_contains: String
  sex_not_contains: String
  sex_starts_with: String
  sex_not_starts_with: String
  sex_ends_with: String
  sex_not_ends_with: String
  religion: String
  religion_not: String
  religion_in: [String!]
  religion_not_in: [String!]
  religion_lt: String
  religion_lte: String
  religion_gt: String
  religion_gte: String
  religion_contains: String
  religion_not_contains: String
  religion_starts_with: String
  religion_not_starts_with: String
  religion_ends_with: String
  religion_not_ends_with: String
  maritalStatus: String
  maritalStatus_not: String
  maritalStatus_in: [String!]
  maritalStatus_not_in: [String!]
  maritalStatus_lt: String
  maritalStatus_lte: String
  maritalStatus_gt: String
  maritalStatus_gte: String
  maritalStatus_contains: String
  maritalStatus_not_contains: String
  maritalStatus_starts_with: String
  maritalStatus_not_starts_with: String
  maritalStatus_ends_with: String
  maritalStatus_not_ends_with: String
  primaryLanguage: String
  primaryLanguage_not: String
  primaryLanguage_in: [String!]
  primaryLanguage_not_in: [String!]
  primaryLanguage_lt: String
  primaryLanguage_lte: String
  primaryLanguage_gt: String
  primaryLanguage_gte: String
  primaryLanguage_contains: String
  primaryLanguage_not_contains: String
  primaryLanguage_starts_with: String
  primaryLanguage_not_starts_with: String
  primaryLanguage_ends_with: String
  primaryLanguage_not_ends_with: String
  birthPlace: String
  birthPlace_not: String
  birthPlace_in: [String!]
  birthPlace_not_in: [String!]
  birthPlace_lt: String
  birthPlace_lte: String
  birthPlace_gt: String
  birthPlace_gte: String
  birthPlace_contains: String
  birthPlace_not_contains: String
  birthPlace_starts_with: String
  birthPlace_not_starts_with: String
  birthPlace_ends_with: String
  birthPlace_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  countryCode: Int
  countryCode_not: Int
  countryCode_in: [Int!]
  countryCode_not_in: [Int!]
  countryCode_lt: Int
  countryCode_lte: Int
  countryCode_gt: Int
  countryCode_gte: Int
  occupation: String
  occupation_not: String
  occupation_in: [String!]
  occupation_not_in: [String!]
  occupation_lt: String
  occupation_lte: String
  occupation_gt: String
  occupation_gte: String
  occupation_contains: String
  occupation_not_contains: String
  occupation_starts_with: String
  occupation_not_starts_with: String
  occupation_ends_with: String
  occupation_not_ends_with: String
  contact1: String
  contact1_not: String
  contact1_in: [String!]
  contact1_not_in: [String!]
  contact1_lt: String
  contact1_lte: String
  contact1_gt: String
  contact1_gte: String
  contact1_contains: String
  contact1_not_contains: String
  contact1_starts_with: String
  contact1_not_starts_with: String
  contact1_ends_with: String
  contact1_not_ends_with: String
  contact2: String
  contact2_not: String
  contact2_in: [String!]
  contact2_not_in: [String!]
  contact2_lt: String
  contact2_lte: String
  contact2_gt: String
  contact2_gte: String
  contact2_contains: String
  contact2_not_contains: String
  contact2_starts_with: String
  contact2_not_starts_with: String
  contact2_ends_with: String
  contact2_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  socioEconomicStatus: String
  socioEconomicStatus_not: String
  socioEconomicStatus_in: [String!]
  socioEconomicStatus_not_in: [String!]
  socioEconomicStatus_lt: String
  socioEconomicStatus_lte: String
  socioEconomicStatus_gt: String
  socioEconomicStatus_gte: String
  socioEconomicStatus_contains: String
  socioEconomicStatus_not_contains: String
  socioEconomicStatus_starts_with: String
  socioEconomicStatus_not_starts_with: String
  socioEconomicStatus_ends_with: String
  socioEconomicStatus_not_ends_with: String
  immunizationStatus: String
  immunizationStatus_not: String
  immunizationStatus_in: [String!]
  immunizationStatus_not_in: [String!]
  immunizationStatus_lt: String
  immunizationStatus_lte: String
  immunizationStatus_gt: String
  immunizationStatus_gte: String
  immunizationStatus_contains: String
  immunizationStatus_not_contains: String
  immunizationStatus_starts_with: String
  immunizationStatus_not_starts_with: String
  immunizationStatus_ends_with: String
  immunizationStatus_not_ends_with: String
  allergyStatus: Boolean
  allergyStatus_not: Boolean
  organDonorStatus: Boolean
  organDonorStatus_not: Boolean
  PMH: String
  PMH_not: String
  PMH_in: [String!]
  PMH_not_in: [String!]
  PMH_lt: String
  PMH_lte: String
  PMH_gt: String
  PMH_gte: String
  PMH_contains: String
  PMH_not_contains: String
  PMH_starts_with: String
  PMH_not_starts_with: String
  PMH_ends_with: String
  PMH_not_ends_with: String
  DHx: String
  DHx_not: String
  DHx_in: [String!]
  DHx_not_in: [String!]
  DHx_lt: String
  DHx_lte: String
  DHx_gt: String
  DHx_gte: String
  DHx_contains: String
  DHx_not_contains: String
  DHx_starts_with: String
  DHx_not_starts_with: String
  DHx_ends_with: String
  DHx_not_ends_with: String
  Ca: String
  Ca_not: String
  Ca_in: [String!]
  Ca_not_in: [String!]
  Ca_lt: String
  Ca_lte: String
  Ca_gt: String
  Ca_gte: String
  Ca_contains: String
  Ca_not_contains: String
  Ca_starts_with: String
  Ca_not_starts_with: String
  Ca_ends_with: String
  Ca_not_ends_with: String
  IDDM: String
  IDDM_not: String
  IDDM_in: [String!]
  IDDM_not_in: [String!]
  IDDM_lt: String
  IDDM_lte: String
  IDDM_gt: String
  IDDM_gte: String
  IDDM_contains: String
  IDDM_not_contains: String
  IDDM_starts_with: String
  IDDM_not_starts_with: String
  IDDM_ends_with: String
  IDDM_not_ends_with: String
  NIDDM: String
  NIDDM_not: String
  NIDDM_in: [String!]
  NIDDM_not_in: [String!]
  NIDDM_lt: String
  NIDDM_lte: String
  NIDDM_gt: String
  NIDDM_gte: String
  NIDDM_contains: String
  NIDDM_not_contains: String
  NIDDM_starts_with: String
  NIDDM_not_starts_with: String
  NIDDM_ends_with: String
  NIDDM_not_ends_with: String
  MI: String
  MI_not: String
  MI_in: [String!]
  MI_not_in: [String!]
  MI_lt: String
  MI_lte: String
  MI_gt: String
  MI_gte: String
  MI_contains: String
  MI_not_contains: String
  MI_starts_with: String
  MI_not_starts_with: String
  MI_ends_with: String
  MI_not_ends_with: String
  AF: String
  AF_not: String
  AF_in: [String!]
  AF_not_in: [String!]
  AF_lt: String
  AF_lte: String
  AF_gt: String
  AF_gte: String
  AF_contains: String
  AF_not_contains: String
  AF_starts_with: String
  AF_not_starts_with: String
  AF_ends_with: String
  AF_not_ends_with: String
  registeredAt: DateTime
  registeredAt_not: DateTime
  registeredAt_in: [DateTime!]
  registeredAt_not_in: [DateTime!]
  registeredAt_lt: DateTime
  registeredAt_lte: DateTime
  registeredAt_gt: DateTime
  registeredAt_gte: DateTime
  AND: [PatientScalarWhereInput!]
  OR: [PatientScalarWhereInput!]
  NOT: [PatientScalarWhereInput!]
}

type PatientSubscriptionPayload {
  mutation: MutationType!
  node: Patient
  updatedFields: [String!]
  previousValues: PatientPreviousValues
}

input PatientSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PatientWhereInput
  AND: [PatientSubscriptionWhereInput!]
  OR: [PatientSubscriptionWhereInput!]
  NOT: [PatientSubscriptionWhereInput!]
}

input PatientUpdateDataInput {
  lastName: String
  firstName: String
  middleName: String
  motherName: String
  dob: DateTime
  bloodGroup: String
  sex: String
  religion: String
  maritalStatus: String
  primaryLanguage: String
  birthPlace: String
  address: String
  countryCode: Int
  occupation: String
  contact1: String
  contact2: String
  email: String
  password: String
  socioEconomicStatus: String
  immunizationStatus: String
  allergyStatus: Boolean
  organDonorStatus: Boolean
  PMH: String
  DHx: String
  Ca: String
  IDDM: String
  NIDDM: String
  MI: String
  AF: String
  careProvider: CareProviderUpdateOneInput
  insurance: InsuranceUpdateOneInput
  patientCase: PatientCaseUpdateOneInput
  accessRequests: AccessRequestUpdateManyInput
}

input PatientUpdateInput {
  lastName: String
  firstName: String
  middleName: String
  motherName: String
  dob: DateTime
  bloodGroup: String
  sex: String
  religion: String
  maritalStatus: String
  primaryLanguage: String
  birthPlace: String
  address: String
  countryCode: Int
  occupation: String
  contact1: String
  contact2: String
  email: String
  password: String
  socioEconomicStatus: String
  immunizationStatus: String
  allergyStatus: Boolean
  organDonorStatus: Boolean
  PMH: String
  DHx: String
  Ca: String
  IDDM: String
  NIDDM: String
  MI: String
  AF: String
  careProvider: CareProviderUpdateOneInput
  insurance: InsuranceUpdateOneInput
  patientCase: PatientCaseUpdateOneInput
  accessRequests: AccessRequestUpdateManyInput
}

input PatientUpdateManyDataInput {
  lastName: String
  firstName: String
  middleName: String
  motherName: String
  dob: DateTime
  bloodGroup: String
  sex: String
  religion: String
  maritalStatus: String
  primaryLanguage: String
  birthPlace: String
  address: String
  countryCode: Int
  occupation: String
  contact1: String
  contact2: String
  email: String
  password: String
  socioEconomicStatus: String
  immunizationStatus: String
  allergyStatus: Boolean
  organDonorStatus: Boolean
  PMH: String
  DHx: String
  Ca: String
  IDDM: String
  NIDDM: String
  MI: String
  AF: String
}

input PatientUpdateManyInput {
  create: [PatientCreateInput!]
  update: [PatientUpdateWithWhereUniqueNestedInput!]
  upsert: [PatientUpsertWithWhereUniqueNestedInput!]
  delete: [PatientWhereUniqueInput!]
  connect: [PatientWhereUniqueInput!]
  set: [PatientWhereUniqueInput!]
  disconnect: [PatientWhereUniqueInput!]
  deleteMany: [PatientScalarWhereInput!]
  updateMany: [PatientUpdateManyWithWhereNestedInput!]
}

input PatientUpdateManyMutationInput {
  lastName: String
  firstName: String
  middleName: String
  motherName: String
  dob: DateTime
  bloodGroup: String
  sex: String
  religion: String
  maritalStatus: String
  primaryLanguage: String
  birthPlace: String
  address: String
  countryCode: Int
  occupation: String
  contact1: String
  contact2: String
  email: String
  password: String
  socioEconomicStatus: String
  immunizationStatus: String
  allergyStatus: Boolean
  organDonorStatus: Boolean
  PMH: String
  DHx: String
  Ca: String
  IDDM: String
  NIDDM: String
  MI: String
  AF: String
}

input PatientUpdateManyWithWhereNestedInput {
  where: PatientScalarWhereInput!
  data: PatientUpdateManyDataInput!
}

input PatientUpdateWithWhereUniqueNestedInput {
  where: PatientWhereUniqueInput!
  data: PatientUpdateDataInput!
}

input PatientUpsertWithWhereUniqueNestedInput {
  where: PatientWhereUniqueInput!
  update: PatientUpdateDataInput!
  create: PatientCreateInput!
}

input PatientWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  middleName: String
  middleName_not: String
  middleName_in: [String!]
  middleName_not_in: [String!]
  middleName_lt: String
  middleName_lte: String
  middleName_gt: String
  middleName_gte: String
  middleName_contains: String
  middleName_not_contains: String
  middleName_starts_with: String
  middleName_not_starts_with: String
  middleName_ends_with: String
  middleName_not_ends_with: String
  motherName: String
  motherName_not: String
  motherName_in: [String!]
  motherName_not_in: [String!]
  motherName_lt: String
  motherName_lte: String
  motherName_gt: String
  motherName_gte: String
  motherName_contains: String
  motherName_not_contains: String
  motherName_starts_with: String
  motherName_not_starts_with: String
  motherName_ends_with: String
  motherName_not_ends_with: String
  dob: DateTime
  dob_not: DateTime
  dob_in: [DateTime!]
  dob_not_in: [DateTime!]
  dob_lt: DateTime
  dob_lte: DateTime
  dob_gt: DateTime
  dob_gte: DateTime
  bloodGroup: String
  bloodGroup_not: String
  bloodGroup_in: [String!]
  bloodGroup_not_in: [String!]
  bloodGroup_lt: String
  bloodGroup_lte: String
  bloodGroup_gt: String
  bloodGroup_gte: String
  bloodGroup_contains: String
  bloodGroup_not_contains: String
  bloodGroup_starts_with: String
  bloodGroup_not_starts_with: String
  bloodGroup_ends_with: String
  bloodGroup_not_ends_with: String
  sex: String
  sex_not: String
  sex_in: [String!]
  sex_not_in: [String!]
  sex_lt: String
  sex_lte: String
  sex_gt: String
  sex_gte: String
  sex_contains: String
  sex_not_contains: String
  sex_starts_with: String
  sex_not_starts_with: String
  sex_ends_with: String
  sex_not_ends_with: String
  religion: String
  religion_not: String
  religion_in: [String!]
  religion_not_in: [String!]
  religion_lt: String
  religion_lte: String
  religion_gt: String
  religion_gte: String
  religion_contains: String
  religion_not_contains: String
  religion_starts_with: String
  religion_not_starts_with: String
  religion_ends_with: String
  religion_not_ends_with: String
  maritalStatus: String
  maritalStatus_not: String
  maritalStatus_in: [String!]
  maritalStatus_not_in: [String!]
  maritalStatus_lt: String
  maritalStatus_lte: String
  maritalStatus_gt: String
  maritalStatus_gte: String
  maritalStatus_contains: String
  maritalStatus_not_contains: String
  maritalStatus_starts_with: String
  maritalStatus_not_starts_with: String
  maritalStatus_ends_with: String
  maritalStatus_not_ends_with: String
  primaryLanguage: String
  primaryLanguage_not: String
  primaryLanguage_in: [String!]
  primaryLanguage_not_in: [String!]
  primaryLanguage_lt: String
  primaryLanguage_lte: String
  primaryLanguage_gt: String
  primaryLanguage_gte: String
  primaryLanguage_contains: String
  primaryLanguage_not_contains: String
  primaryLanguage_starts_with: String
  primaryLanguage_not_starts_with: String
  primaryLanguage_ends_with: String
  primaryLanguage_not_ends_with: String
  birthPlace: String
  birthPlace_not: String
  birthPlace_in: [String!]
  birthPlace_not_in: [String!]
  birthPlace_lt: String
  birthPlace_lte: String
  birthPlace_gt: String
  birthPlace_gte: String
  birthPlace_contains: String
  birthPlace_not_contains: String
  birthPlace_starts_with: String
  birthPlace_not_starts_with: String
  birthPlace_ends_with: String
  birthPlace_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  countryCode: Int
  countryCode_not: Int
  countryCode_in: [Int!]
  countryCode_not_in: [Int!]
  countryCode_lt: Int
  countryCode_lte: Int
  countryCode_gt: Int
  countryCode_gte: Int
  occupation: String
  occupation_not: String
  occupation_in: [String!]
  occupation_not_in: [String!]
  occupation_lt: String
  occupation_lte: String
  occupation_gt: String
  occupation_gte: String
  occupation_contains: String
  occupation_not_contains: String
  occupation_starts_with: String
  occupation_not_starts_with: String
  occupation_ends_with: String
  occupation_not_ends_with: String
  contact1: String
  contact1_not: String
  contact1_in: [String!]
  contact1_not_in: [String!]
  contact1_lt: String
  contact1_lte: String
  contact1_gt: String
  contact1_gte: String
  contact1_contains: String
  contact1_not_contains: String
  contact1_starts_with: String
  contact1_not_starts_with: String
  contact1_ends_with: String
  contact1_not_ends_with: String
  contact2: String
  contact2_not: String
  contact2_in: [String!]
  contact2_not_in: [String!]
  contact2_lt: String
  contact2_lte: String
  contact2_gt: String
  contact2_gte: String
  contact2_contains: String
  contact2_not_contains: String
  contact2_starts_with: String
  contact2_not_starts_with: String
  contact2_ends_with: String
  contact2_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  socioEconomicStatus: String
  socioEconomicStatus_not: String
  socioEconomicStatus_in: [String!]
  socioEconomicStatus_not_in: [String!]
  socioEconomicStatus_lt: String
  socioEconomicStatus_lte: String
  socioEconomicStatus_gt: String
  socioEconomicStatus_gte: String
  socioEconomicStatus_contains: String
  socioEconomicStatus_not_contains: String
  socioEconomicStatus_starts_with: String
  socioEconomicStatus_not_starts_with: String
  socioEconomicStatus_ends_with: String
  socioEconomicStatus_not_ends_with: String
  immunizationStatus: String
  immunizationStatus_not: String
  immunizationStatus_in: [String!]
  immunizationStatus_not_in: [String!]
  immunizationStatus_lt: String
  immunizationStatus_lte: String
  immunizationStatus_gt: String
  immunizationStatus_gte: String
  immunizationStatus_contains: String
  immunizationStatus_not_contains: String
  immunizationStatus_starts_with: String
  immunizationStatus_not_starts_with: String
  immunizationStatus_ends_with: String
  immunizationStatus_not_ends_with: String
  allergyStatus: Boolean
  allergyStatus_not: Boolean
  organDonorStatus: Boolean
  organDonorStatus_not: Boolean
  PMH: String
  PMH_not: String
  PMH_in: [String!]
  PMH_not_in: [String!]
  PMH_lt: String
  PMH_lte: String
  PMH_gt: String
  PMH_gte: String
  PMH_contains: String
  PMH_not_contains: String
  PMH_starts_with: String
  PMH_not_starts_with: String
  PMH_ends_with: String
  PMH_not_ends_with: String
  DHx: String
  DHx_not: String
  DHx_in: [String!]
  DHx_not_in: [String!]
  DHx_lt: String
  DHx_lte: String
  DHx_gt: String
  DHx_gte: String
  DHx_contains: String
  DHx_not_contains: String
  DHx_starts_with: String
  DHx_not_starts_with: String
  DHx_ends_with: String
  DHx_not_ends_with: String
  Ca: String
  Ca_not: String
  Ca_in: [String!]
  Ca_not_in: [String!]
  Ca_lt: String
  Ca_lte: String
  Ca_gt: String
  Ca_gte: String
  Ca_contains: String
  Ca_not_contains: String
  Ca_starts_with: String
  Ca_not_starts_with: String
  Ca_ends_with: String
  Ca_not_ends_with: String
  IDDM: String
  IDDM_not: String
  IDDM_in: [String!]
  IDDM_not_in: [String!]
  IDDM_lt: String
  IDDM_lte: String
  IDDM_gt: String
  IDDM_gte: String
  IDDM_contains: String
  IDDM_not_contains: String
  IDDM_starts_with: String
  IDDM_not_starts_with: String
  IDDM_ends_with: String
  IDDM_not_ends_with: String
  NIDDM: String
  NIDDM_not: String
  NIDDM_in: [String!]
  NIDDM_not_in: [String!]
  NIDDM_lt: String
  NIDDM_lte: String
  NIDDM_gt: String
  NIDDM_gte: String
  NIDDM_contains: String
  NIDDM_not_contains: String
  NIDDM_starts_with: String
  NIDDM_not_starts_with: String
  NIDDM_ends_with: String
  NIDDM_not_ends_with: String
  MI: String
  MI_not: String
  MI_in: [String!]
  MI_not_in: [String!]
  MI_lt: String
  MI_lte: String
  MI_gt: String
  MI_gte: String
  MI_contains: String
  MI_not_contains: String
  MI_starts_with: String
  MI_not_starts_with: String
  MI_ends_with: String
  MI_not_ends_with: String
  AF: String
  AF_not: String
  AF_in: [String!]
  AF_not_in: [String!]
  AF_lt: String
  AF_lte: String
  AF_gt: String
  AF_gte: String
  AF_contains: String
  AF_not_contains: String
  AF_starts_with: String
  AF_not_starts_with: String
  AF_ends_with: String
  AF_not_ends_with: String
  registeredAt: DateTime
  registeredAt_not: DateTime
  registeredAt_in: [DateTime!]
  registeredAt_not_in: [DateTime!]
  registeredAt_lt: DateTime
  registeredAt_lte: DateTime
  registeredAt_gt: DateTime
  registeredAt_gte: DateTime
  careProvider: CareProviderWhereInput
  insurance: InsuranceWhereInput
  patientCase: PatientCaseWhereInput
  accessRequests_every: AccessRequestWhereInput
  accessRequests_some: AccessRequestWhereInput
  accessRequests_none: AccessRequestWhereInput
  AND: [PatientWhereInput!]
  OR: [PatientWhereInput!]
  NOT: [PatientWhereInput!]
}

input PatientWhereUniqueInput {
  id: ID
  email: String
}

type Query {
  accessRequest(where: AccessRequestWhereUniqueInput!): AccessRequest
  accessRequests(where: AccessRequestWhereInput, orderBy: AccessRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AccessRequest]!
  accessRequestsConnection(where: AccessRequestWhereInput, orderBy: AccessRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccessRequestConnection!
  admin(where: AdminWhereUniqueInput!): Admin
  admins(where: AdminWhereInput, orderBy: AdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Admin]!
  adminsConnection(where: AdminWhereInput, orderBy: AdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminConnection!
  careProvider(where: CareProviderWhereUniqueInput!): CareProvider
  careProviders(where: CareProviderWhereInput, orderBy: CareProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CareProvider]!
  careProvidersConnection(where: CareProviderWhereInput, orderBy: CareProviderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CareProviderConnection!
  hospital(where: HospitalWhereUniqueInput!): Hospital
  hospitals(where: HospitalWhereInput, orderBy: HospitalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hospital]!
  hospitalsConnection(where: HospitalWhereInput, orderBy: HospitalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HospitalConnection!
  icdCodes(where: IcdCodesWhereUniqueInput!): IcdCodes
  icdCodeses(where: IcdCodesWhereInput, orderBy: IcdCodesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IcdCodes]!
  icdCodesesConnection(where: IcdCodesWhereInput, orderBy: IcdCodesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IcdCodesConnection!
  icdSubCodes(where: IcdSubCodesWhereUniqueInput!): IcdSubCodes
  icdSubCodeses(where: IcdSubCodesWhereInput, orderBy: IcdSubCodesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IcdSubCodes]!
  icdSubCodesesConnection(where: IcdSubCodesWhereInput, orderBy: IcdSubCodesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IcdSubCodesConnection!
  insurance(where: InsuranceWhereUniqueInput!): Insurance
  insurances(where: InsuranceWhereInput, orderBy: InsuranceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Insurance]!
  insurancesConnection(where: InsuranceWhereInput, orderBy: InsuranceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InsuranceConnection!
  medicalPractitioner(where: MedicalPractitionerWhereUniqueInput!): MedicalPractitioner
  medicalPractitioners(where: MedicalPractitionerWhereInput, orderBy: MedicalPractitionerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MedicalPractitioner]!
  medicalPractitionersConnection(where: MedicalPractitionerWhereInput, orderBy: MedicalPractitionerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MedicalPractitionerConnection!
  patient(where: PatientWhereUniqueInput!): Patient
  patients(where: PatientWhereInput, orderBy: PatientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Patient]!
  patientsConnection(where: PatientWhereInput, orderBy: PatientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PatientConnection!
  patientCase(where: PatientCaseWhereUniqueInput!): PatientCase
  patientCases(where: PatientCaseWhereInput, orderBy: PatientCaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PatientCase]!
  patientCasesConnection(where: PatientCaseWhereInput, orderBy: PatientCaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PatientCaseConnection!
  patientRecord(where: PatientRecordWhereUniqueInput!): PatientRecord
  patientRecords(where: PatientRecordWhereInput, orderBy: PatientRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PatientRecord]!
  patientRecordsConnection(where: PatientRecordWhereInput, orderBy: PatientRecordOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PatientRecordConnection!
  node(id: ID!): Node
}

type Subscription {
  accessRequest(where: AccessRequestSubscriptionWhereInput): AccessRequestSubscriptionPayload
  admin(where: AdminSubscriptionWhereInput): AdminSubscriptionPayload
  careProvider(where: CareProviderSubscriptionWhereInput): CareProviderSubscriptionPayload
  hospital(where: HospitalSubscriptionWhereInput): HospitalSubscriptionPayload
  icdCodes(where: IcdCodesSubscriptionWhereInput): IcdCodesSubscriptionPayload
  icdSubCodes(where: IcdSubCodesSubscriptionWhereInput): IcdSubCodesSubscriptionPayload
  insurance(where: InsuranceSubscriptionWhereInput): InsuranceSubscriptionPayload
  medicalPractitioner(where: MedicalPractitionerSubscriptionWhereInput): MedicalPractitionerSubscriptionPayload
  patient(where: PatientSubscriptionWhereInput): PatientSubscriptionPayload
  patientCase(where: PatientCaseSubscriptionWhereInput): PatientCaseSubscriptionPayload
  patientRecord(where: PatientRecordSubscriptionWhereInput): PatientRecordSubscriptionPayload
}
`
      }
    